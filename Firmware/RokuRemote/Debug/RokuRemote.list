
RokuRemote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08008184  08008184  00018184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008328  08008328  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008330  08008330  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008334  08008334  00018334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08008338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001240  20000174  080084ac  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013b4  080084ac  000213b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c96  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000345a  00000000  00000000  00036e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f0  00000000  00000000  0003a290  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001058  00000000  00000000  0003b480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a41  00000000  00000000  0003c4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000112ac  00000000  00000000  00053f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086156  00000000  00000000  000651c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb31b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f50  00000000  00000000  000eb398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000174 	.word	0x20000174
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800816c 	.word	0x0800816c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000178 	.word	0x20000178
 8000104:	0800816c 	.word	0x0800816c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <delay_us>:
 */

#include "Remote.h"

void delay_us(uint16_t time)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	0002      	movs	r2, r0
 8000440:	1dbb      	adds	r3, r7, #6
 8000442:	801a      	strh	r2, [r3, #0]
	TIM6->ARR = time;
 8000444:	4b09      	ldr	r3, [pc, #36]	; (800046c <delay_us+0x34>)
 8000446:	1dba      	adds	r2, r7, #6
 8000448:	8812      	ldrh	r2, [r2, #0]
 800044a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->CR1 |= (1<<0);
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <delay_us+0x34>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <delay_us+0x34>)
 8000452:	2101      	movs	r1, #1
 8000454:	430a      	orrs	r2, r1
 8000456:	601a      	str	r2, [r3, #0]

	while(TIM6->CR1 & 1);
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <delay_us+0x34>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2201      	movs	r2, #1
 8000460:	4013      	ands	r3, r2
 8000462:	d1fa      	bne.n	800045a <delay_us+0x22>
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40001000 	.word	0x40001000

08000470 <sendStart>:

void sendStart()
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0

	TIM2->CCMR1|=(1<<5)|(1<<6);  // Set to PWM mode
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	05db      	lsls	r3, r3, #23
 8000478:	699a      	ldr	r2, [r3, #24]
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	05db      	lsls	r3, r3, #23
 800047e:	2160      	movs	r1, #96	; 0x60
 8000480:	430a      	orrs	r2, r1
 8000482:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1&= ~(1<<4);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	699a      	ldr	r2, [r3, #24]
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	2110      	movs	r1, #16
 8000490:	438a      	bics	r2, r1
 8000492:	619a      	str	r2, [r3, #24]


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <sendStart+0x50>)
 8000496:	2100      	movs	r1, #0
 8000498:	0018      	movs	r0, r3
 800049a:	f003 fa9b 	bl	80039d4 <HAL_TIM_PWM_Start>
	delay_us(9000);
 800049e:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <sendStart+0x54>)
 80004a0:	0018      	movs	r0, r3
 80004a2:	f7ff ffc9 	bl	8000438 <delay_us>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <sendStart+0x50>)
 80004a8:	2100      	movs	r1, #0
 80004aa:	0018      	movs	r0, r3
 80004ac:	f003 fab4 	bl	8003a18 <HAL_TIM_PWM_Stop>
	delay_us(4500);
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <sendStart+0x58>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff ffc0 	bl	8000438 <delay_us>

}
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			; (mov r8, r8)
 80004c0:	20000494 	.word	0x20000494
 80004c4:	00002328 	.word	0x00002328
 80004c8:	00001194 	.word	0x00001194

080004cc <sendData>:


void sendData(uint32_t data)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	uint32_t dataMask = (1<<31);
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	60fb      	str	r3, [r7, #12]
	sendStart();
 80004da:	f7ff ffc9 	bl	8000470 <sendStart>

	for(;dataMask > 0;dataMask=dataMask>>1)
 80004de:	e033      	b.n	8000548 <sendData+0x7c>
	{

		bool bit = dataMask & data;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	687a      	ldr	r2, [r7, #4]
 80004e4:	401a      	ands	r2, r3
 80004e6:	200b      	movs	r0, #11
 80004e8:	183b      	adds	r3, r7, r0
 80004ea:	1e51      	subs	r1, r2, #1
 80004ec:	418a      	sbcs	r2, r1
 80004ee:	701a      	strb	r2, [r3, #0]
		if(bit)
 80004f0:	183b      	adds	r3, r7, r0
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d012      	beq.n	800051e <sendData+0x52>
		{
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004f8:	4b18      	ldr	r3, [pc, #96]	; (800055c <sendData+0x90>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	0018      	movs	r0, r3
 80004fe:	f003 fa69 	bl	80039d4 <HAL_TIM_PWM_Start>
			delay_us(ONTIME);
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <sendData+0x94>)
 8000504:	0018      	movs	r0, r3
 8000506:	f7ff ff97 	bl	8000438 <delay_us>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800050a:	4b14      	ldr	r3, [pc, #80]	; (800055c <sendData+0x90>)
 800050c:	2100      	movs	r1, #0
 800050e:	0018      	movs	r0, r3
 8000510:	f003 fa82 	bl	8003a18 <HAL_TIM_PWM_Stop>
			delay_us(OFFTIME_1);
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <sendData+0x98>)
 8000516:	0018      	movs	r0, r3
 8000518:	f7ff ff8e 	bl	8000438 <delay_us>
 800051c:	e011      	b.n	8000542 <sendData+0x76>
		}
		else
		{
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <sendData+0x90>)
 8000520:	2100      	movs	r1, #0
 8000522:	0018      	movs	r0, r3
 8000524:	f003 fa56 	bl	80039d4 <HAL_TIM_PWM_Start>
			delay_us(ONTIME);
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <sendData+0x94>)
 800052a:	0018      	movs	r0, r3
 800052c:	f7ff ff84 	bl	8000438 <delay_us>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000530:	4b0a      	ldr	r3, [pc, #40]	; (800055c <sendData+0x90>)
 8000532:	2100      	movs	r1, #0
 8000534:	0018      	movs	r0, r3
 8000536:	f003 fa6f 	bl	8003a18 <HAL_TIM_PWM_Stop>
			delay_us(OFFTIME_0);
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <sendData+0x94>)
 800053c:	0018      	movs	r0, r3
 800053e:	f7ff ff7b 	bl	8000438 <delay_us>
	for(;dataMask > 0;dataMask=dataMask>>1)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	085b      	lsrs	r3, r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1c8      	bne.n	80004e0 <sendData+0x14>


		}

	}
	sendStop();
 800054e:	f000 f80b 	bl	8000568 <sendStop>
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b004      	add	sp, #16
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	20000494 	.word	0x20000494
 8000560:	00000232 	.word	0x00000232
 8000564:	00000697 	.word	0x00000697

08000568 <sendStop>:

void sendStop()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <sendStop+0x48>)
 800056e:	2100      	movs	r1, #0
 8000570:	0018      	movs	r0, r3
 8000572:	f003 fa2f 	bl	80039d4 <HAL_TIM_PWM_Start>
	delay_us(562);
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <sendStop+0x4c>)
 8000578:	0018      	movs	r0, r3
 800057a:	f7ff ff5d 	bl	8000438 <delay_us>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <sendStop+0x48>)
 8000580:	2100      	movs	r1, #0
 8000582:	0018      	movs	r0, r3
 8000584:	f003 fa48 	bl	8003a18 <HAL_TIM_PWM_Stop>

	TIM2->CCMR1 |= (1<<6);		// Force output to low to improve fall time
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	699a      	ldr	r2, [r3, #24]
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	430a      	orrs	r2, r1
 8000596:	619a      	str	r2, [r3, #24]
	TIM2->CCMR1 &= ~((1<<5)|(1<<4));
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	05db      	lsls	r3, r3, #23
 800059c:	699a      	ldr	r2, [r3, #24]
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	2130      	movs	r1, #48	; 0x30
 80005a4:	438a      	bics	r2, r1
 80005a6:	619a      	str	r2, [r3, #24]

}
 80005a8:	46c0      	nop			; (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	20000494 	.word	0x20000494
 80005b4:	00000232 	.word	0x00000232

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fcd2 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f820 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f9f4 	bl	80009b0 <MX_GPIO_Init>
  MX_RTC_Init();
 80005c8:	f000 f89c 	bl	8000704 <MX_RTC_Init>
  MX_TIM2_Init();
 80005cc:	f000 f8fe 	bl	80007cc <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80005d0:	f007 f8a2 	bl	8007718 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80005d4:	f000 f9bc 	bl	8000950 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80005d8:	f000 f976 	bl	80008c8 <MX_TIM6_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sendData(0x57e3f00f);
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <main+0x44>)
 80005de:	0018      	movs	r0, r3
 80005e0:	f7ff ff74 	bl	80004cc <sendData>
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, LED_IND_Pin);
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <main+0x48>)
 80005e6:	2120      	movs	r1, #32
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 ffa6 	bl	800153a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80005ee:	23fa      	movs	r3, #250	; 0xfa
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 fd16 	bl	8001024 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LED_IND_Pin);
 80005f8:	e7f4      	b.n	80005e4 <main+0x2c>
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	57e3f00f 	.word	0x57e3f00f
 8000600:	50000400 	.word	0x50000400

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b09d      	sub	sp, #116	; 0x74
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	2438      	movs	r4, #56	; 0x38
 800060c:	193b      	adds	r3, r7, r4
 800060e:	0018      	movs	r0, r3
 8000610:	2338      	movs	r3, #56	; 0x38
 8000612:	001a      	movs	r2, r3
 8000614:	2100      	movs	r1, #0
 8000616:	f007 fda1 	bl	800815c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061a:	2324      	movs	r3, #36	; 0x24
 800061c:	18fb      	adds	r3, r7, r3
 800061e:	0018      	movs	r0, r3
 8000620:	2314      	movs	r3, #20
 8000622:	001a      	movs	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f007 fd99 	bl	800815c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	0018      	movs	r0, r3
 800062e:	2320      	movs	r3, #32
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	f007 fd92 	bl	800815c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	4b30      	ldr	r3, [pc, #192]	; (80006fc <SystemClock_Config+0xf8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a30      	ldr	r2, [pc, #192]	; (8000700 <SystemClock_Config+0xfc>)
 800063e:	401a      	ands	r2, r3
 8000640:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <SystemClock_Config+0xf8>)
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	0109      	lsls	r1, r1, #4
 8000646:	430a      	orrs	r2, r1
 8000648:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800064a:	0021      	movs	r1, r4
 800064c:	187b      	adds	r3, r7, r1
 800064e:	222a      	movs	r2, #42	; 0x2a
 8000650:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2210      	movs	r2, #16
 800065c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2201      	movs	r2, #1
 8000662:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2201      	movs	r2, #1
 8000668:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2202      	movs	r2, #2
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	03d2      	lsls	r2, r2, #15
 8000682:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	187b      	adds	r3, r7, r1
 8000686:	0018      	movs	r0, r3
 8000688:	f001 ffce 	bl	8002628 <HAL_RCC_OscConfig>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000690:	f000 fa4e 	bl	8000b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	2124      	movs	r1, #36	; 0x24
 8000696:	187b      	adds	r3, r7, r1
 8000698:	220f      	movs	r2, #15
 800069a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2203      	movs	r2, #3
 80006a0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2101      	movs	r1, #1
 80006b8:	0018      	movs	r0, r3
 80006ba:	f002 fb75 	bl	8002da8 <HAL_RCC_ClockConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006c2:	f000 fa35 	bl	8000b30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2261      	movs	r2, #97	; 0x61
 80006ca:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0292      	lsls	r2, r2, #10
 80006d8:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	04d2      	lsls	r2, r2, #19
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 fd43 	bl	8003170 <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006ee:	f000 fa1f 	bl	8000b30 <Error_Handler>
  }
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b01d      	add	sp, #116	; 0x74
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40007000 	.word	0x40007000
 8000700:	ffffe7ff 	.word	0xffffe7ff

08000704 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	0018      	movs	r0, r3
 800070e:	2314      	movs	r3, #20
 8000710:	001a      	movs	r2, r3
 8000712:	2100      	movs	r1, #0
 8000714:	f007 fd22 	bl	800815c <memset>
  RTC_DateTypeDef sDate = {0};
 8000718:	003b      	movs	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800071e:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <MX_RTC_Init+0xc0>)
 8000720:	4a29      	ldr	r2, [pc, #164]	; (80007c8 <MX_RTC_Init+0xc4>)
 8000722:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <MX_RTC_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <MX_RTC_Init+0xc0>)
 800072c:	227f      	movs	r2, #127	; 0x7f
 800072e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000730:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <MX_RTC_Init+0xc0>)
 8000732:	22ff      	movs	r2, #255	; 0xff
 8000734:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000736:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <MX_RTC_Init+0xc0>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_RTC_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_RTC_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_RTC_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_RTC_Init+0xc0>)
 8000750:	0018      	movs	r0, r3
 8000752:	f002 fe55 	bl	8003400 <HAL_RTC_Init>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800075a:	f000 f9e9 	bl	8000b30 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	2200      	movs	r2, #0
 8000768:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800077c:	1d39      	adds	r1, r7, #4
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_RTC_Init+0xc0>)
 8000780:	2201      	movs	r2, #1
 8000782:	0018      	movs	r0, r3
 8000784:	f002 feda 	bl	800353c <HAL_RTC_SetTime>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800078c:	f000 f9d0 	bl	8000b30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000790:	003b      	movs	r3, r7
 8000792:	2201      	movs	r2, #1
 8000794:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000796:	003b      	movs	r3, r7
 8000798:	2201      	movs	r2, #1
 800079a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800079c:	003b      	movs	r3, r7
 800079e:	2201      	movs	r2, #1
 80007a0:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80007a2:	003b      	movs	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007a8:	0039      	movs	r1, r7
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_RTC_Init+0xc0>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	0018      	movs	r0, r3
 80007b0:	f002 ff88 	bl	80036c4 <HAL_RTC_SetDate>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 80007b8:	f000 f9ba 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b006      	add	sp, #24
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000434 	.word	0x20000434
 80007c8:	40002800 	.word	0x40002800

080007cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007d2:	2318      	movs	r3, #24
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	0018      	movs	r0, r3
 80007d8:	2310      	movs	r3, #16
 80007da:	001a      	movs	r2, r3
 80007dc:	2100      	movs	r1, #0
 80007de:	f007 fcbd 	bl	800815c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e2:	2310      	movs	r3, #16
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	2308      	movs	r3, #8
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f007 fcb5 	bl	800815c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f2:	003b      	movs	r3, r7
 80007f4:	0018      	movs	r0, r3
 80007f6:	2310      	movs	r3, #16
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f007 fcae 	bl	800815c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000800:	4b30      	ldr	r3, [pc, #192]	; (80008c4 <MX_TIM2_Init+0xf8>)
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	05d2      	lsls	r2, r2, #23
 8000806:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8000808:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <MX_TIM2_Init+0xf8>)
 800080a:	2204      	movs	r2, #4
 800080c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <MX_TIM2_Init+0xf8>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 126;
 8000814:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_TIM2_Init+0xf8>)
 8000816:	227e      	movs	r2, #126	; 0x7e
 8000818:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_TIM2_Init+0xf8>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000820:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MX_TIM2_Init+0xf8>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000826:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_TIM2_Init+0xf8>)
 8000828:	0018      	movs	r0, r3
 800082a:	f003 f873 	bl	8003914 <HAL_TIM_Base_Init>
 800082e:	1e03      	subs	r3, r0, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000832:	f000 f97d 	bl	8000b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000836:	2118      	movs	r1, #24
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	0152      	lsls	r2, r2, #5
 800083e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000840:	187a      	adds	r2, r7, r1
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_TIM2_Init+0xf8>)
 8000844:	0011      	movs	r1, r2
 8000846:	0018      	movs	r0, r3
 8000848:	f003 fa0a 	bl	8003c60 <HAL_TIM_ConfigClockSource>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000850:	f000 f96e 	bl	8000b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_TIM2_Init+0xf8>)
 8000856:	0018      	movs	r0, r3
 8000858:	f003 f888 	bl	800396c <HAL_TIM_PWM_Init>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000860:	f000 f966 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000864:	2110      	movs	r1, #16
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000872:	187a      	adds	r2, r7, r1
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_TIM2_Init+0xf8>)
 8000876:	0011      	movs	r1, r2
 8000878:	0018      	movs	r0, r3
 800087a:	f003 fcc4 	bl	8004206 <HAL_TIMEx_MasterConfigSynchronization>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000882:	f000 f955 	bl	8000b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000886:	003b      	movs	r3, r7
 8000888:	2260      	movs	r2, #96	; 0x60
 800088a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 38;
 800088c:	003b      	movs	r3, r7
 800088e:	2226      	movs	r2, #38	; 0x26
 8000890:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000892:	003b      	movs	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000898:	003b      	movs	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800089e:	0039      	movs	r1, r7
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_TIM2_Init+0xf8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	0018      	movs	r0, r3
 80008a6:	f003 f923 	bl	8003af0 <HAL_TIM_PWM_ConfigChannel>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80008ae:	f000 f93f 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008b2:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <MX_TIM2_Init+0xf8>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 f991 	bl	8000bdc <HAL_TIM_MspPostInit>

}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b00a      	add	sp, #40	; 0x28
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	20000494 	.word	0x20000494

080008c8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	003b      	movs	r3, r7
 80008d0:	0018      	movs	r0, r3
 80008d2:	2308      	movs	r3, #8
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f007 fc40 	bl	800815c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_TIM6_Init+0x80>)
 80008de:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_TIM6_Init+0x84>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24;
 80008e2:	4b19      	ldr	r3, [pc, #100]	; (8000948 <MX_TIM6_Init+0x80>)
 80008e4:	2218      	movs	r2, #24
 80008e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_TIM6_Init+0x80>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 500;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_TIM6_Init+0x80>)
 80008f0:	22fa      	movs	r2, #250	; 0xfa
 80008f2:	0052      	lsls	r2, r2, #1
 80008f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_TIM6_Init+0x80>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_TIM6_Init+0x80>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f003 f808 	bl	8003914 <HAL_TIM_Base_Init>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8000908:	f000 f912 	bl	8000b30 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_TIM6_Init+0x80>)
 800090e:	2108      	movs	r1, #8
 8000910:	0018      	movs	r0, r3
 8000912:	f003 f8a7 	bl	8003a64 <HAL_TIM_OnePulse_Init>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <MX_TIM6_Init+0x56>
  {
    Error_Handler();
 800091a:	f000 f909 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091e:	003b      	movs	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	003b      	movs	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800092a:	003a      	movs	r2, r7
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_TIM6_Init+0x80>)
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f003 fc68 	bl	8004206 <HAL_TIMEx_MasterConfigSynchronization>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_TIM6_Init+0x76>
  {
    Error_Handler();
 800093a:	f000 f8f9 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	46bd      	mov	sp, r7
 8000942:	b002      	add	sp, #8
 8000944:	bd80      	pop	{r7, pc}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	20000458 	.word	0x20000458
 800094c:	40001000 	.word	0x40001000

08000950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_USART1_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800095c:	22e1      	movs	r2, #225	; 0xe1
 800095e:	0252      	lsls	r2, r2, #9
 8000960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <MX_USART1_UART_Init+0x58>)
 8000994:	0018      	movs	r0, r3
 8000996:	f003 fc79 	bl	800428c <HAL_UART_Init>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f8c7 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200003b4 	.word	0x200003b4
 80009ac:	40013800 	.word	0x40013800

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	240c      	movs	r4, #12
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	0018      	movs	r0, r3
 80009bc:	2314      	movs	r3, #20
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f007 fbcb 	bl	800815c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	4b55      	ldr	r3, [pc, #340]	; (8000b1c <MX_GPIO_Init+0x16c>)
 80009c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ca:	4b54      	ldr	r3, [pc, #336]	; (8000b1c <MX_GPIO_Init+0x16c>)
 80009cc:	2104      	movs	r1, #4
 80009ce:	430a      	orrs	r2, r1
 80009d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d2:	4b52      	ldr	r3, [pc, #328]	; (8000b1c <MX_GPIO_Init+0x16c>)
 80009d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d6:	2204      	movs	r2, #4
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b4f      	ldr	r3, [pc, #316]	; (8000b1c <MX_GPIO_Init+0x16c>)
 80009e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009e2:	4b4e      	ldr	r3, [pc, #312]	; (8000b1c <MX_GPIO_Init+0x16c>)
 80009e4:	2101      	movs	r1, #1
 80009e6:	430a      	orrs	r2, r1
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ea:	4b4c      	ldr	r3, [pc, #304]	; (8000b1c <MX_GPIO_Init+0x16c>)
 80009ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ee:	2201      	movs	r2, #1
 80009f0:	4013      	ands	r3, r2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	4b49      	ldr	r3, [pc, #292]	; (8000b1c <MX_GPIO_Init+0x16c>)
 80009f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009fa:	4b48      	ldr	r3, [pc, #288]	; (8000b1c <MX_GPIO_Init+0x16c>)
 80009fc:	2102      	movs	r1, #2
 80009fe:	430a      	orrs	r2, r1
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a02:	4b46      	ldr	r3, [pc, #280]	; (8000b1c <MX_GPIO_Init+0x16c>)
 8000a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a06:	2202      	movs	r2, #2
 8000a08:	4013      	ands	r3, r2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_IND_GPIO_Port, LED_IND_Pin, GPIO_PIN_RESET);
 8000a0e:	4b44      	ldr	r3, [pc, #272]	; (8000b20 <MX_GPIO_Init+0x170>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	2120      	movs	r1, #32
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fd73 	bl	8001500 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MF1_Pin MF2_Pin */
  GPIO_InitStruct.Pin = MF1_Pin|MF2_Pin;
 8000a1a:	193b      	adds	r3, r7, r4
 8000a1c:	22c0      	movs	r2, #192	; 0xc0
 8000a1e:	0212      	lsls	r2, r2, #8
 8000a20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	4a3c      	ldr	r2, [pc, #240]	; (8000b24 <MX_GPIO_Init+0x174>)
 8000a32:	0019      	movs	r1, r3
 8000a34:	0010      	movs	r0, r2
 8000a36:	f000 fbed 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : MF3_Pin MF5_Pin */
  GPIO_InitStruct.Pin = MF3_Pin|MF5_Pin;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	2202      	movs	r2, #2
 8000a4a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	193a      	adds	r2, r7, r4
 8000a4e:	23a0      	movs	r3, #160	; 0xa0
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	0011      	movs	r1, r2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fbdd 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWR_Pin BCK_Pin HOME_Pin UP_Pin 
                           RGT_Pin LFT_Pin V__Pin V_A9_Pin 
                           MUTE_Pin */
  GPIO_InitStruct.Pin = PWR_Pin|BCK_Pin|HOME_Pin|UP_Pin 
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	4a32      	ldr	r2, [pc, #200]	; (8000b28 <MX_GPIO_Init+0x178>)
 8000a5e:	601a      	str	r2, [r3, #0]
                          |RGT_Pin|LFT_Pin|V__Pin|V_A9_Pin 
                          |MUTE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	4a32      	ldr	r2, [pc, #200]	; (8000b2c <MX_GPIO_Init+0x17c>)
 8000a64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2202      	movs	r2, #2
 8000a6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	193a      	adds	r2, r7, r4
 8000a6e:	23a0      	movs	r3, #160	; 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	0011      	movs	r1, r2
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fbcd 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : DWN_Pin OK_Pin */
  GPIO_InitStruct.Pin = DWN_Pin|OK_Pin;
 8000a7a:	0021      	movs	r1, r4
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2203      	movs	r2, #3
 8000a80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	4a29      	ldr	r2, [pc, #164]	; (8000b2c <MX_GPIO_Init+0x17c>)
 8000a86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8e:	000c      	movs	r4, r1
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <MX_GPIO_Init+0x170>)
 8000a94:	0019      	movs	r1, r3
 8000a96:	0010      	movs	r0, r2
 8000a98:	f000 fbbc 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : MF4_Pin USB_SENSE_Pin */
  GPIO_InitStruct.Pin = MF4_Pin|USB_SENSE_Pin;
 8000a9c:	0021      	movs	r1, r4
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2218      	movs	r2, #24
 8000aa2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2202      	movs	r2, #2
 8000aae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	000c      	movs	r4, r1
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	4a1a      	ldr	r2, [pc, #104]	; (8000b20 <MX_GPIO_Init+0x170>)
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	0010      	movs	r0, r2
 8000aba:	f000 fbab 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_IND_Pin */
  GPIO_InitStruct.Pin = LED_IND_Pin;
 8000abe:	0021      	movs	r1, r4
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2201      	movs	r2, #1
 8000aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2202      	movs	r2, #2
 8000ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_IND_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	4a11      	ldr	r2, [pc, #68]	; (8000b20 <MX_GPIO_Init+0x170>)
 8000adc:	0019      	movs	r1, r3
 8000ade:	0010      	movs	r0, r2
 8000ae0:	f000 fb98 	bl	8001214 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2005      	movs	r0, #5
 8000aea:	f000 fb61 	bl	80011b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000aee:	2005      	movs	r0, #5
 8000af0:	f000 fb73 	bl	80011da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2006      	movs	r0, #6
 8000afa:	f000 fb59 	bl	80011b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000afe:	2006      	movs	r0, #6
 8000b00:	f000 fb6b 	bl	80011da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2100      	movs	r1, #0
 8000b08:	2007      	movs	r0, #7
 8000b0a:	f000 fb51 	bl	80011b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b0e:	2007      	movs	r0, #7
 8000b10:	f000 fb63 	bl	80011da <HAL_NVIC_EnableIRQ>

}
 8000b14:	46c0      	nop			; (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b009      	add	sp, #36	; 0x24
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	50000400 	.word	0x50000400
 8000b24:	50000800 	.word	0x50000800
 8000b28:	000007fc 	.word	0x000007fc
 8000b2c:	10110000 	.word	0x10110000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_MspInit+0x24>)
 8000b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <HAL_MspInit+0x24>)
 8000b46:	2101      	movs	r1, #1
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <HAL_MspInit+0x24>)
 8000b4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_MspInit+0x24>)
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	0549      	lsls	r1, r1, #21
 8000b56:	430a      	orrs	r2, r1
 8000b58:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_RTC_MspInit+0x28>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d106      	bne.n	8000b84 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_RTC_MspInit+0x2c>)
 8000b78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b7a:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_RTC_MspInit+0x2c>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	02c9      	lsls	r1, r1, #11
 8000b80:	430a      	orrs	r2, r1
 8000b82:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b002      	add	sp, #8
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40002800 	.word	0x40002800
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d106      	bne.n	8000bb6 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <HAL_TIM_Base_MspInit+0x40>)
 8000baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_TIM_Base_MspInit+0x40>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000bb4:	e00a      	b.n	8000bcc <HAL_TIM_Base_MspInit+0x38>
  else if(htim_base->Instance==TIM6)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_TIM_Base_MspInit+0x44>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d105      	bne.n	8000bcc <HAL_TIM_Base_MspInit+0x38>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <HAL_TIM_Base_MspInit+0x40>)
 8000bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_TIM_Base_MspInit+0x40>)
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40001000 	.word	0x40001000

08000bdc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	230c      	movs	r3, #12
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	0018      	movs	r0, r3
 8000bea:	2314      	movs	r3, #20
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f007 fab4 	bl	800815c <memset>
  if(htim->Instance==TIM2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	05db      	lsls	r3, r3, #23
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d123      	bne.n	8000c48 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_TIM_MspPostInit+0x74>)
 8000c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_TIM_MspPostInit+0x74>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_TIM_MspPostInit+0x74>)
 8000c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c10:	2201      	movs	r2, #1
 8000c12:	4013      	ands	r3, r2
 8000c14:	60bb      	str	r3, [r7, #8]
 8000c16:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8000c18:	210c      	movs	r1, #12
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	2280      	movs	r2, #128	; 0x80
 8000c1e:	0212      	lsls	r2, r2, #8
 8000c20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2202      	movs	r2, #2
 8000c26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2205      	movs	r2, #5
 8000c38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	187a      	adds	r2, r7, r1
 8000c3c:	23a0      	movs	r3, #160	; 0xa0
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	0011      	movs	r1, r2
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fae6 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b008      	add	sp, #32
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	0018      	movs	r0, r3
 8000c62:	2314      	movs	r3, #20
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f007 fa78 	bl	800815c <memset>
  if(huart->Instance==USART1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_UART_MspInit+0x7c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d128      	bne.n	8000cc8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	01c9      	lsls	r1, r1, #7
 8000c80:	430a      	orrs	r2, r1
 8000c82:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c90:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_UART_MspInit+0x80>)
 8000c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c94:	2202      	movs	r2, #2
 8000c96:	4013      	ands	r3, r2
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c9c:	210c      	movs	r1, #12
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	22c0      	movs	r2, #192	; 0xc0
 8000ca2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	187b      	adds	r3, r7, r1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_UART_MspInit+0x84>)
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	f000 faa6 	bl	8001214 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b008      	add	sp, #32
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40013800 	.word	0x40013800
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	50000400 	.word	0x50000400

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f978 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f000 fc24 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f000 fc21 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000d28:	2004      	movs	r0, #4
 8000d2a:	f000 fc19 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000d2e:	2008      	movs	r0, #8
 8000d30:	f000 fc16 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000d3e:	2010      	movs	r0, #16
 8000d40:	f000 fc0e 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000d44:	2020      	movs	r0, #32
 8000d46:	f000 fc0b 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d4a:	2040      	movs	r0, #64	; 0x40
 8000d4c:	f000 fc08 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000d50:	2080      	movs	r0, #128	; 0x80
 8000d52:	f000 fc05 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 fc00 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f000 fbfb 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 fbf6 	bl	8001560 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d74:	46c0      	nop			; (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <USB_IRQHandler+0x14>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 fd22 	bl	80017cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	20001140 	.word	0x20001140

08000d94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	1dbb      	adds	r3, r7, #6
 8000d9e:	801a      	strh	r2, [r3, #0]
	switch(GPIO_Pin)
 8000da0:	1dbb      	adds	r3, r7, #6
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	2b20      	cmp	r3, #32
 8000da6:	d03c      	beq.n	8000e22 <HAL_GPIO_EXTI_Callback+0x8e>
 8000da8:	dc0c      	bgt.n	8000dc4 <HAL_GPIO_EXTI_Callback+0x30>
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	d020      	beq.n	8000df0 <HAL_GPIO_EXTI_Callback+0x5c>
 8000dae:	dc04      	bgt.n	8000dba <HAL_GPIO_EXTI_Callback+0x26>
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d045      	beq.n	8000e40 <HAL_GPIO_EXTI_Callback+0xac>
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d048      	beq.n	8000e4a <HAL_GPIO_EXTI_Callback+0xb6>
		break;
	case MUTE_Pin:
		sendData(0x57e304fb);
		break;
	default:
		break;
 8000db8:	e051      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
	switch(GPIO_Pin)
 8000dba:	2b08      	cmp	r3, #8
 8000dbc:	d027      	beq.n	8000e0e <HAL_GPIO_EXTI_Callback+0x7a>
 8000dbe:	2b10      	cmp	r3, #16
 8000dc0:	d02a      	beq.n	8000e18 <HAL_GPIO_EXTI_Callback+0x84>
		break;
 8000dc2:	e04c      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
	switch(GPIO_Pin)
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	0052      	lsls	r2, r2, #1
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d016      	beq.n	8000dfa <HAL_GPIO_EXTI_Callback+0x66>
 8000dcc:	2280      	movs	r2, #128	; 0x80
 8000dce:	0052      	lsls	r2, r2, #1
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	dc04      	bgt.n	8000dde <HAL_GPIO_EXTI_Callback+0x4a>
 8000dd4:	2b40      	cmp	r3, #64	; 0x40
 8000dd6:	d02e      	beq.n	8000e36 <HAL_GPIO_EXTI_Callback+0xa2>
 8000dd8:	2b80      	cmp	r3, #128	; 0x80
 8000dda:	d027      	beq.n	8000e2c <HAL_GPIO_EXTI_Callback+0x98>
		break;
 8000ddc:	e03f      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
	switch(GPIO_Pin)
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d00e      	beq.n	8000e04 <HAL_GPIO_EXTI_Callback+0x70>
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	00d2      	lsls	r2, r2, #3
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d032      	beq.n	8000e54 <HAL_GPIO_EXTI_Callback+0xc0>
		break;
 8000dee:	e036      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
		sendData(0x57e3e817);
 8000df0:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff fb6a 	bl	80004cc <sendData>
		break;
 8000df8:	e031      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
		sendData(0x57e3f00f);
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <HAL_GPIO_EXTI_Callback+0xd8>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff fb65 	bl	80004cc <sendData>
		break;
 8000e02:	e02c      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
		sendData(0x57e308f7);
 8000e04:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000e06:	0018      	movs	r0, r3
 8000e08:	f7ff fb60 	bl	80004cc <sendData>
		break;
 8000e0c:	e027      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
		sendData(0x57e36699);
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <HAL_GPIO_EXTI_Callback+0xe0>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f7ff fb5b 	bl	80004cc <sendData>
		break;
 8000e16:	e022      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
		sendData(0x57e3c03f);
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff fb56 	bl	80004cc <sendData>
		break;
 8000e20:	e01d      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
		sendData(0x57e39867);
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_GPIO_EXTI_Callback+0xe8>)
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fb51 	bl	80004cc <sendData>
		break;
 8000e2a:	e018      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
		sendData(0x57e37887);
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_GPIO_EXTI_Callback+0xec>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff fb4c 	bl	80004cc <sendData>
		break;
 8000e34:	e013      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
		sendData(0x57e3b44b);
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <HAL_GPIO_EXTI_Callback+0xf0>)
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f7ff fb47 	bl	80004cc <sendData>
		break;
 8000e3e:	e00e      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
		sendData(0x57e3cc33);
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_GPIO_EXTI_Callback+0xf4>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f7ff fb42 	bl	80004cc <sendData>
		break;
 8000e48:	e009      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
		sendData(0x57e354ab);
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_GPIO_EXTI_Callback+0xf8>)
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f7ff fb3d 	bl	80004cc <sendData>
		break;
 8000e52:	e004      	b.n	8000e5e <HAL_GPIO_EXTI_Callback+0xca>
		sendData(0x57e304fb);
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_GPIO_EXTI_Callback+0xfc>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff fb38 	bl	80004cc <sendData>
		break;
 8000e5c:	46c0      	nop			; (mov r8, r8)
	}
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	57e3e817 	.word	0x57e3e817
 8000e6c:	57e3f00f 	.word	0x57e3f00f
 8000e70:	57e308f7 	.word	0x57e308f7
 8000e74:	57e36699 	.word	0x57e36699
 8000e78:	57e3c03f 	.word	0x57e3c03f
 8000e7c:	57e39867 	.word	0x57e39867
 8000e80:	57e37887 	.word	0x57e37887
 8000e84:	57e3b44b 	.word	0x57e3b44b
 8000e88:	57e3cc33 	.word	0x57e3cc33
 8000e8c:	57e354ab 	.word	0x57e354ab
 8000e90:	57e304fb 	.word	0x57e304fb

08000e94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <SystemInit+0x64>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <SystemInit+0x64>)
 8000e9e:	2180      	movs	r1, #128	; 0x80
 8000ea0:	0049      	lsls	r1, r1, #1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <SystemInit+0x64>)
 8000ea8:	68da      	ldr	r2, [r3, #12]
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <SystemInit+0x64>)
 8000eac:	4913      	ldr	r1, [pc, #76]	; (8000efc <SystemInit+0x68>)
 8000eae:	400a      	ands	r2, r1
 8000eb0:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <SystemInit+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <SystemInit+0x64>)
 8000eb8:	4911      	ldr	r1, [pc, #68]	; (8000f00 <SystemInit+0x6c>)
 8000eba:	400a      	ands	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <SystemInit+0x64>)
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <SystemInit+0x64>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	438a      	bics	r2, r1
 8000ec8:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <SystemInit+0x64>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <SystemInit+0x64>)
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <SystemInit+0x70>)
 8000ed2:	400a      	ands	r2, r1
 8000ed4:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <SystemInit+0x64>)
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <SystemInit+0x64>)
 8000edc:	490a      	ldr	r1, [pc, #40]	; (8000f08 <SystemInit+0x74>)
 8000ede:	400a      	ands	r2, r1
 8000ee0:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SystemInit+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <SystemInit+0x78>)
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	0512      	lsls	r2, r2, #20
 8000eee:	609a      	str	r2, [r3, #8]
#endif
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	88ff400c 	.word	0x88ff400c
 8000f00:	fef6fff6 	.word	0xfef6fff6
 8000f04:	fffbffff 	.word	0xfffbffff
 8000f08:	ff02ffff 	.word	0xff02ffff
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000f14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f16:	e003      	b.n	8000f20 <LoopCopyDataInit>

08000f18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000f1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f1e:	3104      	adds	r1, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f20:	480b      	ldr	r0, [pc, #44]	; (8000f50 <LoopForever+0xa>)
  ldr  r3, =_edata
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000f24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f28:	d3f6      	bcc.n	8000f18 <CopyDataInit>
  ldr  r2, =_sbss
 8000f2a:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000f2c:	e002      	b.n	8000f34 <LoopFillZerobss>

08000f2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000f2e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f30:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f32:	3204      	adds	r2, #4

08000f34 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <LoopForever+0x16>)
  cmp  r2, r3
 8000f36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f38:	d3f9      	bcc.n	8000f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f3a:	f7ff ffab 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f007 f8e9 	bl	8008114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fb39 	bl	80005b8 <main>

08000f46 <LoopForever>:

LoopForever:
    b LoopForever
 8000f46:	e7fe      	b.n	8000f46 <LoopForever>
   ldr   r0, =_estack
 8000f48:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000f4c:	08008338 	.word	0x08008338
  ldr  r0, =_sdata
 8000f50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f54:	20000174 	.word	0x20000174
  ldr  r2, =_sbss
 8000f58:	20000174 	.word	0x20000174
  ldr  r3, = _ebss
 8000f5c:	200013b4 	.word	0x200013b4

08000f60 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_COMP_IRQHandler>
	...

08000f64 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <HAL_Init+0x3c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Init+0x3c>)
 8000f76:	2140      	movs	r1, #64	; 0x40
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 f811 	bl	8000fa4 <HAL_InitTick>
 8000f82:	1e03      	subs	r3, r0, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	2201      	movs	r2, #1
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	e001      	b.n	8000f92 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f8e:	f7ff fdd5 	bl	8000b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
}
 8000f96:	0018      	movs	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	230f      	movs	r3, #15
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_InitTick+0x50>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	23fa      	movs	r3, #250	; 0xfa
 8000fba:	0099      	lsls	r1, r3, #2
 8000fbc:	0010      	movs	r0, r2
 8000fbe:	f7ff f8a3 	bl	8000108 <__udivsi3>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f000 f918 	bl	80011fa <HAL_SYSTICK_Config>
 8000fca:	1e03      	subs	r3, r0, #0
 8000fcc:	d004      	beq.n	8000fd8 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e006      	b.n	8000fe6 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	425b      	negs	r3, r3
 8000fde:	2200      	movs	r2, #0
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 f8e5 	bl	80011b0 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8000fe6:	230f      	movs	r3, #15
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	781b      	ldrb	r3, [r3, #0]
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b004      	add	sp, #16
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick++;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_IncTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	4b02      	ldr	r3, [pc, #8]	; (800100c <HAL_IncTick+0x14>)
 8001004:	601a      	str	r2, [r3, #0]
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200004d0 	.word	0x200004d0

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b02      	ldr	r3, [pc, #8]	; (8001020 <HAL_GetTick+0x10>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	0018      	movs	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	46c0      	nop			; (mov r8, r8)
 8001020:	200004d0 	.word	0x200004d0

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff fff0 	bl	8001010 <HAL_GetTick>
 8001030:	0003      	movs	r3, r0
 8001032:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	d002      	beq.n	8001044 <HAL_Delay+0x20>
  {
    wait++;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	f7ff ffe3 	bl	8001010 <HAL_GetTick>
 800104a:	0002      	movs	r2, r0
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	429a      	cmp	r2, r3
 8001054:	d8f7      	bhi.n	8001046 <HAL_Delay+0x22>
  {
  }
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	b004      	add	sp, #16
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	0002      	movs	r2, r0
 8001068:	1dfb      	adds	r3, r7, #7
 800106a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	001a      	movs	r2, r3
 8001072:	231f      	movs	r3, #31
 8001074:	401a      	ands	r2, r3
 8001076:	4b04      	ldr	r3, [pc, #16]	; (8001088 <NVIC_EnableIRQ+0x28>)
 8001078:	2101      	movs	r1, #1
 800107a:	4091      	lsls	r1, r2
 800107c:	000a      	movs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}
 8001088:	e000e100 	.word	0xe000e100

0800108c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	0002      	movs	r2, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b7f      	cmp	r3, #127	; 0x7f
 80010a0:	d932      	bls.n	8001108 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a2:	4a2f      	ldr	r2, [pc, #188]	; (8001160 <NVIC_SetPriority+0xd4>)
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	0019      	movs	r1, r3
 80010aa:	230f      	movs	r3, #15
 80010ac:	400b      	ands	r3, r1
 80010ae:	3b08      	subs	r3, #8
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	3306      	adds	r3, #6
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	18d3      	adds	r3, r2, r3
 80010b8:	3304      	adds	r3, #4
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	1dfa      	adds	r2, r7, #7
 80010be:	7812      	ldrb	r2, [r2, #0]
 80010c0:	0011      	movs	r1, r2
 80010c2:	2203      	movs	r2, #3
 80010c4:	400a      	ands	r2, r1
 80010c6:	00d2      	lsls	r2, r2, #3
 80010c8:	21ff      	movs	r1, #255	; 0xff
 80010ca:	4091      	lsls	r1, r2
 80010cc:	000a      	movs	r2, r1
 80010ce:	43d2      	mvns	r2, r2
 80010d0:	401a      	ands	r2, r3
 80010d2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	019b      	lsls	r3, r3, #6
 80010d8:	22ff      	movs	r2, #255	; 0xff
 80010da:	401a      	ands	r2, r3
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	0018      	movs	r0, r3
 80010e2:	2303      	movs	r3, #3
 80010e4:	4003      	ands	r3, r0
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ea:	481d      	ldr	r0, [pc, #116]	; (8001160 <NVIC_SetPriority+0xd4>)
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	001c      	movs	r4, r3
 80010f2:	230f      	movs	r3, #15
 80010f4:	4023      	ands	r3, r4
 80010f6:	3b08      	subs	r3, #8
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	430a      	orrs	r2, r1
 80010fc:	3306      	adds	r3, #6
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	18c3      	adds	r3, r0, r3
 8001102:	3304      	adds	r3, #4
 8001104:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001106:	e027      	b.n	8001158 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <NVIC_SetPriority+0xd8>)
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b25b      	sxtb	r3, r3
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	33c0      	adds	r3, #192	; 0xc0
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	589b      	ldr	r3, [r3, r2]
 8001118:	1dfa      	adds	r2, r7, #7
 800111a:	7812      	ldrb	r2, [r2, #0]
 800111c:	0011      	movs	r1, r2
 800111e:	2203      	movs	r2, #3
 8001120:	400a      	ands	r2, r1
 8001122:	00d2      	lsls	r2, r2, #3
 8001124:	21ff      	movs	r1, #255	; 0xff
 8001126:	4091      	lsls	r1, r2
 8001128:	000a      	movs	r2, r1
 800112a:	43d2      	mvns	r2, r2
 800112c:	401a      	ands	r2, r3
 800112e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	019b      	lsls	r3, r3, #6
 8001134:	22ff      	movs	r2, #255	; 0xff
 8001136:	401a      	ands	r2, r3
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	0018      	movs	r0, r3
 800113e:	2303      	movs	r3, #3
 8001140:	4003      	ands	r3, r0
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001146:	4807      	ldr	r0, [pc, #28]	; (8001164 <NVIC_SetPriority+0xd8>)
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b25b      	sxtb	r3, r3
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	430a      	orrs	r2, r1
 8001152:	33c0      	adds	r3, #192	; 0xc0
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	501a      	str	r2, [r3, r0]
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b003      	add	sp, #12
 800115e:	bd90      	pop	{r4, r7, pc}
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	e000e100 	.word	0xe000e100

08001168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <SysTick_Config+0x40>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d901      	bls.n	800117e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117a:	2301      	movs	r3, #1
 800117c:	e010      	b.n	80011a0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <SysTick_Config+0x44>)
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	3a01      	subs	r2, #1
 8001184:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001186:	2301      	movs	r3, #1
 8001188:	425b      	negs	r3, r3
 800118a:	2103      	movs	r1, #3
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff ff7d 	bl	800108c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SysTick_Config+0x44>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x44>)
 800119a:	2207      	movs	r2, #7
 800119c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800119e:	2300      	movs	r3, #0
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	00ffffff 	.word	0x00ffffff
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60b9      	str	r1, [r7, #8]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	210f      	movs	r1, #15
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	1c02      	adds	r2, r0, #0
 80011c0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	187b      	adds	r3, r7, r1
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	0011      	movs	r1, r2
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff ff5d 	bl	800108c <NVIC_SetPriority>
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b004      	add	sp, #16
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	0002      	movs	r2, r0
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e6:	1dfb      	adds	r3, r7, #7
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff ff37 	bl	8001060 <NVIC_EnableIRQ>
}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b002      	add	sp, #8
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff ffaf 	bl	8001168 <SysTick_Config>
 800120a:	0003      	movs	r3, r0
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800122a:	e14f      	b.n	80014cc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4091      	lsls	r1, r2
 8001236:	000a      	movs	r2, r1
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d100      	bne.n	8001244 <HAL_GPIO_Init+0x30>
 8001242:	e140      	b.n	80014c6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x40>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b12      	cmp	r3, #18
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	58d3      	ldr	r3, [r2, r3]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2207      	movs	r2, #7
 8001266:	4013      	ands	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	409a      	lsls	r2, r3
 800126e:	0013      	movs	r3, r2
 8001270:	43da      	mvns	r2, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2107      	movs	r1, #7
 8001280:	400b      	ands	r3, r1
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	409a      	lsls	r2, r3
 8001286:	0013      	movs	r3, r2
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	6939      	ldr	r1, [r7, #16]
 800129a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d00b      	beq.n	80012bc <HAL_GPIO_Init+0xa8>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012b0:	2b11      	cmp	r3, #17
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b12      	cmp	r3, #18
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	43da      	mvns	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	409a      	lsls	r2, r3
 80012de:	0013      	movs	r3, r2
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	2201      	movs	r2, #1
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	2203      	movs	r2, #3
 800132a:	409a      	lsls	r2, r3
 800132c:	0013      	movs	r3, r2
 800132e:	43da      	mvns	r2, r3
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2203      	movs	r2, #3
 800133c:	401a      	ands	r2, r3
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	409a      	lsls	r2, r3
 8001344:	0013      	movs	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	43da      	mvns	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	055b      	lsls	r3, r3, #21
 800138a:	4013      	ands	r3, r2
 800138c:	d100      	bne.n	8001390 <HAL_GPIO_Init+0x17c>
 800138e:	e09a      	b.n	80014c6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001390:	4b54      	ldr	r3, [pc, #336]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001394:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <HAL_GPIO_Init+0x2d0>)
 8001396:	2101      	movs	r1, #1
 8001398:	430a      	orrs	r2, r1
 800139a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 800139c:	4a52      	ldr	r2, [pc, #328]	; (80014e8 <HAL_GPIO_Init+0x2d4>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	589b      	ldr	r3, [r3, r2]
 80013a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	2203      	movs	r2, #3
 80013ae:	4013      	ands	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	220f      	movs	r2, #15
 80013b4:	409a      	lsls	r2, r3
 80013b6:	0013      	movs	r3, r2
 80013b8:	43da      	mvns	r2, r3
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	23a0      	movs	r3, #160	; 0xa0
 80013c4:	05db      	lsls	r3, r3, #23
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d019      	beq.n	80013fe <HAL_GPIO_Init+0x1ea>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a47      	ldr	r2, [pc, #284]	; (80014ec <HAL_GPIO_Init+0x2d8>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x1e6>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a46      	ldr	r2, [pc, #280]	; (80014f0 <HAL_GPIO_Init+0x2dc>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x1e2>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a45      	ldr	r2, [pc, #276]	; (80014f4 <HAL_GPIO_Init+0x2e0>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x1de>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a44      	ldr	r2, [pc, #272]	; (80014f8 <HAL_GPIO_Init+0x2e4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x1da>
 80013ea:	2305      	movs	r3, #5
 80013ec:	e008      	b.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013ee:	2306      	movs	r3, #6
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013f2:	2303      	movs	r3, #3
 80013f4:	e004      	b.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x1ec>
 80013fe:	2300      	movs	r3, #0
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	2103      	movs	r1, #3
 8001404:	400a      	ands	r2, r1
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	4093      	lsls	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001410:	4935      	ldr	r1, [pc, #212]	; (80014e8 <HAL_GPIO_Init+0x2d4>)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3302      	adds	r3, #2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43da      	mvns	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	025b      	lsls	r3, r3, #9
 8001436:	4013      	ands	r3, r2
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001442:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001448:	4b2c      	ldr	r3, [pc, #176]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43da      	mvns	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	029b      	lsls	r3, r3, #10
 8001460:	4013      	ands	r3, r2
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001472:	4b22      	ldr	r3, [pc, #136]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	43da      	mvns	r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	035b      	lsls	r3, r3, #13
 800148a:	4013      	ands	r3, r2
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	43da      	mvns	r2, r3
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	4013      	ands	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	039b      	lsls	r3, r3, #14
 80014b4:	4013      	ands	r3, r2
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	40da      	lsrs	r2, r3
 80014d4:	1e13      	subs	r3, r2, #0
 80014d6:	d000      	beq.n	80014da <HAL_GPIO_Init+0x2c6>
 80014d8:	e6a8      	b.n	800122c <HAL_GPIO_Init+0x18>
  }
}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b006      	add	sp, #24
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010000 	.word	0x40010000
 80014ec:	50000400 	.word	0x50000400
 80014f0:	50000800 	.word	0x50000800
 80014f4:	50000c00 	.word	0x50000c00
 80014f8:	50001c00 	.word	0x50001c00
 80014fc:	40010400 	.word	0x40010400

08001500 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	0008      	movs	r0, r1
 800150a:	0011      	movs	r1, r2
 800150c:	1cbb      	adds	r3, r7, #2
 800150e:	1c02      	adds	r2, r0, #0
 8001510:	801a      	strh	r2, [r3, #0]
 8001512:	1c7b      	adds	r3, r7, #1
 8001514:	1c0a      	adds	r2, r1, #0
 8001516:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001518:	1c7b      	adds	r3, r7, #1
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d004      	beq.n	800152a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001520:	1cbb      	adds	r3, r7, #2
 8001522:	881a      	ldrh	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001528:	e003      	b.n	8001532 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800152a:	1cbb      	adds	r3, r7, #2
 800152c:	881a      	ldrh	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	000a      	movs	r2, r1
 8001544:	1cbb      	adds	r3, r7, #2
 8001546:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695a      	ldr	r2, [r3, #20]
 800154c:	1cbb      	adds	r3, r7, #2
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	405a      	eors	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	615a      	str	r2, [r3, #20]
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	0002      	movs	r2, r0
 8001568:	1dbb      	adds	r3, r7, #6
 800156a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	1dba      	adds	r2, r7, #6
 8001572:	8812      	ldrh	r2, [r2, #0]
 8001574:	4013      	ands	r3, r2
 8001576:	d008      	beq.n	800158a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800157a:	1dba      	adds	r2, r7, #6
 800157c:	8812      	ldrh	r2, [r2, #0]
 800157e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001580:	1dbb      	adds	r3, r7, #6
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	0018      	movs	r0, r3
 8001586:	f7ff fc05 	bl	8000d94 <HAL_GPIO_EXTI_Callback>
  }
}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b002      	add	sp, #8
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	40010400 	.word	0x40010400

08001598 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800159a:	b08b      	sub	sp, #44	; 0x2c
 800159c:	af06      	add	r7, sp, #24
 800159e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0e4      	b.n	8001774 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a73      	ldr	r2, [pc, #460]	; (800177c <HAL_PCD_Init+0x1e4>)
 80015ae:	5c9b      	ldrb	r3, [r3, r2]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d108      	bne.n	80015c8 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	238a      	movs	r3, #138	; 0x8a
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	2100      	movs	r1, #0
 80015be:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	0018      	movs	r0, r3
 80015c4:	f006 fa58 	bl	8007a78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a6c      	ldr	r2, [pc, #432]	; (800177c <HAL_PCD_Init+0x1e4>)
 80015cc:	2103      	movs	r1, #3
 80015ce:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f003 fb23 	bl	8004c20 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015da:	230f      	movs	r3, #15
 80015dc:	18fb      	adds	r3, r7, r3
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
 80015e2:	e043      	b.n	800166c <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015e4:	200f      	movs	r0, #15
 80015e6:	183b      	adds	r3, r7, r0
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	2129      	movs	r1, #41	; 0x29
 80015ee:	015b      	lsls	r3, r3, #5
 80015f0:	18d3      	adds	r3, r2, r3
 80015f2:	185b      	adds	r3, r3, r1
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015f8:	183b      	adds	r3, r7, r0
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	2128      	movs	r1, #40	; 0x28
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	18d3      	adds	r3, r2, r3
 8001604:	185b      	adds	r3, r3, r1
 8001606:	183a      	adds	r2, r7, r0
 8001608:	7812      	ldrb	r2, [r2, #0]
 800160a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800160c:	183b      	adds	r3, r7, r0
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	183a      	adds	r2, r7, r0
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	b291      	uxth	r1, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	015b      	lsls	r3, r3, #5
 800161a:	18d3      	adds	r3, r2, r3
 800161c:	3336      	adds	r3, #54	; 0x36
 800161e:	1c0a      	adds	r2, r1, #0
 8001620:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001622:	183b      	adds	r3, r7, r0
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	212b      	movs	r1, #43	; 0x2b
 800162a:	015b      	lsls	r3, r3, #5
 800162c:	18d3      	adds	r3, r2, r3
 800162e:	185b      	adds	r3, r3, r1
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001634:	183b      	adds	r3, r7, r0
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	015b      	lsls	r3, r3, #5
 800163c:	18d3      	adds	r3, r2, r3
 800163e:	3338      	adds	r3, #56	; 0x38
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001644:	183b      	adds	r3, r7, r0
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	015b      	lsls	r3, r3, #5
 800164c:	18d3      	adds	r3, r2, r3
 800164e:	333c      	adds	r3, #60	; 0x3c
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001654:	183b      	adds	r3, r7, r0
 8001656:	781a      	ldrb	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3202      	adds	r2, #2
 800165c:	0152      	lsls	r2, r2, #5
 800165e:	2100      	movs	r1, #0
 8001660:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001662:	183b      	adds	r3, r7, r0
 8001664:	781a      	ldrb	r2, [r3, #0]
 8001666:	183b      	adds	r3, r7, r0
 8001668:	3201      	adds	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	230f      	movs	r3, #15
 800166e:	18fb      	adds	r3, r7, r3
 8001670:	781a      	ldrb	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	d3b4      	bcc.n	80015e4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167a:	230f      	movs	r3, #15
 800167c:	18fb      	adds	r3, r7, r3
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
 8001682:	e03f      	b.n	8001704 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001684:	200f      	movs	r0, #15
 8001686:	183b      	adds	r3, r7, r0
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	232a      	movs	r3, #42	; 0x2a
 800168e:	33ff      	adds	r3, #255	; 0xff
 8001690:	0152      	lsls	r2, r2, #5
 8001692:	188a      	adds	r2, r1, r2
 8001694:	18d3      	adds	r3, r2, r3
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800169a:	183b      	adds	r3, r7, r0
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	2394      	movs	r3, #148	; 0x94
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	0152      	lsls	r2, r2, #5
 80016a6:	188a      	adds	r2, r1, r2
 80016a8:	18d3      	adds	r3, r2, r3
 80016aa:	183a      	adds	r2, r7, r0
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016b0:	183b      	adds	r3, r7, r0
 80016b2:	781a      	ldrb	r2, [r3, #0]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	232c      	movs	r3, #44	; 0x2c
 80016b8:	33ff      	adds	r3, #255	; 0xff
 80016ba:	0152      	lsls	r2, r2, #5
 80016bc:	188a      	adds	r2, r1, r2
 80016be:	18d3      	adds	r3, r2, r3
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016c4:	183b      	adds	r3, r7, r0
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	239c      	movs	r3, #156	; 0x9c
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	0152      	lsls	r2, r2, #5
 80016d0:	188a      	adds	r2, r1, r2
 80016d2:	18d3      	adds	r3, r2, r3
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016d8:	183b      	adds	r3, r7, r0
 80016da:	781a      	ldrb	r2, [r3, #0]
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	239e      	movs	r3, #158	; 0x9e
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	0152      	lsls	r2, r2, #5
 80016e4:	188a      	adds	r2, r1, r2
 80016e6:	18d3      	adds	r3, r2, r3
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016ec:	183b      	adds	r3, r7, r0
 80016ee:	781a      	ldrb	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	320a      	adds	r2, #10
 80016f4:	0152      	lsls	r2, r2, #5
 80016f6:	2100      	movs	r1, #0
 80016f8:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016fa:	183b      	adds	r3, r7, r0
 80016fc:	781a      	ldrb	r2, [r3, #0]
 80016fe:	183b      	adds	r3, r7, r0
 8001700:	3201      	adds	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
 8001704:	230f      	movs	r3, #15
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	781a      	ldrb	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	d3b8      	bcc.n	8001684 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	466a      	mov	r2, sp
 800171a:	0011      	movs	r1, r2
 800171c:	001a      	movs	r2, r3
 800171e:	3210      	adds	r2, #16
 8001720:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001722:	c170      	stmia	r1!, {r4, r5, r6}
 8001724:	ca30      	ldmia	r2!, {r4, r5}
 8001726:	c130      	stmia	r1!, {r4, r5}
 8001728:	6859      	ldr	r1, [r3, #4]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	f003 fa97 	bl	8004c60 <USB_DevInit>
 8001732:	1e03      	subs	r3, r0, #0
 8001734:	d005      	beq.n	8001742 <HAL_PCD_Init+0x1aa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_PCD_Init+0x1e4>)
 800173a:	2102      	movs	r1, #2
 800173c:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e018      	b.n	8001774 <HAL_PCD_Init+0x1dc>
  }

  hpcd->USB_Address = 0U;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2224      	movs	r2, #36	; 0x24
 8001746:	2100      	movs	r1, #0
 8001748:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_PCD_Init+0x1e4>)
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d103      	bne.n	8001762 <HAL_PCD_Init+0x1ca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	0018      	movs	r0, r3
 800175e:	f000 ff2e 	bl	80025be <HAL_PCDEx_ActivateLPM>
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d103      	bne.n	8001772 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f000 ff01 	bl	8002574 <HAL_PCDEx_ActivateBCD>
  }

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b005      	add	sp, #20
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177c:	00000229 	.word	0x00000229

08001780 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	238a      	movs	r3, #138	; 0x8a
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <HAL_PCD_Start+0x18>
 8001794:	2302      	movs	r3, #2
 8001796:	e014      	b.n	80017c2 <HAL_PCD_Start+0x42>
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	238a      	movs	r3, #138	; 0x8a
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	2101      	movs	r1, #1
 80017a0:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0018      	movs	r0, r3
 80017a8:	f004 fa82 	bl	8005cb0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f003 fa1b 	bl	8004bec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	238a      	movs	r3, #138	; 0x8a
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	2100      	movs	r1, #0
 80017be:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b002      	add	sp, #8
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0018      	movs	r0, r3
 80017da:	f004 fa7f 	bl	8005cdc <USB_ReadInterrupts>
 80017de:	0002      	movs	r2, r0
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	401a      	ands	r2, r3
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d103      	bne.n	80017f6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f000 fbaf 	bl	8001f54 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f004 fa6e 	bl	8005cdc <USB_ReadInterrupts>
 8001800:	0002      	movs	r2, r0
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	401a      	ands	r2, r3
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	429a      	cmp	r2, r3
 800180e:	d114      	bne.n	800183a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2244      	movs	r2, #68	; 0x44
 8001816:	5a9b      	ldrh	r3, [r3, r2]
 8001818:	b29a      	uxth	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	49a8      	ldr	r1, [pc, #672]	; (8001ac0 <HAL_PCD_IRQHandler+0x2f4>)
 8001820:	400a      	ands	r2, r1
 8001822:	b291      	uxth	r1, r2
 8001824:	2244      	movs	r2, #68	; 0x44
 8001826:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0018      	movs	r0, r3
 800182c:	f006 f9a0 	bl	8007b70 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2100      	movs	r1, #0
 8001834:	0018      	movs	r0, r3
 8001836:	f000 f951 	bl	8001adc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0018      	movs	r0, r3
 8001840:	f004 fa4c 	bl	8005cdc <USB_ReadInterrupts>
 8001844:	0002      	movs	r2, r0
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	01db      	lsls	r3, r3, #7
 800184a:	401a      	ands	r2, r3
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	01db      	lsls	r3, r3, #7
 8001850:	429a      	cmp	r2, r3
 8001852:	d10b      	bne.n	800186c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2244      	movs	r2, #68	; 0x44
 800185a:	5a9b      	ldrh	r3, [r3, r2]
 800185c:	b29a      	uxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4998      	ldr	r1, [pc, #608]	; (8001ac4 <HAL_PCD_IRQHandler+0x2f8>)
 8001864:	400a      	ands	r2, r1
 8001866:	b291      	uxth	r1, r2
 8001868:	2244      	movs	r2, #68	; 0x44
 800186a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0018      	movs	r0, r3
 8001872:	f004 fa33 	bl	8005cdc <USB_ReadInterrupts>
 8001876:	0002      	movs	r2, r0
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	019b      	lsls	r3, r3, #6
 800187c:	401a      	ands	r2, r3
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	019b      	lsls	r3, r3, #6
 8001882:	429a      	cmp	r2, r3
 8001884:	d10b      	bne.n	800189e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2244      	movs	r2, #68	; 0x44
 800188c:	5a9b      	ldrh	r3, [r3, r2]
 800188e:	b29a      	uxth	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	498c      	ldr	r1, [pc, #560]	; (8001ac8 <HAL_PCD_IRQHandler+0x2fc>)
 8001896:	400a      	ands	r2, r1
 8001898:	b291      	uxth	r1, r2
 800189a:	2244      	movs	r2, #68	; 0x44
 800189c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0018      	movs	r0, r3
 80018a4:	f004 fa1a 	bl	8005cdc <USB_ReadInterrupts>
 80018a8:	0002      	movs	r2, r0
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	015b      	lsls	r3, r3, #5
 80018ae:	401a      	ands	r2, r3
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	015b      	lsls	r3, r3, #5
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d137      	bne.n	8001928 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2240      	movs	r2, #64	; 0x40
 80018be:	5a9b      	ldrh	r3, [r3, r2]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2104      	movs	r1, #4
 80018c8:	438a      	bics	r2, r1
 80018ca:	b291      	uxth	r1, r2
 80018cc:	2240      	movs	r2, #64	; 0x40
 80018ce:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2240      	movs	r2, #64	; 0x40
 80018d6:	5a9b      	ldrh	r3, [r3, r2]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2108      	movs	r1, #8
 80018e0:	438a      	bics	r2, r1
 80018e2:	b291      	uxth	r1, r2
 80018e4:	2240      	movs	r2, #64	; 0x40
 80018e6:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	2398      	movs	r3, #152	; 0x98
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	5cd3      	ldrb	r3, [r2, r3]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d109      	bne.n	8001908 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	2398      	movs	r3, #152	; 0x98
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	2100      	movs	r1, #0
 80018fc:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2100      	movs	r1, #0
 8001902:	0018      	movs	r0, r3
 8001904:	f000 fe85 	bl	8002612 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	0018      	movs	r0, r3
 800190c:	f006 f970 	bl	8007bf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2244      	movs	r2, #68	; 0x44
 8001916:	5a9b      	ldrh	r3, [r3, r2]
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	496b      	ldr	r1, [pc, #428]	; (8001acc <HAL_PCD_IRQHandler+0x300>)
 8001920:	400a      	ands	r2, r1
 8001922:	b291      	uxth	r1, r2
 8001924:	2244      	movs	r2, #68	; 0x44
 8001926:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0018      	movs	r0, r3
 800192e:	f004 f9d5 	bl	8005cdc <USB_ReadInterrupts>
 8001932:	0002      	movs	r2, r0
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	401a      	ands	r2, r3
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	429a      	cmp	r2, r3
 8001940:	d134      	bne.n	80019ac <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	5a9b      	ldrh	r3, [r3, r2]
 800194a:	b29a      	uxth	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2108      	movs	r1, #8
 8001952:	430a      	orrs	r2, r1
 8001954:	b291      	uxth	r1, r2
 8001956:	2240      	movs	r2, #64	; 0x40
 8001958:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2244      	movs	r2, #68	; 0x44
 8001960:	5a9b      	ldrh	r3, [r3, r2]
 8001962:	b29a      	uxth	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4959      	ldr	r1, [pc, #356]	; (8001ad0 <HAL_PCD_IRQHandler+0x304>)
 800196a:	400a      	ands	r2, r1
 800196c:	b291      	uxth	r1, r2
 800196e:	2244      	movs	r2, #68	; 0x44
 8001970:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2240      	movs	r2, #64	; 0x40
 8001978:	5a9b      	ldrh	r3, [r3, r2]
 800197a:	b29a      	uxth	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2104      	movs	r1, #4
 8001982:	430a      	orrs	r2, r1
 8001984:	b291      	uxth	r1, r2
 8001986:	2240      	movs	r2, #64	; 0x40
 8001988:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	0018      	movs	r0, r3
 8001990:	f004 f9a4 	bl	8005cdc <USB_ReadInterrupts>
 8001994:	0002      	movs	r2, r0
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	015b      	lsls	r3, r3, #5
 800199a:	401a      	ands	r2, r3
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	015b      	lsls	r3, r3, #5
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d003      	beq.n	80019ac <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f006 f906 	bl	8007bb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0018      	movs	r0, r3
 80019b2:	f004 f993 	bl	8005cdc <USB_ReadInterrupts>
 80019b6:	0002      	movs	r2, r0
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b80      	cmp	r3, #128	; 0x80
 80019be:	d145      	bne.n	8001a4c <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2244      	movs	r2, #68	; 0x44
 80019c6:	5a9b      	ldrh	r3, [r3, r2]
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	438a      	bics	r2, r1
 80019d2:	b291      	uxth	r1, r2
 80019d4:	2244      	movs	r2, #68	; 0x44
 80019d6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	2398      	movs	r3, #152	; 0x98
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	5cd3      	ldrb	r3, [r2, r3]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d12f      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2240      	movs	r2, #64	; 0x40
 80019ea:	5a9b      	ldrh	r3, [r3, r2]
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2104      	movs	r1, #4
 80019f4:	430a      	orrs	r2, r1
 80019f6:	b291      	uxth	r1, r2
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2240      	movs	r2, #64	; 0x40
 8001a02:	5a9b      	ldrh	r3, [r3, r2]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2108      	movs	r1, #8
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	b291      	uxth	r1, r2
 8001a10:	2240      	movs	r2, #64	; 0x40
 8001a12:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	2398      	movs	r3, #152	; 0x98
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2254      	movs	r2, #84	; 0x54
 8001a24:	5a9b      	ldrh	r3, [r3, r2]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	223c      	movs	r2, #60	; 0x3c
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	2399      	movs	r3, #153	; 0x99
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 fde8 	bl	8002612 <HAL_PCDEx_LPM_Callback>
 8001a42:	e003      	b.n	8001a4c <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f006 f8b6 	bl	8007bb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f004 f943 	bl	8005cdc <USB_ReadInterrupts>
 8001a56:	0002      	movs	r2, r0
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	401a      	ands	r2, r3
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d10f      	bne.n	8001a86 <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2244      	movs	r2, #68	; 0x44
 8001a6c:	5a9b      	ldrh	r3, [r3, r2]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4917      	ldr	r1, [pc, #92]	; (8001ad4 <HAL_PCD_IRQHandler+0x308>)
 8001a76:	400a      	ands	r2, r1
 8001a78:	b291      	uxth	r1, r2
 8001a7a:	2244      	movs	r2, #68	; 0x44
 8001a7c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f006 f866 	bl	8007b52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f004 f926 	bl	8005cdc <USB_ReadInterrupts>
 8001a90:	0002      	movs	r2, r0
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	401a      	ands	r2, r3
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2244      	movs	r2, #68	; 0x44
 8001aa6:	5a9b      	ldrh	r3, [r3, r2]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	490a      	ldr	r1, [pc, #40]	; (8001ad8 <HAL_PCD_IRQHandler+0x30c>)
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	b291      	uxth	r1, r2
 8001ab4:	2244      	movs	r2, #68	; 0x44
 8001ab6:	5299      	strh	r1, [r3, r2]
  }
}
 8001ab8:	46c0      	nop			; (mov r8, r8)
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b002      	add	sp, #8
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	fffffbff 	.word	0xfffffbff
 8001ac4:	ffffbfff 	.word	0xffffbfff
 8001ac8:	ffffdfff 	.word	0xffffdfff
 8001acc:	ffffefff 	.word	0xffffefff
 8001ad0:	fffff7ff 	.word	0xfffff7ff
 8001ad4:	fffffdff 	.word	0xfffffdff
 8001ad8:	fffffeff 	.word	0xfffffeff

08001adc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	000a      	movs	r2, r1
 8001ae6:	1cfb      	adds	r3, r7, #3
 8001ae8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	238a      	movs	r3, #138	; 0x8a
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	5cd3      	ldrb	r3, [r2, r3]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_PCD_SetAddress+0x1e>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e017      	b.n	8001b2a <HAL_PCD_SetAddress+0x4e>
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	238a      	movs	r3, #138	; 0x8a
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	2101      	movs	r1, #1
 8001b02:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	1cfa      	adds	r2, r7, #3
 8001b08:	2124      	movs	r1, #36	; 0x24
 8001b0a:	7812      	ldrb	r2, [r2, #0]
 8001b0c:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	1cfb      	adds	r3, r7, #3
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	0019      	movs	r1, r3
 8001b18:	0010      	movs	r0, r2
 8001b1a:	f004 f8b5 	bl	8005c88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	238a      	movs	r3, #138	; 0x8a
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	2100      	movs	r1, #0
 8001b26:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b002      	add	sp, #8
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001b32:	b590      	push	{r4, r7, lr}
 8001b34:	b085      	sub	sp, #20
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	000c      	movs	r4, r1
 8001b3c:	0010      	movs	r0, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	1cfb      	adds	r3, r7, #3
 8001b42:	1c22      	adds	r2, r4, #0
 8001b44:	701a      	strb	r2, [r3, #0]
 8001b46:	003b      	movs	r3, r7
 8001b48:	1c02      	adds	r2, r0, #0
 8001b4a:	801a      	strh	r2, [r3, #0]
 8001b4c:	1cbb      	adds	r3, r7, #2
 8001b4e:	1c0a      	adds	r2, r1, #0
 8001b50:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b52:	230b      	movs	r3, #11
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b5a:	1cfb      	adds	r3, r7, #3
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b25b      	sxtb	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	da0c      	bge.n	8001b7e <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b64:	1cfb      	adds	r3, r7, #3
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2207      	movs	r2, #7
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	015b      	lsls	r3, r3, #5
 8001b6e:	3328      	adds	r3, #40	; 0x28
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	18d3      	adds	r3, r2, r3
 8001b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	705a      	strb	r2, [r3, #1]
 8001b7c:	e00c      	b.n	8001b98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b7e:	1cfb      	adds	r3, r7, #3
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2207      	movs	r2, #7
 8001b84:	4013      	ands	r3, r2
 8001b86:	015b      	lsls	r3, r3, #5
 8001b88:	3329      	adds	r3, #41	; 0x29
 8001b8a:	33ff      	adds	r3, #255	; 0xff
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	18d3      	adds	r3, r2, r3
 8001b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b98:	1cfb      	adds	r3, r7, #3
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ba6:	003b      	movs	r3, r7
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1cba      	adds	r2, r7, #2
 8001bb2:	7812      	ldrb	r2, [r2, #0]
 8001bb4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d004      	beq.n	8001bc8 <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bc8:	1cbb      	adds	r3, r7, #2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d102      	bne.n	8001bd6 <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	238a      	movs	r3, #138	; 0x8a
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_PCD_EP_Open+0xb4>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e013      	b.n	8001c0e <HAL_PCD_EP_Open+0xdc>
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	238a      	movs	r3, #138	; 0x8a
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	2101      	movs	r1, #1
 8001bee:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f003 f861 	bl	8004cc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	238a      	movs	r3, #138	; 0x8a
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	2100      	movs	r1, #0
 8001c06:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001c08:	230b      	movs	r3, #11
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	781b      	ldrb	r3, [r3, #0]
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b005      	add	sp, #20
 8001c14:	bd90      	pop	{r4, r7, pc}

08001c16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	000a      	movs	r2, r1
 8001c20:	1cfb      	adds	r3, r7, #3
 8001c22:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c24:	1cfb      	adds	r3, r7, #3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	da0c      	bge.n	8001c48 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2e:	1cfb      	adds	r3, r7, #3
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2207      	movs	r2, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	015b      	lsls	r3, r3, #5
 8001c38:	3328      	adds	r3, #40	; 0x28
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	18d3      	adds	r3, r2, r3
 8001c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2201      	movs	r2, #1
 8001c44:	705a      	strb	r2, [r3, #1]
 8001c46:	e00c      	b.n	8001c62 <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c48:	1cfb      	adds	r3, r7, #3
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	4013      	ands	r3, r2
 8001c50:	015b      	lsls	r3, r3, #5
 8001c52:	3329      	adds	r3, #41	; 0x29
 8001c54:	33ff      	adds	r3, #255	; 0xff
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	18d3      	adds	r3, r2, r3
 8001c5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c62:	1cfb      	adds	r3, r7, #3
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	2207      	movs	r2, #7
 8001c68:	4013      	ands	r3, r2
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	238a      	movs	r3, #138	; 0x8a
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_PCD_EP_Close+0x6a>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e011      	b.n	8001ca4 <HAL_PCD_EP_Close+0x8e>
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	238a      	movs	r3, #138	; 0x8a
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	2101      	movs	r1, #1
 8001c88:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	0011      	movs	r1, r2
 8001c92:	0018      	movs	r0, r3
 8001c94:	f003 fb04 	bl	80052a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	238a      	movs	r3, #138	; 0x8a
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	b004      	add	sp, #16
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	200b      	movs	r0, #11
 8001cba:	183b      	adds	r3, r7, r0
 8001cbc:	1c0a      	adds	r2, r1, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cc0:	0001      	movs	r1, r0
 8001cc2:	187b      	adds	r3, r7, r1
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	4013      	ands	r3, r2
 8001cca:	015b      	lsls	r3, r3, #5
 8001ccc:	3329      	adds	r3, #41	; 0x29
 8001cce:	33ff      	adds	r3, #255	; 0xff
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	18d3      	adds	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2200      	movs	r2, #0
 8001cec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2207      	movs	r2, #7
 8001d02:	4013      	ands	r3, r2
 8001d04:	d107      	bne.n	8001d16 <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	0011      	movs	r1, r2
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f003 fc3c 	bl	800558c <USB_EPStartXfer>
 8001d14:	e006      	b.n	8001d24 <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	0011      	movs	r1, r2
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f003 fc34 	bl	800558c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b006      	add	sp, #24
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	000a      	movs	r2, r1
 8001d38:	1cfb      	adds	r3, r7, #3
 8001d3a:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d3c:	1cfb      	adds	r3, r7, #3
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2207      	movs	r2, #7
 8001d42:	4013      	ands	r3, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	330a      	adds	r3, #10
 8001d48:	015b      	lsls	r3, r3, #5
 8001d4a:	18d3      	adds	r3, r2, r3
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	0018      	movs	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b002      	add	sp, #8
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	200b      	movs	r0, #11
 8001d66:	183b      	adds	r3, r7, r0
 8001d68:	1c0a      	adds	r2, r1, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d6c:	0001      	movs	r1, r0
 8001d6e:	187b      	adds	r3, r7, r1
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2207      	movs	r2, #7
 8001d74:	4013      	ands	r3, r2
 8001d76:	015b      	lsls	r3, r3, #5
 8001d78:	3328      	adds	r3, #40	; 0x28
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	18d3      	adds	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2201      	movs	r2, #1
 8001d96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	4013      	ands	r3, r2
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da6:	187b      	adds	r3, r7, r1
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2207      	movs	r2, #7
 8001dac:	4013      	ands	r3, r2
 8001dae:	d107      	bne.n	8001dc0 <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	0011      	movs	r1, r2
 8001db8:	0018      	movs	r0, r3
 8001dba:	f003 fbe7 	bl	800558c <USB_EPStartXfer>
 8001dbe:	e006      	b.n	8001dce <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	0011      	movs	r1, r2
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f003 fbdf 	bl	800558c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b006      	add	sp, #24
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	000a      	movs	r2, r1
 8001de2:	1cfb      	adds	r3, r7, #3
 8001de4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001de6:	1cfb      	adds	r3, r7, #3
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2207      	movs	r2, #7
 8001dec:	401a      	ands	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d901      	bls.n	8001dfa <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e050      	b.n	8001e9c <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dfa:	1cfb      	adds	r3, r7, #3
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b25b      	sxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	da0c      	bge.n	8001e1e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e04:	1cfb      	adds	r3, r7, #3
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2207      	movs	r2, #7
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	015b      	lsls	r3, r3, #5
 8001e0e:	3328      	adds	r3, #40	; 0x28
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	18d3      	adds	r3, r2, r3
 8001e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	705a      	strb	r2, [r3, #1]
 8001e1c:	e00a      	b.n	8001e34 <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e1e:	1cfb      	adds	r3, r7, #3
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	015b      	lsls	r3, r3, #5
 8001e24:	3329      	adds	r3, #41	; 0x29
 8001e26:	33ff      	adds	r3, #255	; 0xff
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	18d3      	adds	r3, r2, r3
 8001e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e3a:	1cfb      	adds	r3, r7, #3
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2207      	movs	r2, #7
 8001e40:	4013      	ands	r3, r2
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	238a      	movs	r3, #138	; 0x8a
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	5cd3      	ldrb	r3, [r2, r3]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_PCD_EP_SetStall+0x80>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e021      	b.n	8001e9c <HAL_PCD_EP_SetStall+0xc4>
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	238a      	movs	r3, #138	; 0x8a
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	2101      	movs	r1, #1
 8001e60:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	0011      	movs	r1, r2
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f003 fe3e 	bl	8005aec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e70:	1cfb      	adds	r3, r7, #3
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2207      	movs	r2, #7
 8001e76:	4013      	ands	r3, r2
 8001e78:	d10a      	bne.n	8001e90 <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	218c      	movs	r1, #140	; 0x8c
 8001e82:	0089      	lsls	r1, r1, #2
 8001e84:	468c      	mov	ip, r1
 8001e86:	4463      	add	r3, ip
 8001e88:	0019      	movs	r1, r3
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	f003 ff34 	bl	8005cf8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	238a      	movs	r3, #138	; 0x8a
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	2100      	movs	r1, #0
 8001e98:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b004      	add	sp, #16
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	000a      	movs	r2, r1
 8001eae:	1cfb      	adds	r3, r7, #3
 8001eb0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001eb2:	1cfb      	adds	r3, r7, #3
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	401a      	ands	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d901      	bls.n	8001ec6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e042      	b.n	8001f4c <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec6:	1cfb      	adds	r3, r7, #3
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	b25b      	sxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	da0c      	bge.n	8001eea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed0:	1cfb      	adds	r3, r7, #3
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2207      	movs	r2, #7
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	015b      	lsls	r3, r3, #5
 8001eda:	3328      	adds	r3, #40	; 0x28
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	18d3      	adds	r3, r2, r3
 8001ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	705a      	strb	r2, [r3, #1]
 8001ee8:	e00c      	b.n	8001f04 <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eea:	1cfb      	adds	r3, r7, #3
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2207      	movs	r2, #7
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	015b      	lsls	r3, r3, #5
 8001ef4:	3329      	adds	r3, #41	; 0x29
 8001ef6:	33ff      	adds	r3, #255	; 0xff
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	18d3      	adds	r3, r2, r3
 8001efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0a:	1cfb      	adds	r3, r7, #3
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2207      	movs	r2, #7
 8001f10:	4013      	ands	r3, r2
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	238a      	movs	r3, #138	; 0x8a
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_PCD_EP_ClrStall+0x84>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e011      	b.n	8001f4c <HAL_PCD_EP_ClrStall+0xa8>
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	238a      	movs	r3, #138	; 0x8a
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	2101      	movs	r1, #1
 8001f30:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	0011      	movs	r1, r2
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f003 fe18 	bl	8005b70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	238a      	movs	r3, #138	; 0x8a
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	2100      	movs	r1, #0
 8001f48:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b004      	add	sp, #16
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b089      	sub	sp, #36	; 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f5c:	e2a7      	b.n	80024ae <PCD_EP_ISR_Handler+0x55a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2016      	movs	r0, #22
 8001f64:	183b      	adds	r3, r7, r0
 8001f66:	2144      	movs	r1, #68	; 0x44
 8001f68:	5a52      	ldrh	r2, [r2, r1]
 8001f6a:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f6c:	183b      	adds	r3, r7, r0
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	2015      	movs	r0, #21
 8001f74:	183b      	adds	r3, r7, r0
 8001f76:	210f      	movs	r1, #15
 8001f78:	400a      	ands	r2, r1
 8001f7a:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001f7c:	183b      	adds	r3, r7, r0
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d000      	beq.n	8001f86 <PCD_EP_ISR_Handler+0x32>
 8001f84:	e135      	b.n	80021f2 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f86:	2316      	movs	r3, #22
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	2210      	movs	r2, #16
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d14e      	bne.n	8002030 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	4ade      	ldr	r2, [pc, #888]	; (8002314 <PCD_EP_ISR_Handler+0x3c0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	b29c      	uxth	r4, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4adc      	ldr	r2, [pc, #880]	; (8002318 <PCD_EP_ISR_Handler+0x3c4>)
 8001fa6:	4322      	orrs	r2, r4
 8001fa8:	b292      	uxth	r2, r2
 8001faa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3328      	adds	r3, #40	; 0x28
 8001fb0:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2250      	movs	r2, #80	; 0x50
 8001fb8:	5a9b      	ldrh	r3, [r3, r2]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	001a      	movs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	18d2      	adds	r2, r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	18d3      	adds	r3, r2, r3
 8001fcc:	4ad3      	ldr	r2, [pc, #844]	; (800231c <PCD_EP_ISR_Handler+0x3c8>)
 8001fce:	4694      	mov	ip, r2
 8001fd0:	4463      	add	r3, ip
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	059b      	lsls	r3, r3, #22
 8001fd6:	0d9a      	lsrs	r2, r3, #22
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	695a      	ldr	r2, [r3, #20]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	18d2      	adds	r2, r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2100      	movs	r1, #0
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f005 fd94 	bl	8007b1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2224      	movs	r2, #36	; 0x24
 8001ff8:	5c9b      	ldrb	r3, [r3, r2]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d100      	bne.n	8002002 <PCD_EP_ISR_Handler+0xae>
 8002000:	e255      	b.n	80024ae <PCD_EP_ISR_Handler+0x55a>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d000      	beq.n	800200c <PCD_EP_ISR_Handler+0xb8>
 800200a:	e250      	b.n	80024ae <PCD_EP_ISR_Handler+0x55a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2224      	movs	r2, #36	; 0x24
 8002010:	5c9b      	ldrb	r3, [r3, r2]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	4252      	negs	r2, r2
 8002018:	4313      	orrs	r3, r2
 800201a:	b2da      	uxtb	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b291      	uxth	r1, r2
 8002022:	224c      	movs	r2, #76	; 0x4c
 8002024:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2224      	movs	r2, #36	; 0x24
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]
 800202e:	e23e      	b.n	80024ae <PCD_EP_ISR_Handler+0x55a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3329      	adds	r3, #41	; 0x29
 8002034:	33ff      	adds	r3, #255	; 0xff
 8002036:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2112      	movs	r1, #18
 800203e:	187b      	adds	r3, r7, r1
 8002040:	8812      	ldrh	r2, [r2, #0]
 8002042:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002044:	187b      	adds	r3, r7, r1
 8002046:	881a      	ldrh	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	4013      	ands	r3, r2
 800204e:	d033      	beq.n	80020b8 <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2250      	movs	r2, #80	; 0x50
 8002056:	5a9b      	ldrh	r3, [r3, r2]
 8002058:	b29b      	uxth	r3, r3
 800205a:	001a      	movs	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	18d2      	adds	r2, r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	18d3      	adds	r3, r2, r3
 800206a:	4aad      	ldr	r2, [pc, #692]	; (8002320 <PCD_EP_ISR_Handler+0x3cc>)
 800206c:	4694      	mov	ip, r2
 800206e:	4463      	add	r3, ip
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	059b      	lsls	r3, r3, #22
 8002074:	0d9a      	lsrs	r2, r3, #22
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	228c      	movs	r2, #140	; 0x8c
 8002082:	0092      	lsls	r2, r2, #2
 8002084:	1899      	adds	r1, r3, r2
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	88da      	ldrh	r2, [r3, #6]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	b29b      	uxth	r3, r3
 8002090:	f003 fe7f 	bl	8005d92 <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	4aa1      	ldr	r2, [pc, #644]	; (8002324 <PCD_EP_ISR_Handler+0x3d0>)
 800209e:	4013      	ands	r3, r2
 80020a0:	b29c      	uxth	r4, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	4322      	orrs	r2, r4
 80020aa:	b292      	uxth	r2, r2
 80020ac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f005 fd01 	bl	8007ab8 <HAL_PCD_SetupStageCallback>
 80020b6:	e1fa      	b.n	80024ae <PCD_EP_ISR_Handler+0x55a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020b8:	2312      	movs	r3, #18
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	2200      	movs	r2, #0
 80020be:	5e9b      	ldrsh	r3, [r3, r2]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db00      	blt.n	80020c6 <PCD_EP_ISR_Handler+0x172>
 80020c4:	e1f3      	b.n	80024ae <PCD_EP_ISR_Handler+0x55a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	4a95      	ldr	r2, [pc, #596]	; (8002324 <PCD_EP_ISR_Handler+0x3d0>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	b29c      	uxth	r4, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2280      	movs	r2, #128	; 0x80
 80020da:	4322      	orrs	r2, r4
 80020dc:	b292      	uxth	r2, r2
 80020de:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2250      	movs	r2, #80	; 0x50
 80020e6:	5a9b      	ldrh	r3, [r3, r2]
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	001a      	movs	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	18d2      	adds	r2, r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	18d3      	adds	r3, r2, r3
 80020fa:	4a89      	ldr	r2, [pc, #548]	; (8002320 <PCD_EP_ISR_Handler+0x3cc>)
 80020fc:	4694      	mov	ip, r2
 80020fe:	4463      	add	r3, ip
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	059b      	lsls	r3, r3, #22
 8002104:	0d9a      	lsrs	r2, r3, #22
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d011      	beq.n	8002136 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6959      	ldr	r1, [r3, #20]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	88da      	ldrh	r2, [r3, #6]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	b29b      	uxth	r3, r3
 8002124:	f003 fe35 	bl	8005d92 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	18d2      	adds	r2, r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2100      	movs	r1, #0
 800213a:	0018      	movs	r0, r3
 800213c:	f005 fcd1 	bl	8007ae2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	001c      	movs	r4, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2250      	movs	r2, #80	; 0x50
 800214c:	5a9b      	ldrh	r3, [r3, r2]
 800214e:	b29b      	uxth	r3, r3
 8002150:	18e4      	adds	r4, r4, r3
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <PCD_EP_ISR_Handler+0x3cc>)
 8002154:	18e3      	adds	r3, r4, r3
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10e      	bne.n	800217e <PCD_EP_ISR_Handler+0x22a>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	4a70      	ldr	r2, [pc, #448]	; (8002328 <PCD_EP_ISR_Handler+0x3d4>)
 8002166:	4013      	ands	r3, r2
 8002168:	b29a      	uxth	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	801a      	strh	r2, [r3, #0]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	4a69      	ldr	r2, [pc, #420]	; (8002318 <PCD_EP_ISR_Handler+0x3c4>)
 8002174:	4313      	orrs	r3, r2
 8002176:	b29a      	uxth	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	801a      	strh	r2, [r3, #0]
 800217c:	e023      	b.n	80021c6 <PCD_EP_ISR_Handler+0x272>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b3d      	cmp	r3, #61	; 0x3d
 8002184:	d812      	bhi.n	80021ac <PCD_EP_ISR_Handler+0x258>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2201      	movs	r2, #1
 8002194:	4013      	ands	r3, r2
 8002196:	d002      	beq.n	800219e <PCD_EP_ISR_Handler+0x24a>
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	3301      	adds	r3, #1
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	029b      	lsls	r3, r3, #10
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	801a      	strh	r2, [r3, #0]
 80021aa:	e00c      	b.n	80021c6 <PCD_EP_ISR_Handler+0x272>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	61bb      	str	r3, [r7, #24]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	029b      	lsls	r3, r3, #10
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	4a56      	ldr	r2, [pc, #344]	; (8002318 <PCD_EP_ISR_Handler+0x3c4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	4a57      	ldr	r2, [pc, #348]	; (800232c <PCD_EP_ISR_Handler+0x3d8>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	b29c      	uxth	r4, r3
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	015b      	lsls	r3, r3, #5
 80021d8:	4063      	eors	r3, r4
 80021da:	b29c      	uxth	r4, r3
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	019b      	lsls	r3, r3, #6
 80021e0:	4063      	eors	r3, r4
 80021e2:	b29c      	uxth	r4, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a51      	ldr	r2, [pc, #324]	; (8002330 <PCD_EP_ISR_Handler+0x3dc>)
 80021ea:	4322      	orrs	r2, r4
 80021ec:	b292      	uxth	r2, r2
 80021ee:	801a      	strh	r2, [r3, #0]
 80021f0:	e15d      	b.n	80024ae <PCD_EP_ISR_Handler+0x55a>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	001a      	movs	r2, r3
 80021f8:	2315      	movs	r3, #21
 80021fa:	18fb      	adds	r3, r7, r3
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	18d2      	adds	r2, r2, r3
 8002202:	2112      	movs	r1, #18
 8002204:	187b      	adds	r3, r7, r1
 8002206:	8812      	ldrh	r2, [r2, #0]
 8002208:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800220a:	187b      	adds	r3, r7, r1
 800220c:	2200      	movs	r2, #0
 800220e:	5e9b      	ldrsh	r3, [r3, r2]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db00      	blt.n	8002216 <PCD_EP_ISR_Handler+0x2c2>
 8002214:	e0f5      	b.n	8002402 <PCD_EP_ISR_Handler+0x4ae>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	001a      	movs	r2, r3
 800221c:	2115      	movs	r1, #21
 800221e:	187b      	adds	r3, r7, r1
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	18d3      	adds	r3, r2, r3
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b29b      	uxth	r3, r3
 800222a:	4a3e      	ldr	r2, [pc, #248]	; (8002324 <PCD_EP_ISR_Handler+0x3d0>)
 800222c:	4013      	ands	r3, r2
 800222e:	b29c      	uxth	r4, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	001a      	movs	r2, r3
 8002236:	187b      	adds	r3, r7, r1
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	18d3      	adds	r3, r2, r3
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	4322      	orrs	r2, r4
 8002242:	b292      	uxth	r2, r2
 8002244:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002246:	187b      	adds	r3, r7, r1
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	015b      	lsls	r3, r3, #5
 800224c:	3329      	adds	r3, #41	; 0x29
 800224e:	33ff      	adds	r3, #255	; 0xff
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	18d3      	adds	r3, r2, r3
 8002254:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	7b1b      	ldrb	r3, [r3, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d126      	bne.n	80022ac <PCD_EP_ISR_Handler+0x358>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2250      	movs	r2, #80	; 0x50
 8002264:	5a9b      	ldrh	r3, [r3, r2]
 8002266:	b29b      	uxth	r3, r3
 8002268:	001a      	movs	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	18d2      	adds	r2, r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	18d3      	adds	r3, r2, r3
 8002278:	4a29      	ldr	r2, [pc, #164]	; (8002320 <PCD_EP_ISR_Handler+0x3cc>)
 800227a:	4694      	mov	ip, r2
 800227c:	4463      	add	r3, ip
 800227e:	881a      	ldrh	r2, [r3, #0]
 8002280:	211e      	movs	r1, #30
 8002282:	187b      	adds	r3, r7, r1
 8002284:	0592      	lsls	r2, r2, #22
 8002286:	0d92      	lsrs	r2, r2, #22
 8002288:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 800228a:	187b      	adds	r3, r7, r1
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d100      	bne.n	8002294 <PCD_EP_ISR_Handler+0x340>
 8002292:	e08b      	b.n	80023ac <PCD_EP_ISR_Handler+0x458>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6959      	ldr	r1, [r3, #20]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	88da      	ldrh	r2, [r3, #6]
 80022a0:	231e      	movs	r3, #30
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	f003 fd74 	bl	8005d92 <USB_ReadPMA>
 80022aa:	e07f      	b.n	80023ac <PCD_EP_ISR_Handler+0x458>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	001a      	movs	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	18d3      	adds	r3, r2, r3
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	001a      	movs	r2, r3
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	01db      	lsls	r3, r3, #7
 80022c4:	4013      	ands	r3, r2
 80022c6:	d035      	beq.n	8002334 <PCD_EP_ISR_Handler+0x3e0>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2250      	movs	r2, #80	; 0x50
 80022ce:	5a9b      	ldrh	r3, [r3, r2]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	001a      	movs	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	18d2      	adds	r2, r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	18d3      	adds	r3, r2, r3
 80022e2:	4a0e      	ldr	r2, [pc, #56]	; (800231c <PCD_EP_ISR_Handler+0x3c8>)
 80022e4:	4694      	mov	ip, r2
 80022e6:	4463      	add	r3, ip
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	211e      	movs	r1, #30
 80022ec:	187b      	adds	r3, r7, r1
 80022ee:	0592      	lsls	r2, r2, #22
 80022f0:	0d92      	lsrs	r2, r2, #22
 80022f2:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	881b      	ldrh	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d040      	beq.n	800237e <PCD_EP_ISR_Handler+0x42a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6818      	ldr	r0, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6959      	ldr	r1, [r3, #20]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	891a      	ldrh	r2, [r3, #8]
 8002308:	231e      	movs	r3, #30
 800230a:	18fb      	adds	r3, r7, r3
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	f003 fd40 	bl	8005d92 <USB_ReadPMA>
 8002312:	e034      	b.n	800237e <PCD_EP_ISR_Handler+0x42a>
 8002314:	ffff8f0f 	.word	0xffff8f0f
 8002318:	ffff8000 	.word	0xffff8000
 800231c:	00000402 	.word	0x00000402
 8002320:	00000406 	.word	0x00000406
 8002324:	00000f8f 	.word	0x00000f8f
 8002328:	ffff83ff 	.word	0xffff83ff
 800232c:	ffffbf8f 	.word	0xffffbf8f
 8002330:	ffff8080 	.word	0xffff8080
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2250      	movs	r2, #80	; 0x50
 800233a:	5a9b      	ldrh	r3, [r3, r2]
 800233c:	b29b      	uxth	r3, r3
 800233e:	001a      	movs	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	18d2      	adds	r2, r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	18d3      	adds	r3, r2, r3
 800234e:	4a5f      	ldr	r2, [pc, #380]	; (80024cc <PCD_EP_ISR_Handler+0x578>)
 8002350:	4694      	mov	ip, r2
 8002352:	4463      	add	r3, ip
 8002354:	881a      	ldrh	r2, [r3, #0]
 8002356:	211e      	movs	r1, #30
 8002358:	187b      	adds	r3, r7, r1
 800235a:	0592      	lsls	r2, r2, #22
 800235c:	0d92      	lsrs	r2, r2, #22
 800235e:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8002360:	187b      	adds	r3, r7, r1
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <PCD_EP_ISR_Handler+0x42a>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6959      	ldr	r1, [r3, #20]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	895a      	ldrh	r2, [r3, #10]
 8002374:	231e      	movs	r3, #30
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	f003 fd0a 	bl	8005d92 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	001a      	movs	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	18d3      	adds	r3, r2, r3
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4a4f      	ldr	r2, [pc, #316]	; (80024d0 <PCD_EP_ISR_Handler+0x57c>)
 8002392:	4013      	ands	r3, r2
 8002394:	b29c      	uxth	r4, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	001a      	movs	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	18d3      	adds	r3, r2, r3
 80023a4:	4a4b      	ldr	r2, [pc, #300]	; (80024d4 <PCD_EP_ISR_Handler+0x580>)
 80023a6:	4322      	orrs	r2, r4
 80023a8:	b292      	uxth	r2, r2
 80023aa:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	211e      	movs	r1, #30
 80023b2:	187b      	adds	r3, r7, r1
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	18d2      	adds	r2, r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	18d2      	adds	r2, r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d006      	beq.n	80023e0 <PCD_EP_ISR_Handler+0x48c>
 80023d2:	231e      	movs	r3, #30
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	881a      	ldrh	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d207      	bcs.n	80023f0 <PCD_EP_ISR_Handler+0x49c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	781a      	ldrb	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	0011      	movs	r1, r2
 80023e8:	0018      	movs	r0, r3
 80023ea:	f005 fb7a 	bl	8007ae2 <HAL_PCD_DataOutStageCallback>
 80023ee:	e008      	b.n	8002402 <PCD_EP_ISR_Handler+0x4ae>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	7819      	ldrb	r1, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	695a      	ldr	r2, [r3, #20]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff fc55 	bl	8001cac <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002402:	2312      	movs	r3, #18
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	2280      	movs	r2, #128	; 0x80
 800240a:	4013      	ands	r3, r2
 800240c:	d04f      	beq.n	80024ae <PCD_EP_ISR_Handler+0x55a>
      {
        ep = &hpcd->IN_ep[epindex];
 800240e:	2115      	movs	r1, #21
 8002410:	187b      	adds	r3, r7, r1
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	015b      	lsls	r3, r3, #5
 8002416:	3328      	adds	r3, #40	; 0x28
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	18d3      	adds	r3, r2, r3
 800241c:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	001a      	movs	r2, r3
 8002424:	187b      	adds	r3, r7, r1
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	18d3      	adds	r3, r2, r3
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <PCD_EP_ISR_Handler+0x584>)
 8002432:	4013      	ands	r3, r2
 8002434:	b29c      	uxth	r4, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	001a      	movs	r2, r3
 800243c:	187b      	adds	r3, r7, r1
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	18d3      	adds	r3, r2, r3
 8002444:	4a25      	ldr	r2, [pc, #148]	; (80024dc <PCD_EP_ISR_Handler+0x588>)
 8002446:	4322      	orrs	r2, r4
 8002448:	b292      	uxth	r2, r2
 800244a:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2250      	movs	r2, #80	; 0x50
 8002452:	5a9b      	ldrh	r3, [r3, r2]
 8002454:	b29b      	uxth	r3, r3
 8002456:	001a      	movs	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	18d2      	adds	r2, r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	18d3      	adds	r3, r2, r3
 8002466:	4a1e      	ldr	r2, [pc, #120]	; (80024e0 <PCD_EP_ISR_Handler+0x58c>)
 8002468:	4694      	mov	ip, r2
 800246a:	4463      	add	r3, ip
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	059b      	lsls	r3, r3, #22
 8002470:	0d9a      	lsrs	r2, r3, #22
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	18d2      	adds	r2, r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d107      	bne.n	800249c <PCD_EP_ISR_Handler+0x548>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	781a      	ldrb	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
 8002496:	f005 fb41 	bl	8007b1c <HAL_PCD_DataInStageCallback>
 800249a:	e008      	b.n	80024ae <PCD_EP_ISR_Handler+0x55a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	7819      	ldrb	r1, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	695a      	ldr	r2, [r3, #20]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff fc55 	bl	8001d58 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2244      	movs	r2, #68	; 0x44
 80024b4:	5a9b      	ldrh	r3, [r3, r2]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	b21b      	sxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	da00      	bge.n	80024c0 <PCD_EP_ISR_Handler+0x56c>
 80024be:	e54e      	b.n	8001f5e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b009      	add	sp, #36	; 0x24
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	00000406 	.word	0x00000406
 80024d0:	ffff8f8f 	.word	0xffff8f8f
 80024d4:	ffff80c0 	.word	0xffff80c0
 80024d8:	ffff8f0f 	.word	0xffff8f0f
 80024dc:	ffff8000 	.word	0xffff8000
 80024e0:	00000402 	.word	0x00000402

080024e4 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80024e4:	b590      	push	{r4, r7, lr}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	0008      	movs	r0, r1
 80024ee:	0011      	movs	r1, r2
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	240a      	movs	r4, #10
 80024f4:	193b      	adds	r3, r7, r4
 80024f6:	1c02      	adds	r2, r0, #0
 80024f8:	801a      	strh	r2, [r3, #0]
 80024fa:	2308      	movs	r3, #8
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	1c0a      	adds	r2, r1, #0
 8002500:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002502:	193b      	adds	r3, r7, r4
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	4013      	ands	r3, r2
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002510:	230a      	movs	r3, #10
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	2207      	movs	r2, #7
 8002518:	4013      	ands	r3, r2
 800251a:	015b      	lsls	r3, r3, #5
 800251c:	3328      	adds	r3, #40	; 0x28
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	18d3      	adds	r3, r2, r3
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	e008      	b.n	8002538 <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002526:	230a      	movs	r3, #10
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	881b      	ldrh	r3, [r3, #0]
 800252c:	015b      	lsls	r3, r3, #5
 800252e:	3329      	adds	r3, #41	; 0x29
 8002530:	33ff      	adds	r3, #255	; 0xff
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	18d3      	adds	r3, r2, r3
 8002536:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002538:	2308      	movs	r3, #8
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d107      	bne.n	8002552 <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	b29a      	uxth	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	80da      	strh	r2, [r3, #6]
 8002550:	e00b      	b.n	800256a <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2201      	movs	r2, #1
 8002556:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	b29a      	uxth	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	0c1b      	lsrs	r3, r3, #16
 8002564:	b29a      	uxth	r2, r3
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b007      	add	sp, #28
 8002572:	bd90      	pop	{r4, r7, pc}

08002574 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	239b      	movs	r3, #155	; 0x9b
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	2101      	movs	r1, #1
 800258a:	50d1      	str	r1, [r2, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2258      	movs	r2, #88	; 0x58
 8002590:	5a9b      	ldrh	r3, [r3, r2]
 8002592:	b29b      	uxth	r3, r3
 8002594:	2201      	movs	r2, #1
 8002596:	4313      	orrs	r3, r2
 8002598:	b299      	uxth	r1, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2258      	movs	r2, #88	; 0x58
 800259e:	5299      	strh	r1, [r3, r2]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2258      	movs	r2, #88	; 0x58
 80025a4:	5a9b      	ldrh	r3, [r3, r2]
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2202      	movs	r2, #2
 80025aa:	4313      	orrs	r3, r2
 80025ac:	b299      	uxth	r1, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2258      	movs	r2, #88	; 0x58
 80025b2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b004      	add	sp, #16
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	239a      	movs	r3, #154	; 0x9a
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	2101      	movs	r1, #1
 80025d4:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	2398      	movs	r3, #152	; 0x98
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	2100      	movs	r1, #0
 80025de:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2254      	movs	r2, #84	; 0x54
 80025e4:	5a9b      	ldrh	r3, [r3, r2]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2201      	movs	r2, #1
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b299      	uxth	r1, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2254      	movs	r2, #84	; 0x54
 80025f2:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2254      	movs	r2, #84	; 0x54
 80025f8:	5a9b      	ldrh	r3, [r3, r2]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2202      	movs	r2, #2
 80025fe:	4313      	orrs	r3, r2
 8002600:	b299      	uxth	r1, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2254      	movs	r2, #84	; 0x54
 8002606:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	0018      	movs	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	b004      	add	sp, #16
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b082      	sub	sp, #8
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	000a      	movs	r2, r1
 800261c:	1cfb      	adds	r3, r7, #3
 800261e:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002628:	b5b0      	push	{r4, r5, r7, lr}
 800262a:	b08a      	sub	sp, #40	; 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d102      	bne.n	800263c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f000 fbab 	bl	8002d92 <HAL_RCC_OscConfig+0x76a>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800263c:	4bce      	ldr	r3, [pc, #824]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	220c      	movs	r2, #12
 8002642:	4013      	ands	r3, r2
 8002644:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002646:	4bcc      	ldr	r3, [pc, #816]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	025b      	lsls	r3, r3, #9
 800264e:	4013      	ands	r3, r2
 8002650:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	4013      	ands	r3, r2
 800265a:	d100      	bne.n	800265e <HAL_RCC_OscConfig+0x36>
 800265c:	e07e      	b.n	800275c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d007      	beq.n	8002674 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d112      	bne.n	8002690 <HAL_RCC_OscConfig+0x68>
 800266a:	69fa      	ldr	r2, [r7, #28]
 800266c:	2380      	movs	r3, #128	; 0x80
 800266e:	025b      	lsls	r3, r3, #9
 8002670:	429a      	cmp	r2, r3
 8002672:	d10d      	bne.n	8002690 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	4bc0      	ldr	r3, [pc, #768]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	4013      	ands	r3, r2
 800267e:	d100      	bne.n	8002682 <HAL_RCC_OscConfig+0x5a>
 8002680:	e06b      	b.n	800275a <HAL_RCC_OscConfig+0x132>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d167      	bne.n	800275a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f000 fb81 	bl	8002d92 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	2380      	movs	r3, #128	; 0x80
 8002696:	025b      	lsls	r3, r3, #9
 8002698:	429a      	cmp	r2, r3
 800269a:	d107      	bne.n	80026ac <HAL_RCC_OscConfig+0x84>
 800269c:	4bb6      	ldr	r3, [pc, #728]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4bb5      	ldr	r3, [pc, #724]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80026a2:	2180      	movs	r1, #128	; 0x80
 80026a4:	0249      	lsls	r1, r1, #9
 80026a6:	430a      	orrs	r2, r1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e027      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	23a0      	movs	r3, #160	; 0xa0
 80026b2:	02db      	lsls	r3, r3, #11
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d10e      	bne.n	80026d6 <HAL_RCC_OscConfig+0xae>
 80026b8:	4baf      	ldr	r3, [pc, #700]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4bae      	ldr	r3, [pc, #696]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80026be:	2180      	movs	r1, #128	; 0x80
 80026c0:	02c9      	lsls	r1, r1, #11
 80026c2:	430a      	orrs	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	4bac      	ldr	r3, [pc, #688]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4bab      	ldr	r3, [pc, #684]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	0249      	lsls	r1, r1, #9
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	e012      	b.n	80026fc <HAL_RCC_OscConfig+0xd4>
 80026d6:	4ba8      	ldr	r3, [pc, #672]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4ba7      	ldr	r3, [pc, #668]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80026dc:	49a7      	ldr	r1, [pc, #668]	; (800297c <HAL_RCC_OscConfig+0x354>)
 80026de:	400a      	ands	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	4ba5      	ldr	r3, [pc, #660]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	025b      	lsls	r3, r3, #9
 80026ea:	4013      	ands	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4ba1      	ldr	r3, [pc, #644]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4ba0      	ldr	r3, [pc, #640]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80026f6:	49a2      	ldr	r1, [pc, #648]	; (8002980 <HAL_RCC_OscConfig+0x358>)
 80026f8:	400a      	ands	r2, r1
 80026fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d015      	beq.n	8002730 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002704:	f7fe fc84 	bl	8001010 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800270c:	e009      	b.n	8002722 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800270e:	f7fe fc7f 	bl	8001010 <HAL_GetTick>
 8002712:	0002      	movs	r2, r0
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b64      	cmp	r3, #100	; 0x64
 800271a:	d902      	bls.n	8002722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	f000 fb38 	bl	8002d92 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002722:	4b95      	ldr	r3, [pc, #596]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	029b      	lsls	r3, r3, #10
 800272a:	4013      	ands	r3, r2
 800272c:	d0ef      	beq.n	800270e <HAL_RCC_OscConfig+0xe6>
 800272e:	e015      	b.n	800275c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fc6e 	bl	8001010 <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273a:	f7fe fc69 	bl	8001010 <HAL_GetTick>
 800273e:	0002      	movs	r2, r0
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b64      	cmp	r3, #100	; 0x64
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e322      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800274c:	4b8a      	ldr	r3, [pc, #552]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	2380      	movs	r3, #128	; 0x80
 8002752:	029b      	lsls	r3, r3, #10
 8002754:	4013      	ands	r3, r2
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x112>
 8002758:	e000      	b.n	800275c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2202      	movs	r2, #2
 8002762:	4013      	ands	r3, r2
 8002764:	d100      	bne.n	8002768 <HAL_RCC_OscConfig+0x140>
 8002766:	e08a      	b.n	800287e <HAL_RCC_OscConfig+0x256>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d005      	beq.n	8002780 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d13d      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1ce>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d13a      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002780:	4b7d      	ldr	r3, [pc, #500]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2204      	movs	r2, #4
 8002786:	4013      	ands	r3, r2
 8002788:	d004      	beq.n	8002794 <HAL_RCC_OscConfig+0x16c>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e2fe      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b78      	ldr	r3, [pc, #480]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a7a      	ldr	r2, [pc, #488]	; (8002984 <HAL_RCC_OscConfig+0x35c>)
 800279a:	4013      	ands	r3, r2
 800279c:	0019      	movs	r1, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	021a      	lsls	r2, r3, #8
 80027a4:	4b74      	ldr	r3, [pc, #464]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80027a6:	430a      	orrs	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027aa:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2209      	movs	r2, #9
 80027b0:	4393      	bics	r3, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	4b70      	ldr	r3, [pc, #448]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027bc:	f000 fc1e 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 80027c0:	0001      	movs	r1, r0
 80027c2:	4b6d      	ldr	r3, [pc, #436]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	220f      	movs	r2, #15
 80027ca:	4013      	ands	r3, r2
 80027cc:	4a6e      	ldr	r2, [pc, #440]	; (8002988 <HAL_RCC_OscConfig+0x360>)
 80027ce:	5cd3      	ldrb	r3, [r2, r3]
 80027d0:	000a      	movs	r2, r1
 80027d2:	40da      	lsrs	r2, r3
 80027d4:	4b6d      	ldr	r3, [pc, #436]	; (800298c <HAL_RCC_OscConfig+0x364>)
 80027d6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80027d8:	2513      	movs	r5, #19
 80027da:	197c      	adds	r4, r7, r5
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe fbe1 	bl	8000fa4 <HAL_InitTick>
 80027e2:	0003      	movs	r3, r0
 80027e4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80027e6:	197b      	adds	r3, r7, r5
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d047      	beq.n	800287e <HAL_RCC_OscConfig+0x256>
      {
        return status;
 80027ee:	2313      	movs	r3, #19
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	e2cd      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d027      	beq.n	800284c <HAL_RCC_OscConfig+0x224>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027fc:	4b5e      	ldr	r3, [pc, #376]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2209      	movs	r2, #9
 8002802:	4393      	bics	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe fbff 	bl	8001010 <HAL_GetTick>
 8002812:	0003      	movs	r3, r0
 8002814:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002818:	f7fe fbfa 	bl	8001010 <HAL_GetTick>
 800281c:	0002      	movs	r2, r0
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e2b3      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800282a:	4b53      	ldr	r3, [pc, #332]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2204      	movs	r2, #4
 8002830:	4013      	ands	r3, r2
 8002832:	d0f1      	beq.n	8002818 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002834:	4b50      	ldr	r3, [pc, #320]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_OscConfig+0x35c>)
 800283a:	4013      	ands	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	021a      	lsls	r2, r3, #8
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	e018      	b.n	800287e <HAL_RCC_OscConfig+0x256>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284c:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b49      	ldr	r3, [pc, #292]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002852:	2101      	movs	r1, #1
 8002854:	438a      	bics	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7fe fbda 	bl	8001010 <HAL_GetTick>
 800285c:	0003      	movs	r3, r0
 800285e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x24c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002862:	f7fe fbd5 	bl	8001010 <HAL_GetTick>
 8002866:	0002      	movs	r2, r0
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e28e      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002874:	4b40      	ldr	r3, [pc, #256]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2204      	movs	r2, #4
 800287a:	4013      	ands	r3, r2
 800287c:	d1f1      	bne.n	8002862 <HAL_RCC_OscConfig+0x23a>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2210      	movs	r2, #16
 8002884:	4013      	ands	r3, r2
 8002886:	d100      	bne.n	800288a <HAL_RCC_OscConfig+0x262>
 8002888:	e09e      	b.n	80029c8 <HAL_RCC_OscConfig+0x3a0>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d13f      	bne.n	8002910 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4013      	ands	r3, r2
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_OscConfig+0x280>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0x280>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e274      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a8:	4b33      	ldr	r3, [pc, #204]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a38      	ldr	r2, [pc, #224]	; (8002990 <HAL_RCC_OscConfig+0x368>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	0019      	movs	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b6:	4b30      	ldr	r3, [pc, #192]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80028b8:	430a      	orrs	r2, r1
 80028ba:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028bc:	4b2e      	ldr	r3, [pc, #184]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	0a19      	lsrs	r1, r3, #8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	061a      	lsls	r2, r3, #24
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	0b5b      	lsrs	r3, r3, #13
 80028d6:	3301      	adds	r3, #1
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	0212      	lsls	r2, r2, #8
 80028dc:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	210f      	movs	r1, #15
 80028e6:	400b      	ands	r3, r1
 80028e8:	4927      	ldr	r1, [pc, #156]	; (8002988 <HAL_RCC_OscConfig+0x360>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028ee:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_RCC_OscConfig+0x364>)
 80028f0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80028f2:	2513      	movs	r5, #19
 80028f4:	197c      	adds	r4, r7, r5
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe fb54 	bl	8000fa4 <HAL_InitTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002900:	197b      	adds	r3, r7, r5
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d05f      	beq.n	80029c8 <HAL_RCC_OscConfig+0x3a0>
        {
          return status;
 8002908:	2313      	movs	r3, #19
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	e240      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d03d      	beq.n	8002994 <HAL_RCC_OscConfig+0x36c>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b16      	ldr	r3, [pc, #88]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 800291e:	2180      	movs	r1, #128	; 0x80
 8002920:	0049      	lsls	r1, r1, #1
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7fe fb73 	bl	8001010 <HAL_GetTick>
 800292a:	0003      	movs	r3, r0
 800292c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002930:	f7fe fb6e 	bl	8001010 <HAL_GetTick>
 8002934:	0002      	movs	r2, r0
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e227      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002942:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4013      	ands	r3, r2
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <HAL_RCC_OscConfig+0x368>)
 8002954:	4013      	ands	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002962:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	0a19      	lsrs	r1, r3, #8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	061a      	lsls	r2, r3, #24
 8002970:	4b01      	ldr	r3, [pc, #4]	; (8002978 <HAL_RCC_OscConfig+0x350>)
 8002972:	430a      	orrs	r2, r1
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	e027      	b.n	80029c8 <HAL_RCC_OscConfig+0x3a0>
 8002978:	40021000 	.word	0x40021000
 800297c:	fffeffff 	.word	0xfffeffff
 8002980:	fffbffff 	.word	0xfffbffff
 8002984:	ffffe0ff 	.word	0xffffe0ff
 8002988:	080081cc 	.word	0x080081cc
 800298c:	20000000 	.word	0x20000000
 8002990:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002994:	4bbd      	ldr	r3, [pc, #756]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4bbc      	ldr	r3, [pc, #752]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 800299a:	49bd      	ldr	r1, [pc, #756]	; (8002c90 <HAL_RCC_OscConfig+0x668>)
 800299c:	400a      	ands	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a0:	f7fe fb36 	bl	8001010 <HAL_GetTick>
 80029a4:	0003      	movs	r3, r0
 80029a6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x394>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029aa:	f7fe fb31 	bl	8001010 <HAL_GetTick>
 80029ae:	0002      	movs	r2, r0
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x394>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1ea      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029bc:	4bb3      	ldr	r3, [pc, #716]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4013      	ands	r3, r2
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCC_OscConfig+0x382>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2208      	movs	r2, #8
 80029ce:	4013      	ands	r3, r2
 80029d0:	d036      	beq.n	8002a40 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d019      	beq.n	8002a0e <HAL_RCC_OscConfig+0x3e6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029da:	4bac      	ldr	r3, [pc, #688]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 80029dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029de:	4bab      	ldr	r3, [pc, #684]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 80029e0:	2101      	movs	r1, #1
 80029e2:	430a      	orrs	r2, r1
 80029e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e6:	f7fe fb13 	bl	8001010 <HAL_GetTick>
 80029ea:	0003      	movs	r3, r0
 80029ec:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x3da>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029f0:	f7fe fb0e 	bl	8001010 <HAL_GetTick>
 80029f4:	0002      	movs	r2, r0
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3da>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1c7      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a02:	4ba2      	ldr	r3, [pc, #648]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a06:	2202      	movs	r2, #2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d0f1      	beq.n	80029f0 <HAL_RCC_OscConfig+0x3c8>
 8002a0c:	e018      	b.n	8002a40 <HAL_RCC_OscConfig+0x418>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a0e:	4b9f      	ldr	r3, [pc, #636]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a12:	4b9e      	ldr	r3, [pc, #632]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002a14:	2101      	movs	r1, #1
 8002a16:	438a      	bics	r2, r1
 8002a18:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe faf9 	bl	8001010 <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x40e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a24:	f7fe faf4 	bl	8001010 <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1ad      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a36:	4b95      	ldr	r3, [pc, #596]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d1f1      	bne.n	8002a24 <HAL_RCC_OscConfig+0x3fc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2204      	movs	r2, #4
 8002a46:	4013      	ands	r3, r2
 8002a48:	d100      	bne.n	8002a4c <HAL_RCC_OscConfig+0x424>
 8002a4a:	e0af      	b.n	8002bac <HAL_RCC_OscConfig+0x584>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4c:	2327      	movs	r3, #39	; 0x27
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a54:	4b8d      	ldr	r3, [pc, #564]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	055b      	lsls	r3, r3, #21
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d10a      	bne.n	8002a76 <HAL_RCC_OscConfig+0x44e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a60:	4b8a      	ldr	r3, [pc, #552]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002a62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a64:	4b89      	ldr	r3, [pc, #548]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002a66:	2180      	movs	r1, #128	; 0x80
 8002a68:	0549      	lsls	r1, r1, #21
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a6e:	2327      	movs	r3, #39	; 0x27
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a76:	4b87      	ldr	r3, [pc, #540]	; (8002c94 <HAL_RCC_OscConfig+0x66c>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d11a      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x490>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a82:	4b84      	ldr	r3, [pc, #528]	; (8002c94 <HAL_RCC_OscConfig+0x66c>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4b83      	ldr	r3, [pc, #524]	; (8002c94 <HAL_RCC_OscConfig+0x66c>)
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	0049      	lsls	r1, r1, #1
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a90:	f7fe fabe 	bl	8001010 <HAL_GetTick>
 8002a94:	0003      	movs	r3, r0
 8002a96:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9a:	f7fe fab9 	bl	8001010 <HAL_GetTick>
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b64      	cmp	r3, #100	; 0x64
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e172      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b79      	ldr	r3, [pc, #484]	; (8002c94 <HAL_RCC_OscConfig+0x66c>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x472>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689a      	ldr	r2, [r3, #8]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4ac>
 8002ac4:	4b71      	ldr	r3, [pc, #452]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002ac6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ac8:	4b70      	ldr	r3, [pc, #448]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	0049      	lsls	r1, r1, #1
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ad2:	e031      	b.n	8002b38 <HAL_RCC_OscConfig+0x510>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_OscConfig+0x4ce>
 8002adc:	4b6b      	ldr	r3, [pc, #428]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae0:	4b6a      	ldr	r3, [pc, #424]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002ae2:	496b      	ldr	r1, [pc, #428]	; (8002c90 <HAL_RCC_OscConfig+0x668>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	651a      	str	r2, [r3, #80]	; 0x50
 8002ae8:	4b68      	ldr	r3, [pc, #416]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002aea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aec:	4b67      	ldr	r3, [pc, #412]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002aee:	496a      	ldr	r1, [pc, #424]	; (8002c98 <HAL_RCC_OscConfig+0x670>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	651a      	str	r2, [r3, #80]	; 0x50
 8002af4:	e020      	b.n	8002b38 <HAL_RCC_OscConfig+0x510>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	23a0      	movs	r3, #160	; 0xa0
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d10e      	bne.n	8002b20 <HAL_RCC_OscConfig+0x4f8>
 8002b02:	4b62      	ldr	r3, [pc, #392]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002b04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b06:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	00c9      	lsls	r1, r1, #3
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	651a      	str	r2, [r3, #80]	; 0x50
 8002b10:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002b12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b14:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	0049      	lsls	r1, r1, #1
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	651a      	str	r2, [r3, #80]	; 0x50
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0x510>
 8002b20:	4b5a      	ldr	r3, [pc, #360]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002b26:	495a      	ldr	r1, [pc, #360]	; (8002c90 <HAL_RCC_OscConfig+0x668>)
 8002b28:	400a      	ands	r2, r1
 8002b2a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b2c:	4b57      	ldr	r3, [pc, #348]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002b2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b30:	4b56      	ldr	r3, [pc, #344]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002b32:	4959      	ldr	r1, [pc, #356]	; (8002c98 <HAL_RCC_OscConfig+0x670>)
 8002b34:	400a      	ands	r2, r1
 8002b36:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCC_OscConfig+0x544>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b40:	f7fe fa66 	bl	8001010 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b48:	e009      	b.n	8002b5e <HAL_RCC_OscConfig+0x536>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fa61 	bl	8001010 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	4a51      	ldr	r2, [pc, #324]	; (8002c9c <HAL_RCC_OscConfig+0x674>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x536>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e119      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b5e:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002b60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4013      	ands	r3, r2
 8002b68:	d0ef      	beq.n	8002b4a <HAL_RCC_OscConfig+0x522>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x56e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fa50 	bl	8001010 <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b74:	e009      	b.n	8002b8a <HAL_RCC_OscConfig+0x562>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fe fa4b 	bl	8001010 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	4a46      	ldr	r2, [pc, #280]	; (8002c9c <HAL_RCC_OscConfig+0x674>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x562>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e103      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b8a:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002b8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4013      	ands	r3, r2
 8002b94:	d1ef      	bne.n	8002b76 <HAL_RCC_OscConfig+0x54e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b96:	2327      	movs	r3, #39	; 0x27
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d105      	bne.n	8002bac <HAL_RCC_OscConfig+0x584>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba0:	4b3a      	ldr	r3, [pc, #232]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba4:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002ba6:	493e      	ldr	r1, [pc, #248]	; (8002ca0 <HAL_RCC_OscConfig+0x678>)
 8002ba8:	400a      	ands	r2, r1
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	d049      	beq.n	8002c4a <HAL_RCC_OscConfig+0x622>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d026      	beq.n	8002c0c <HAL_RCC_OscConfig+0x5e4>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002bbe:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002bc0:	689a      	ldr	r2, [r3, #8]
 8002bc2:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002bc4:	2101      	movs	r1, #1
 8002bc6:	430a      	orrs	r2, r1
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bce:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd6:	4b33      	ldr	r3, [pc, #204]	; (8002ca4 <HAL_RCC_OscConfig+0x67c>)
 8002bd8:	6a1a      	ldr	r2, [r3, #32]
 8002bda:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <HAL_RCC_OscConfig+0x67c>)
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	0189      	lsls	r1, r1, #6
 8002be0:	430a      	orrs	r2, r1
 8002be2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fa14 	bl	8001010 <HAL_GetTick>
 8002be8:	0003      	movs	r3, r0
 8002bea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bee:	f7fe fa0f 	bl	8001010 <HAL_GetTick>
 8002bf2:	0002      	movs	r2, r0
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e0c8      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c00:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2202      	movs	r2, #2
 8002c06:	4013      	ands	r3, r2
 8002c08:	d0f1      	beq.n	8002bee <HAL_RCC_OscConfig+0x5c6>
 8002c0a:	e01e      	b.n	8002c4a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c0c:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	4b1e      	ldr	r3, [pc, #120]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002c12:	2101      	movs	r1, #1
 8002c14:	438a      	bics	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <HAL_RCC_OscConfig+0x67c>)
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	4b21      	ldr	r3, [pc, #132]	; (8002ca4 <HAL_RCC_OscConfig+0x67c>)
 8002c1e:	4922      	ldr	r1, [pc, #136]	; (8002ca8 <HAL_RCC_OscConfig+0x680>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe f9f4 	bl	8001010 <HAL_GetTick>
 8002c28:	0003      	movs	r3, r0
 8002c2a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c2e:	f7fe f9ef 	bl	8001010 <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0a8      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c40:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2202      	movs	r2, #2
 8002c46:	4013      	ands	r3, r2
 8002c48:	d1f1      	bne.n	8002c2e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d100      	bne.n	8002c54 <HAL_RCC_OscConfig+0x62c>
 8002c52:	e09d      	b.n	8002d90 <HAL_RCC_OscConfig+0x768>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d100      	bne.n	8002c5c <HAL_RCC_OscConfig+0x634>
 8002c5a:	e076      	b.n	8002d4a <HAL_RCC_OscConfig+0x722>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d157      	bne.n	8002d14 <HAL_RCC_OscConfig+0x6ec>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c64:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <HAL_RCC_OscConfig+0x664>)
 8002c6a:	4910      	ldr	r1, [pc, #64]	; (8002cac <HAL_RCC_OscConfig+0x684>)
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c70:	f7fe f9ce 	bl	8001010 <HAL_GetTick>
 8002c74:	0003      	movs	r3, r0
 8002c76:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c78:	e01a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x688>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c7a:	f7fe f9c9 	bl	8001010 <HAL_GetTick>
 8002c7e:	0002      	movs	r2, r0
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d913      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x688>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e082      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	fffffeff 	.word	0xfffffeff
 8002c94:	40007000 	.word	0x40007000
 8002c98:	fffffbff 	.word	0xfffffbff
 8002c9c:	00001388 	.word	0x00001388
 8002ca0:	efffffff 	.word	0xefffffff
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	ffffdfff 	.word	0xffffdfff
 8002cac:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cb0:	4b3a      	ldr	r3, [pc, #232]	; (8002d9c <HAL_RCC_OscConfig+0x774>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	049b      	lsls	r3, r3, #18
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d1de      	bne.n	8002c7a <HAL_RCC_OscConfig+0x652>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cbc:	4b37      	ldr	r3, [pc, #220]	; (8002d9c <HAL_RCC_OscConfig+0x774>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	4a37      	ldr	r2, [pc, #220]	; (8002da0 <HAL_RCC_OscConfig+0x778>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	4b31      	ldr	r3, [pc, #196]	; (8002d9c <HAL_RCC_OscConfig+0x774>)
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b2f      	ldr	r3, [pc, #188]	; (8002d9c <HAL_RCC_OscConfig+0x774>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b2e      	ldr	r3, [pc, #184]	; (8002d9c <HAL_RCC_OscConfig+0x774>)
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	0449      	lsls	r1, r1, #17
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fe f991 	bl	8001010 <HAL_GetTick>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe f98c 	bl	8001010 <HAL_GetTick>
 8002cf8:	0002      	movs	r2, r0
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x6de>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e045      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d06:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_RCC_OscConfig+0x774>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	049b      	lsls	r3, r3, #18
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d0f0      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x6cc>
 8002d12:	e03d      	b.n	8002d90 <HAL_RCC_OscConfig+0x768>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d14:	4b21      	ldr	r3, [pc, #132]	; (8002d9c <HAL_RCC_OscConfig+0x774>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b20      	ldr	r3, [pc, #128]	; (8002d9c <HAL_RCC_OscConfig+0x774>)
 8002d1a:	4922      	ldr	r1, [pc, #136]	; (8002da4 <HAL_RCC_OscConfig+0x77c>)
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7fe f976 	bl	8001010 <HAL_GetTick>
 8002d24:	0003      	movs	r3, r0
 8002d26:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x714>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2a:	f7fe f971 	bl	8001010 <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x714>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e02a      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <HAL_RCC_OscConfig+0x774>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	049b      	lsls	r3, r3, #18
 8002d44:	4013      	ands	r3, r2
 8002d46:	d1f0      	bne.n	8002d2a <HAL_RCC_OscConfig+0x702>
 8002d48:	e022      	b.n	8002d90 <HAL_RCC_OscConfig+0x768>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x72e>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e01d      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <HAL_RCC_OscConfig+0x774>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5c:	69fa      	ldr	r2, [r7, #28]
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	025b      	lsls	r3, r3, #9
 8002d62:	401a      	ands	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d10f      	bne.n	8002d8c <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	23f0      	movs	r3, #240	; 0xf0
 8002d70:	039b      	lsls	r3, r3, #14
 8002d72:	401a      	ands	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d107      	bne.n	8002d8c <HAL_RCC_OscConfig+0x764>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	23c0      	movs	r3, #192	; 0xc0
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	401a      	ands	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_OscConfig+0x768>
        {
          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x76a>
        }
      }
    }
  }

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b00a      	add	sp, #40	; 0x28
 8002d98:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	ff02ffff 	.word	0xff02ffff
 8002da4:	feffffff 	.word	0xfeffffff

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b5b0      	push	{r4, r5, r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e10d      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <HAL_RCC_ClockConfig+0x238>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d911      	bls.n	8002dee <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b85      	ldr	r3, [pc, #532]	; (8002fe0 <HAL_RCC_ClockConfig+0x238>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <HAL_RCC_ClockConfig+0x238>)
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ddc:	4b80      	ldr	r3, [pc, #512]	; (8002fe0 <HAL_RCC_ClockConfig+0x238>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	4013      	ands	r3, r2
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0f4      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2202      	movs	r2, #2
 8002df4:	4013      	ands	r3, r2
 8002df6:	d009      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df8:	4b7a      	ldr	r3, [pc, #488]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	22f0      	movs	r2, #240	; 0xf0
 8002dfe:	4393      	bics	r3, r2
 8002e00:	0019      	movs	r1, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	4b77      	ldr	r3, [pc, #476]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2201      	movs	r2, #1
 8002e12:	4013      	ands	r3, r2
 8002e14:	d100      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x70>
 8002e16:	e089      	b.n	8002f2c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d107      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e20:	4b70      	ldr	r3, [pc, #448]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	029b      	lsls	r3, r3, #10
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d120      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0d3      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e38:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	049b      	lsls	r3, r3, #18
 8002e40:	4013      	ands	r3, r2
 8002e42:	d114      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0c7      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e50:	4b64      	ldr	r3, [pc, #400]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2204      	movs	r2, #4
 8002e56:	4013      	ands	r3, r2
 8002e58:	d109      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0bc      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e5e:	4b61      	ldr	r3, [pc, #388]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4013      	ands	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0b4      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e6e:	4b5d      	ldr	r3, [pc, #372]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	2203      	movs	r2, #3
 8002e74:	4393      	bics	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e82:	f7fe f8c5 	bl	8001010 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d111      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e92:	e009      	b.n	8002ea8 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e94:	f7fe f8bc 	bl	8001010 <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	4a52      	ldr	r2, [pc, #328]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e097      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ea8:	4b4e      	ldr	r3, [pc, #312]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	220c      	movs	r2, #12
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d1ef      	bne.n	8002e94 <HAL_RCC_ClockConfig+0xec>
 8002eb4:	e03a      	b.n	8002f2c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d111      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ebe:	e009      	b.n	8002ed4 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec0:	f7fe f8a6 	bl	8001010 <HAL_GetTick>
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	4a47      	ldr	r2, [pc, #284]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e081      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed4:	4b43      	ldr	r3, [pc, #268]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	220c      	movs	r2, #12
 8002eda:	4013      	ands	r3, r2
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d1ef      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x118>
 8002ee0:	e024      	b.n	8002f2c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d11b      	bne.n	8002f22 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eea:	e009      	b.n	8002f00 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eec:	f7fe f890 	bl	8001010 <HAL_GetTick>
 8002ef0:	0002      	movs	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	4a3c      	ldr	r2, [pc, #240]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e06b      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f00:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	220c      	movs	r2, #12
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d1ef      	bne.n	8002eec <HAL_RCC_ClockConfig+0x144>
 8002f0c:	e00e      	b.n	8002f2c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0e:	f7fe f87f 	bl	8001010 <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	4a33      	ldr	r2, [pc, #204]	; (8002fe8 <HAL_RCC_ClockConfig+0x240>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e05a      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f22:	4b30      	ldr	r3, [pc, #192]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	220c      	movs	r2, #12
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <HAL_RCC_ClockConfig+0x238>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2201      	movs	r2, #1
 8002f32:	4013      	ands	r3, r2
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d211      	bcs.n	8002f5e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_RCC_ClockConfig+0x238>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4393      	bics	r3, r2
 8002f42:	0019      	movs	r1, r3
 8002f44:	4b26      	ldr	r3, [pc, #152]	; (8002fe0 <HAL_RCC_ClockConfig+0x238>)
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4c:	4b24      	ldr	r3, [pc, #144]	; (8002fe0 <HAL_RCC_ClockConfig+0x238>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d001      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e03c      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2204      	movs	r2, #4
 8002f64:	4013      	ands	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f68:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a1f      	ldr	r2, [pc, #124]	; (8002fec <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	0019      	movs	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2208      	movs	r2, #8
 8002f82:	4013      	ands	r3, r2
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f86:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <HAL_RCC_ClockConfig+0x248>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	00da      	lsls	r2, r3, #3
 8002f96:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f9c:	f000 f82e 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fa0:	0001      	movs	r1, r0
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <HAL_RCC_ClockConfig+0x23c>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	220f      	movs	r2, #15
 8002faa:	4013      	ands	r3, r2
 8002fac:	4a11      	ldr	r2, [pc, #68]	; (8002ff4 <HAL_RCC_ClockConfig+0x24c>)
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	000a      	movs	r2, r1
 8002fb2:	40da      	lsrs	r2, r3
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_RCC_ClockConfig+0x250>)
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002fb8:	250b      	movs	r5, #11
 8002fba:	197c      	adds	r4, r7, r5
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fd fff1 	bl	8000fa4 <HAL_InitTick>
 8002fc2:	0003      	movs	r3, r0
 8002fc4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002fc6:	197b      	adds	r3, r7, r5
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8002fce:	230b      	movs	r3, #11
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	e000      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b004      	add	sp, #16
 8002fde:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe0:	40022000 	.word	0x40022000
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	00001388 	.word	0x00001388
 8002fec:	fffff8ff 	.word	0xfffff8ff
 8002ff0:	ffffc7ff 	.word	0xffffc7ff
 8002ff4:	080081cc 	.word	0x080081cc
 8002ff8:	20000000 	.word	0x20000000

08002ffc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003002:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	220c      	movs	r2, #12
 800300c:	4013      	ands	r3, r2
 800300e:	2b08      	cmp	r3, #8
 8003010:	d00e      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x34>
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d00f      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x3a>
 8003016:	2b04      	cmp	r3, #4
 8003018:	d157      	bne.n	80030ca <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800301a:	4b35      	ldr	r3, [pc, #212]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2210      	movs	r2, #16
 8003020:	4013      	ands	r3, r2
 8003022:	d002      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003024:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003026:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003028:	e05d      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800302a:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800302c:	613b      	str	r3, [r7, #16]
      break;
 800302e:	e05a      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003030:	4b32      	ldr	r3, [pc, #200]	; (80030fc <HAL_RCC_GetSysClockFreq+0x100>)
 8003032:	613b      	str	r3, [r7, #16]
      break;
 8003034:	e057      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0c9b      	lsrs	r3, r3, #18
 800303a:	220f      	movs	r2, #15
 800303c:	4013      	ands	r3, r2
 800303e:	4a30      	ldr	r2, [pc, #192]	; (8003100 <HAL_RCC_GetSysClockFreq+0x104>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	0d9b      	lsrs	r3, r3, #22
 8003048:	2203      	movs	r2, #3
 800304a:	4013      	ands	r3, r2
 800304c:	3301      	adds	r3, #1
 800304e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003050:	4b27      	ldr	r3, [pc, #156]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	025b      	lsls	r3, r3, #9
 8003058:	4013      	ands	r3, r2
 800305a:	d00f      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	000a      	movs	r2, r1
 8003060:	0152      	lsls	r2, r2, #5
 8003062:	1a52      	subs	r2, r2, r1
 8003064:	0193      	lsls	r3, r2, #6
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	185b      	adds	r3, r3, r1
 800306c:	025b      	lsls	r3, r3, #9
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	0018      	movs	r0, r3
 8003072:	f7fd f849 	bl	8000108 <__udivsi3>
 8003076:	0003      	movs	r3, r0
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	e023      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800307c:	4b1c      	ldr	r3, [pc, #112]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2210      	movs	r2, #16
 8003082:	4013      	ands	r3, r2
 8003084:	d00f      	beq.n	80030a6 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	000a      	movs	r2, r1
 800308a:	0152      	lsls	r2, r2, #5
 800308c:	1a52      	subs	r2, r2, r1
 800308e:	0193      	lsls	r3, r2, #6
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	185b      	adds	r3, r3, r1
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	0018      	movs	r0, r3
 800309c:	f7fd f834 	bl	8000108 <__udivsi3>
 80030a0:	0003      	movs	r3, r0
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	e00e      	b.n	80030c4 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	000a      	movs	r2, r1
 80030aa:	0152      	lsls	r2, r2, #5
 80030ac:	1a52      	subs	r2, r2, r1
 80030ae:	0193      	lsls	r3, r2, #6
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	185b      	adds	r3, r3, r1
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7fd f824 	bl	8000108 <__udivsi3>
 80030c0:	0003      	movs	r3, r0
 80030c2:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	613b      	str	r3, [r7, #16]
      break;
 80030c8:	e00d      	b.n	80030e6 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80030ca:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	0b5b      	lsrs	r3, r3, #13
 80030d0:	2207      	movs	r2, #7
 80030d2:	4013      	ands	r3, r2
 80030d4:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	3301      	adds	r3, #1
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	0212      	lsls	r2, r2, #8
 80030de:	409a      	lsls	r2, r3
 80030e0:	0013      	movs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
      break;
 80030e4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030e6:	693b      	ldr	r3, [r7, #16]
}
 80030e8:	0018      	movs	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b006      	add	sp, #24
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	003d0900 	.word	0x003d0900
 80030f8:	00f42400 	.word	0x00f42400
 80030fc:	007a1200 	.word	0x007a1200
 8003100:	080081e4 	.word	0x080081e4

08003104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003108:	4b02      	ldr	r3, [pc, #8]	; (8003114 <HAL_RCC_GetHCLKFreq+0x10>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	0018      	movs	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	46c0      	nop			; (mov r8, r8)
 8003114:	20000000 	.word	0x20000000

08003118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800311c:	f7ff fff2 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 8003120:	0001      	movs	r1, r0
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	0a1b      	lsrs	r3, r3, #8
 8003128:	2207      	movs	r2, #7
 800312a:	4013      	ands	r3, r2
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	40d9      	lsrs	r1, r3
 8003132:	000b      	movs	r3, r1
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	40021000 	.word	0x40021000
 8003140:	080081dc 	.word	0x080081dc

08003144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003148:	f7ff ffdc 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 800314c:	0001      	movs	r1, r0
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	0adb      	lsrs	r3, r3, #11
 8003154:	2207      	movs	r2, #7
 8003156:	4013      	ands	r3, r2
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <HAL_RCC_GetPCLK2Freq+0x28>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	40d9      	lsrs	r1, r3
 800315e:	000b      	movs	r3, r1
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	40021000 	.word	0x40021000
 800316c:	080081dc 	.word	0x080081dc

08003170 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2220      	movs	r2, #32
 800317e:	4013      	ands	r3, r2
 8003180:	d100      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x14>
 8003182:	e0c7      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003184:	2317      	movs	r3, #23
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318c:	4b91      	ldr	r3, [pc, #580]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800318e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	055b      	lsls	r3, r3, #21
 8003194:	4013      	ands	r3, r2
 8003196:	d10a      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003198:	4b8e      	ldr	r3, [pc, #568]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800319a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319c:	4b8d      	ldr	r3, [pc, #564]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800319e:	2180      	movs	r1, #128	; 0x80
 80031a0:	0549      	lsls	r1, r1, #21
 80031a2:	430a      	orrs	r2, r1
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80031a6:	2317      	movs	r3, #23
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b8a      	ldr	r3, [pc, #552]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4013      	ands	r3, r2
 80031b8:	d11a      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ba:	4b87      	ldr	r3, [pc, #540]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b86      	ldr	r3, [pc, #536]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031c0:	2180      	movs	r1, #128	; 0x80
 80031c2:	0049      	lsls	r1, r1, #1
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c8:	f7fd ff22 	bl	8001010 <HAL_GetTick>
 80031cc:	0003      	movs	r3, r0
 80031ce:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	e008      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d2:	f7fd ff1d 	bl	8001010 <HAL_GetTick>
 80031d6:	0002      	movs	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b64      	cmp	r3, #100	; 0x64
 80031de:	d901      	bls.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e0f2      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e4:	4b7c      	ldr	r3, [pc, #496]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4013      	ands	r3, r2
 80031ee:	d0f0      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80031f0:	4b78      	ldr	r3, [pc, #480]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	23c0      	movs	r3, #192	; 0xc0
 80031f6:	039b      	lsls	r3, r3, #14
 80031f8:	4013      	ands	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	23c0      	movs	r3, #192	; 0xc0
 8003202:	039b      	lsls	r3, r3, #14
 8003204:	4013      	ands	r3, r2
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	429a      	cmp	r2, r3
 800320a:	d013      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	23c0      	movs	r3, #192	; 0xc0
 8003212:	029b      	lsls	r3, r3, #10
 8003214:	401a      	ands	r2, r3
 8003216:	23c0      	movs	r3, #192	; 0xc0
 8003218:	029b      	lsls	r3, r3, #10
 800321a:	429a      	cmp	r2, r3
 800321c:	d10a      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800321e:	4b6d      	ldr	r3, [pc, #436]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	029b      	lsls	r3, r3, #10
 8003226:	401a      	ands	r2, r3
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	029b      	lsls	r3, r3, #10
 800322c:	429a      	cmp	r2, r3
 800322e:	d101      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0ca      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003234:	4b67      	ldr	r3, [pc, #412]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003236:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003238:	23c0      	movs	r3, #192	; 0xc0
 800323a:	029b      	lsls	r3, r3, #10
 800323c:	4013      	ands	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d03b      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	23c0      	movs	r3, #192	; 0xc0
 800324c:	029b      	lsls	r3, r3, #10
 800324e:	4013      	ands	r3, r2
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	429a      	cmp	r2, r3
 8003254:	d033      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2220      	movs	r2, #32
 800325c:	4013      	ands	r3, r2
 800325e:	d02e      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003260:	4b5c      	ldr	r3, [pc, #368]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003264:	4a5d      	ldr	r2, [pc, #372]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003266:	4013      	ands	r3, r2
 8003268:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800326a:	4b5a      	ldr	r3, [pc, #360]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800326c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800326e:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	0309      	lsls	r1, r1, #12
 8003274:	430a      	orrs	r2, r1
 8003276:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003278:	4b56      	ldr	r3, [pc, #344]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800327c:	4b55      	ldr	r3, [pc, #340]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327e:	4958      	ldr	r1, [pc, #352]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003280:	400a      	ands	r2, r1
 8003282:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003284:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	4013      	ands	r3, r2
 8003292:	d014      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fd febc 	bl	8001010 <HAL_GetTick>
 8003298:	0003      	movs	r3, r0
 800329a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800329c:	e009      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7fd feb7 	bl	8001010 <HAL_GetTick>
 80032a2:	0002      	movs	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	4a4e      	ldr	r2, [pc, #312]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e08b      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80032b2:	4b48      	ldr	r3, [pc, #288]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4013      	ands	r3, r2
 80032bc:	d0ef      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	23c0      	movs	r3, #192	; 0xc0
 80032c4:	029b      	lsls	r3, r3, #10
 80032c6:	401a      	ands	r2, r3
 80032c8:	23c0      	movs	r3, #192	; 0xc0
 80032ca:	029b      	lsls	r3, r3, #10
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d10c      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80032d0:	4b40      	ldr	r3, [pc, #256]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a44      	ldr	r2, [pc, #272]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	23c0      	movs	r3, #192	; 0xc0
 80032e0:	039b      	lsls	r3, r3, #14
 80032e2:	401a      	ands	r2, r3
 80032e4:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032e6:	430a      	orrs	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	23c0      	movs	r3, #192	; 0xc0
 80032f4:	029b      	lsls	r3, r3, #10
 80032f6:	401a      	ands	r2, r3
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032fa:	430a      	orrs	r2, r1
 80032fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032fe:	2317      	movs	r3, #23
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003308:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800330a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330c:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800330e:	4937      	ldr	r1, [pc, #220]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003310:	400a      	ands	r2, r1
 8003312:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2201      	movs	r2, #1
 800331a:	4013      	ands	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800331e:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003322:	2203      	movs	r2, #3
 8003324:	4393      	bics	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	4b29      	ldr	r3, [pc, #164]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800332e:	430a      	orrs	r2, r1
 8003330:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2202      	movs	r2, #2
 8003338:	4013      	ands	r3, r2
 800333a:	d009      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800333c:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	220c      	movs	r2, #12
 8003342:	4393      	bics	r3, r2
 8003344:	0019      	movs	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	4b22      	ldr	r3, [pc, #136]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800334c:	430a      	orrs	r2, r1
 800334e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2204      	movs	r2, #4
 8003356:	4013      	ands	r3, r2
 8003358:	d009      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	4a24      	ldr	r2, [pc, #144]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003360:	4013      	ands	r3, r2
 8003362:	0019      	movs	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800336a:	430a      	orrs	r2, r1
 800336c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2208      	movs	r2, #8
 8003374:	4013      	ands	r3, r2
 8003376:	d009      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337c:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800337e:	4013      	ands	r3, r2
 8003380:	0019      	movs	r1, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003388:	430a      	orrs	r2, r1
 800338a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2240      	movs	r2, #64	; 0x40
 8003392:	4013      	ands	r3, r2
 8003394:	d009      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003396:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339a:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800339c:	4013      	ands	r3, r2
 800339e:	0019      	movs	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033a6:	430a      	orrs	r2, r1
 80033a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	4013      	ands	r3, r2
 80033b2:	d009      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80033b4:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b8:	4a10      	ldr	r2, [pc, #64]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	0019      	movs	r1, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	4b04      	ldr	r3, [pc, #16]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033c4:	430a      	orrs	r2, r1
 80033c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b006      	add	sp, #24
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40007000 	.word	0x40007000
 80033dc:	fffcffff 	.word	0xfffcffff
 80033e0:	fff7ffff 	.word	0xfff7ffff
 80033e4:	00001388 	.word	0x00001388
 80033e8:	ffcfffff 	.word	0xffcfffff
 80033ec:	efffffff 	.word	0xefffffff
 80033f0:	fffff3ff 	.word	0xfffff3ff
 80033f4:	ffffcfff 	.word	0xffffcfff
 80033f8:	fbffffff 	.word	0xfbffffff
 80033fc:	fff3ffff 	.word	0xfff3ffff

08003400 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e08e      	b.n	8003530 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2221      	movs	r2, #33	; 0x21
 8003416:	5c9b      	ldrb	r3, [r3, r2]
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	2100      	movs	r1, #0
 8003424:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f7fd fb9b 	bl	8000b64 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2221      	movs	r2, #33	; 0x21
 8003432:	2102      	movs	r1, #2
 8003434:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	22ca      	movs	r2, #202	; 0xca
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2253      	movs	r2, #83	; 0x53
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0018      	movs	r0, r3
 800344a:	f000 fa10 	bl	800386e <RTC_EnterInitMode>
 800344e:	1e03      	subs	r3, r0, #0
 8003450:	d009      	beq.n	8003466 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	22ff      	movs	r2, #255	; 0xff
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2221      	movs	r2, #33	; 0x21
 800345e:	2104      	movs	r1, #4
 8003460:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e064      	b.n	8003530 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4931      	ldr	r1, [pc, #196]	; (8003538 <HAL_RTC_Init+0x138>)
 8003472:	400a      	ands	r2, r1
 8003474:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6899      	ldr	r1, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	430a      	orrs	r2, r1
 8003492:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68d2      	ldr	r2, [r2, #12]
 800349c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6919      	ldr	r1, [r3, #16]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	041a      	lsls	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2180      	movs	r1, #128	; 0x80
 80034be:	438a      	bics	r2, r1
 80034c0:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2103      	movs	r1, #3
 80034ce:	438a      	bics	r2, r1
 80034d0:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69da      	ldr	r2, [r3, #28]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2220      	movs	r2, #32
 80034f2:	4013      	ands	r3, r2
 80034f4:	d113      	bne.n	800351e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	0018      	movs	r0, r3
 80034fa:	f000 f991 	bl	8003820 <HAL_RTC_WaitForSynchro>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d00d      	beq.n	800351e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	22ff      	movs	r2, #255	; 0xff
 8003508:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2221      	movs	r2, #33	; 0x21
 800350e:	2104      	movs	r1, #4
 8003510:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	2100      	movs	r1, #0
 8003518:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e008      	b.n	8003530 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	22ff      	movs	r2, #255	; 0xff
 8003524:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2221      	movs	r2, #33	; 0x21
 800352a:	2101      	movs	r1, #1
 800352c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800352e:	2300      	movs	r3, #0
  }
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b002      	add	sp, #8
 8003536:	bd80      	pop	{r7, pc}
 8003538:	ff8fffbf 	.word	0xff8fffbf

0800353c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	5c9b      	ldrb	r3, [r3, r2]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_RTC_SetTime+0x1a>
 8003552:	2302      	movs	r3, #2
 8003554:	e0ad      	b.n	80036b2 <HAL_RTC_SetTime+0x176>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2220      	movs	r2, #32
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2221      	movs	r2, #33	; 0x21
 8003562:	2102      	movs	r1, #2
 8003564:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d125      	bne.n	80035b8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2240      	movs	r2, #64	; 0x40
 8003574:	4013      	ands	r3, r2
 8003576:	d102      	bne.n	800357e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2200      	movs	r2, #0
 800357c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	0018      	movs	r0, r3
 8003584:	f000 f99d 	bl	80038c2 <RTC_ByteToBcd2>
 8003588:	0003      	movs	r3, r0
 800358a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	785b      	ldrb	r3, [r3, #1]
 8003590:	0018      	movs	r0, r3
 8003592:	f000 f996 	bl	80038c2 <RTC_ByteToBcd2>
 8003596:	0003      	movs	r3, r0
 8003598:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800359a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	789b      	ldrb	r3, [r3, #2]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 f98e 	bl	80038c2 <RTC_ByteToBcd2>
 80035a6:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80035a8:	0022      	movs	r2, r4
 80035aa:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	78db      	ldrb	r3, [r3, #3]
 80035b0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e017      	b.n	80035e8 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2240      	movs	r2, #64	; 0x40
 80035c0:	4013      	ands	r3, r2
 80035c2:	d102      	bne.n	80035ca <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	2200      	movs	r2, #0
 80035c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	785b      	ldrb	r3, [r3, #1]
 80035d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035d6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80035dc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	78db      	ldrb	r3, [r3, #3]
 80035e2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	22ca      	movs	r2, #202	; 0xca
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2253      	movs	r2, #83	; 0x53
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f937 	bl	800386e <RTC_EnterInitMode>
 8003600:	1e03      	subs	r3, r0, #0
 8003602:	d00d      	beq.n	8003620 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	22ff      	movs	r2, #255	; 0xff
 800360a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2221      	movs	r2, #33	; 0x21
 8003610:	2104      	movs	r1, #4
 8003612:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	2100      	movs	r1, #0
 800361a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e048      	b.n	80036b2 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	4925      	ldr	r1, [pc, #148]	; (80036bc <HAL_RTC_SetTime+0x180>)
 8003628:	400a      	ands	r2, r1
 800362a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4922      	ldr	r1, [pc, #136]	; (80036c0 <HAL_RTC_SetTime+0x184>)
 8003638:	400a      	ands	r2, r1
 800363a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6899      	ldr	r1, [r3, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	431a      	orrs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	438a      	bics	r2, r1
 8003662:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2220      	movs	r2, #32
 800366c:	4013      	ands	r3, r2
 800366e:	d113      	bne.n	8003698 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	0018      	movs	r0, r3
 8003674:	f000 f8d4 	bl	8003820 <HAL_RTC_WaitForSynchro>
 8003678:	1e03      	subs	r3, r0, #0
 800367a:	d00d      	beq.n	8003698 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	22ff      	movs	r2, #255	; 0xff
 8003682:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2221      	movs	r2, #33	; 0x21
 8003688:	2104      	movs	r1, #4
 800368a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	2100      	movs	r1, #0
 8003692:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e00c      	b.n	80036b2 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	22ff      	movs	r2, #255	; 0xff
 800369e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2221      	movs	r2, #33	; 0x21
 80036a4:	2101      	movs	r1, #1
 80036a6:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2220      	movs	r2, #32
 80036ac:	2100      	movs	r1, #0
 80036ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036b0:	2300      	movs	r3, #0
  }
}
 80036b2:	0018      	movs	r0, r3
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b007      	add	sp, #28
 80036b8:	bd90      	pop	{r4, r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	007f7f7f 	.word	0x007f7f7f
 80036c0:	fffbffff 	.word	0xfffbffff

080036c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036c4:	b590      	push	{r4, r7, lr}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	5c9b      	ldrb	r3, [r3, r2]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d101      	bne.n	80036de <HAL_RTC_SetDate+0x1a>
 80036da:	2302      	movs	r3, #2
 80036dc:	e099      	b.n	8003812 <HAL_RTC_SetDate+0x14e>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	2101      	movs	r1, #1
 80036e4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2221      	movs	r2, #33	; 0x21
 80036ea:	2102      	movs	r1, #2
 80036ec:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10e      	bne.n	8003712 <HAL_RTC_SetDate+0x4e>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	785b      	ldrb	r3, [r3, #1]
 80036f8:	001a      	movs	r2, r3
 80036fa:	2310      	movs	r3, #16
 80036fc:	4013      	ands	r3, r2
 80036fe:	d008      	beq.n	8003712 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	785b      	ldrb	r3, [r3, #1]
 8003704:	2210      	movs	r2, #16
 8003706:	4393      	bics	r3, r2
 8003708:	b2db      	uxtb	r3, r3
 800370a:	330a      	adds	r3, #10
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11c      	bne.n	8003752 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	78db      	ldrb	r3, [r3, #3]
 800371c:	0018      	movs	r0, r3
 800371e:	f000 f8d0 	bl	80038c2 <RTC_ByteToBcd2>
 8003722:	0003      	movs	r3, r0
 8003724:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	0018      	movs	r0, r3
 800372c:	f000 f8c9 	bl	80038c2 <RTC_ByteToBcd2>
 8003730:	0003      	movs	r3, r0
 8003732:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003734:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	789b      	ldrb	r3, [r3, #2]
 800373a:	0018      	movs	r0, r3
 800373c:	f000 f8c1 	bl	80038c2 <RTC_ByteToBcd2>
 8003740:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003742:	0022      	movs	r2, r4
 8003744:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e00e      	b.n	8003770 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	78db      	ldrb	r3, [r3, #3]
 8003756:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800375e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003764:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	22ca      	movs	r2, #202	; 0xca
 8003776:	625a      	str	r2, [r3, #36]	; 0x24
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2253      	movs	r2, #83	; 0x53
 800377e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	0018      	movs	r0, r3
 8003784:	f000 f873 	bl	800386e <RTC_EnterInitMode>
 8003788:	1e03      	subs	r3, r0, #0
 800378a:	d00d      	beq.n	80037a8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	22ff      	movs	r2, #255	; 0xff
 8003792:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2221      	movs	r2, #33	; 0x21
 8003798:	2104      	movs	r1, #4
 800379a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	2100      	movs	r1, #0
 80037a2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e034      	b.n	8003812 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	491b      	ldr	r1, [pc, #108]	; (800381c <HAL_RTC_SetDate+0x158>)
 80037b0:	400a      	ands	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2180      	movs	r1, #128	; 0x80
 80037c0:	438a      	bics	r2, r1
 80037c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2220      	movs	r2, #32
 80037cc:	4013      	ands	r3, r2
 80037ce:	d113      	bne.n	80037f8 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f000 f824 	bl	8003820 <HAL_RTC_WaitForSynchro>
 80037d8:	1e03      	subs	r3, r0, #0
 80037da:	d00d      	beq.n	80037f8 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	22ff      	movs	r2, #255	; 0xff
 80037e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2221      	movs	r2, #33	; 0x21
 80037e8:	2104      	movs	r1, #4
 80037ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	2100      	movs	r1, #0
 80037f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e00c      	b.n	8003812 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	22ff      	movs	r2, #255	; 0xff
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2221      	movs	r2, #33	; 0x21
 8003804:	2101      	movs	r1, #1
 8003806:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2220      	movs	r2, #32
 800380c:	2100      	movs	r1, #0
 800380e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003810:	2300      	movs	r3, #0
  }
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b007      	add	sp, #28
 8003818:	bd90      	pop	{r4, r7, pc}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	00ffff3f 	.word	0x00ffff3f

08003820 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	21a0      	movs	r1, #160	; 0xa0
 8003834:	438a      	bics	r2, r1
 8003836:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003838:	f7fd fbea 	bl	8001010 <HAL_GetTick>
 800383c:	0003      	movs	r3, r0
 800383e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003840:	e00a      	b.n	8003858 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003842:	f7fd fbe5 	bl	8001010 <HAL_GetTick>
 8003846:	0002      	movs	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad2      	subs	r2, r2, r3
 800384c:	23fa      	movs	r3, #250	; 0xfa
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d901      	bls.n	8003858 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e006      	b.n	8003866 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	4013      	ands	r3, r2
 8003862:	d0ee      	beq.n	8003842 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	0018      	movs	r0, r3
 8003868:	46bd      	mov	sp, r7
 800386a:	b004      	add	sp, #16
 800386c:	bd80      	pop	{r7, pc}

0800386e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2240      	movs	r2, #64	; 0x40
 800387e:	4013      	ands	r3, r2
 8003880:	d11a      	bne.n	80038b8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2201      	movs	r2, #1
 8003888:	4252      	negs	r2, r2
 800388a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800388c:	f7fd fbc0 	bl	8001010 <HAL_GetTick>
 8003890:	0003      	movs	r3, r0
 8003892:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003894:	e00a      	b.n	80038ac <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003896:	f7fd fbbb 	bl	8001010 <HAL_GetTick>
 800389a:	0002      	movs	r2, r0
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1ad2      	subs	r2, r2, r3
 80038a0:	23fa      	movs	r3, #250	; 0xfa
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d901      	bls.n	80038ac <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e006      	b.n	80038ba <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	4013      	ands	r3, r2
 80038b6:	d0ee      	beq.n	8003896 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b004      	add	sp, #16
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b084      	sub	sp, #16
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	0002      	movs	r2, r0
 80038ca:	1dfb      	adds	r3, r7, #7
 80038cc:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80038d2:	230b      	movs	r3, #11
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	1dfa      	adds	r2, r7, #7
 80038d8:	7812      	ldrb	r2, [r2, #0]
 80038da:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80038dc:	e008      	b.n	80038f0 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80038e4:	220b      	movs	r2, #11
 80038e6:	18bb      	adds	r3, r7, r2
 80038e8:	18ba      	adds	r2, r7, r2
 80038ea:	7812      	ldrb	r2, [r2, #0]
 80038ec:	3a0a      	subs	r2, #10
 80038ee:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80038f0:	230b      	movs	r3, #11
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b09      	cmp	r3, #9
 80038f8:	d8f1      	bhi.n	80038de <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	b2da      	uxtb	r2, r3
 8003902:	230b      	movs	r3, #11
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	4313      	orrs	r3, r2
 800390a:	b2db      	uxtb	r3, r3
}
 800390c:	0018      	movs	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	b004      	add	sp, #16
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e01e      	b.n	8003964 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2239      	movs	r2, #57	; 0x39
 800392a:	5c9b      	ldrb	r3, [r3, r2]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d107      	bne.n	8003942 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2238      	movs	r2, #56	; 0x38
 8003936:	2100      	movs	r1, #0
 8003938:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	0018      	movs	r0, r3
 800393e:	f7fd f929 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2239      	movs	r2, #57	; 0x39
 8003946:	2102      	movs	r1, #2
 8003948:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	0019      	movs	r1, r3
 8003954:	0010      	movs	r0, r2
 8003956:	f000 fa41 	bl	8003ddc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2239      	movs	r2, #57	; 0x39
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e01e      	b.n	80039bc <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2239      	movs	r2, #57	; 0x39
 8003982:	5c9b      	ldrb	r3, [r3, r2]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d107      	bne.n	800399a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2238      	movs	r2, #56	; 0x38
 800398e:	2100      	movs	r1, #0
 8003990:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	0018      	movs	r0, r3
 8003996:	f000 f815 	bl	80039c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2239      	movs	r2, #57	; 0x39
 800399e:	2102      	movs	r1, #2
 80039a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3304      	adds	r3, #4
 80039aa:	0019      	movs	r1, r3
 80039ac:	0010      	movs	r0, r2
 80039ae:	f000 fa15 	bl	8003ddc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2239      	movs	r2, #57	; 0x39
 80039b6:	2101      	movs	r1, #1
 80039b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	b002      	add	sp, #8
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039cc:	46c0      	nop			; (mov r8, r8)
 80039ce:	46bd      	mov	sp, r7
 80039d0:	b002      	add	sp, #8
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6839      	ldr	r1, [r7, #0]
 80039e4:	2201      	movs	r2, #1
 80039e6:	0018      	movs	r0, r3
 80039e8:	f000 fbea 	bl	80041c0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2207      	movs	r2, #7
 80039f4:	4013      	ands	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d007      	beq.n	8003a0e <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b004      	add	sp, #16
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6839      	ldr	r1, [r7, #0]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f000 fbc8 	bl	80041c0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <HAL_TIM_PWM_Stop+0x48>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d107      	bne.n	8003a4c <HAL_TIM_PWM_Stop+0x34>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2101      	movs	r1, #1
 8003a48:	438a      	bics	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2239      	movs	r2, #57	; 0x39
 8003a50:	2101      	movs	r1, #1
 8003a52:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	00001111 	.word	0x00001111

08003a64 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e02e      	b.n	8003ad6 <HAL_TIM_OnePulse_Init+0x72>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2239      	movs	r2, #57	; 0x39
 8003a7c:	5c9b      	ldrb	r3, [r3, r2]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d107      	bne.n	8003a94 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2238      	movs	r2, #56	; 0x38
 8003a88:	2100      	movs	r1, #0
 8003a8a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	0018      	movs	r0, r3
 8003a90:	f000 f825 	bl	8003ade <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2239      	movs	r2, #57	; 0x39
 8003a98:	2102      	movs	r1, #2
 8003a9a:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	0010      	movs	r0, r2
 8003aa8:	f000 f998 	bl	8003ddc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2108      	movs	r1, #8
 8003ab8:	438a      	bics	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2239      	movs	r2, #57	; 0x39
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	0018      	movs	r0, r3
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b002      	add	sp, #8
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2238      	movs	r2, #56	; 0x38
 8003b00:	5c9b      	ldrb	r3, [r3, r2]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e0a4      	b.n	8003c54 <HAL_TIM_PWM_ConfigChannel+0x164>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2238      	movs	r2, #56	; 0x38
 8003b0e:	2101      	movs	r1, #1
 8003b10:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2239      	movs	r2, #57	; 0x39
 8003b16:	2102      	movs	r1, #2
 8003b18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d029      	beq.n	8003b74 <HAL_TIM_PWM_ConfigChannel+0x84>
 8003b20:	d802      	bhi.n	8003b28 <HAL_TIM_PWM_ConfigChannel+0x38>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8003b26:	e08c      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d046      	beq.n	8003bba <HAL_TIM_PWM_ConfigChannel+0xca>
 8003b2c:	2b0c      	cmp	r3, #12
 8003b2e:	d065      	beq.n	8003bfc <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8003b30:	e087      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	0011      	movs	r1, r2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f000 f9a2 	bl	8003e84 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2108      	movs	r1, #8
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2104      	movs	r1, #4
 8003b5c:	438a      	bics	r2, r1
 8003b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6999      	ldr	r1, [r3, #24]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	68da      	ldr	r2, [r3, #12]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	619a      	str	r2, [r3, #24]
      break;
 8003b72:	e066      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	0011      	movs	r1, r2
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f000 f9bd 	bl	8003efc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699a      	ldr	r2, [r3, #24]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	0109      	lsls	r1, r1, #4
 8003b90:	430a      	orrs	r2, r1
 8003b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	492f      	ldr	r1, [pc, #188]	; (8003c5c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6999      	ldr	r1, [r3, #24]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	619a      	str	r2, [r3, #24]
      break;
 8003bb8:	e043      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	0011      	movs	r1, r2
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f000 f9dc 	bl	8003f80 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	69da      	ldr	r2, [r3, #28]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2108      	movs	r1, #8
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69da      	ldr	r2, [r3, #28]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2104      	movs	r1, #4
 8003be4:	438a      	bics	r2, r1
 8003be6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	69d9      	ldr	r1, [r3, #28]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	61da      	str	r2, [r3, #28]
      break;
 8003bfa:	e022      	b.n	8003c42 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	0011      	movs	r1, r2
 8003c04:	0018      	movs	r0, r3
 8003c06:	f000 f9fb 	bl	8004000 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2180      	movs	r1, #128	; 0x80
 8003c16:	0109      	lsls	r1, r1, #4
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69da      	ldr	r2, [r3, #28]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	490d      	ldr	r1, [pc, #52]	; (8003c5c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8003c28:	400a      	ands	r2, r1
 8003c2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69d9      	ldr	r1, [r3, #28]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	021a      	lsls	r2, r3, #8
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	61da      	str	r2, [r3, #28]
      break;
 8003c40:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2239      	movs	r2, #57	; 0x39
 8003c46:	2101      	movs	r1, #1
 8003c48:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2238      	movs	r2, #56	; 0x38
 8003c4e:	2100      	movs	r1, #0
 8003c50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	0018      	movs	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b004      	add	sp, #16
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	fffffbff 	.word	0xfffffbff

08003c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2238      	movs	r2, #56	; 0x38
 8003c6e:	5c9b      	ldrb	r3, [r3, r2]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d101      	bne.n	8003c78 <HAL_TIM_ConfigClockSource+0x18>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e0ab      	b.n	8003dd0 <HAL_TIM_ConfigClockSource+0x170>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2238      	movs	r2, #56	; 0x38
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2239      	movs	r2, #57	; 0x39
 8003c84:	2102      	movs	r1, #2
 8003c86:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2277      	movs	r2, #119	; 0x77
 8003c94:	4393      	bics	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a4f      	ldr	r2, [pc, #316]	; (8003dd8 <HAL_TIM_ConfigClockSource+0x178>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d100      	bne.n	8003cb2 <HAL_TIM_ConfigClockSource+0x52>
 8003cb0:	e06b      	b.n	8003d8a <HAL_TIM_ConfigClockSource+0x12a>
 8003cb2:	d80e      	bhi.n	8003cd2 <HAL_TIM_ConfigClockSource+0x72>
 8003cb4:	2b10      	cmp	r3, #16
 8003cb6:	d100      	bne.n	8003cba <HAL_TIM_ConfigClockSource+0x5a>
 8003cb8:	e077      	b.n	8003daa <HAL_TIM_ConfigClockSource+0x14a>
 8003cba:	d803      	bhi.n	8003cc4 <HAL_TIM_ConfigClockSource+0x64>
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d100      	bne.n	8003cc2 <HAL_TIM_ConfigClockSource+0x62>
 8003cc0:	e073      	b.n	8003daa <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cc2:	e07c      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d100      	bne.n	8003cca <HAL_TIM_ConfigClockSource+0x6a>
 8003cc8:	e06f      	b.n	8003daa <HAL_TIM_ConfigClockSource+0x14a>
 8003cca:	2b30      	cmp	r3, #48	; 0x30
 8003ccc:	d100      	bne.n	8003cd0 <HAL_TIM_ConfigClockSource+0x70>
 8003cce:	e06c      	b.n	8003daa <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003cd0:	e075      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003cd2:	2b70      	cmp	r3, #112	; 0x70
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_TIM_ConfigClockSource+0x94>
 8003cd6:	d804      	bhi.n	8003ce2 <HAL_TIM_ConfigClockSource+0x82>
 8003cd8:	2b50      	cmp	r3, #80	; 0x50
 8003cda:	d036      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0xea>
 8003cdc:	2b60      	cmp	r3, #96	; 0x60
 8003cde:	d044      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003ce0:	e06d      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8003ce2:	2280      	movs	r2, #128	; 0x80
 8003ce4:	0152      	lsls	r2, r2, #5
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d068      	beq.n	8003dbc <HAL_TIM_ConfigClockSource+0x15c>
 8003cea:	2280      	movs	r2, #128	; 0x80
 8003cec:	0192      	lsls	r2, r2, #6
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d017      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8003cf2:	e064      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6899      	ldr	r1, [r3, #8]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f000 fa3c 	bl	8004180 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2277      	movs	r2, #119	; 0x77
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	609a      	str	r2, [r3, #8]
      break;
 8003d20:	e04d      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6899      	ldr	r1, [r3, #8]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f000 fa25 	bl	8004180 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2180      	movs	r1, #128	; 0x80
 8003d42:	01c9      	lsls	r1, r1, #7
 8003d44:	430a      	orrs	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
      break;
 8003d48:	e039      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	001a      	movs	r2, r3
 8003d58:	f000 f998 	bl	800408c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2150      	movs	r1, #80	; 0x50
 8003d62:	0018      	movs	r0, r3
 8003d64:	f000 f9f2 	bl	800414c <TIM_ITRx_SetConfig>
      break;
 8003d68:	e029      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	001a      	movs	r2, r3
 8003d78:	f000 f9b6 	bl	80040e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2160      	movs	r1, #96	; 0x60
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 f9e2 	bl	800414c <TIM_ITRx_SetConfig>
      break;
 8003d88:	e019      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	001a      	movs	r2, r3
 8003d98:	f000 f978 	bl	800408c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	0018      	movs	r0, r3
 8003da4:	f000 f9d2 	bl	800414c <TIM_ITRx_SetConfig>
      break;
 8003da8:	e009      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0019      	movs	r1, r3
 8003db4:	0010      	movs	r0, r2
 8003db6:	f000 f9c9 	bl	800414c <TIM_ITRx_SetConfig>
      break;
 8003dba:	e000      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8003dbc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2239      	movs	r2, #57	; 0x39
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2238      	movs	r2, #56	; 0x38
 8003dca:	2100      	movs	r1, #0
 8003dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b004      	add	sp, #16
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	ffff00ff 	.word	0xffff00ff

08003ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	05db      	lsls	r3, r3, #23
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d007      	beq.n	8003e06 <TIM_Base_SetConfig+0x2a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <TIM_Base_SetConfig+0x9c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d003      	beq.n	8003e06 <TIM_Base_SetConfig+0x2a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <TIM_Base_SetConfig+0xa0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d108      	bne.n	8003e18 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2270      	movs	r2, #112	; 0x70
 8003e0a:	4393      	bics	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	05db      	lsls	r3, r3, #23
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	d007      	beq.n	8003e32 <TIM_Base_SetConfig+0x56>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <TIM_Base_SetConfig+0x9c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d003      	beq.n	8003e32 <TIM_Base_SetConfig+0x56>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <TIM_Base_SetConfig+0xa0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d108      	bne.n	8003e44 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a12      	ldr	r2, [pc, #72]	; (8003e80 <TIM_Base_SetConfig+0xa4>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2280      	movs	r2, #128	; 0x80
 8003e48:	4393      	bics	r3, r2
 8003e4a:	001a      	movs	r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	615a      	str	r2, [r3, #20]
}
 8003e70:	46c0      	nop			; (mov r8, r8)
 8003e72:	46bd      	mov	sp, r7
 8003e74:	b004      	add	sp, #16
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40010800 	.word	0x40010800
 8003e7c:	40011400 	.word	0x40011400
 8003e80:	fffffcff 	.word	0xfffffcff

08003e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	2201      	movs	r2, #1
 8003e94:	4393      	bics	r3, r2
 8003e96:	001a      	movs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2270      	movs	r2, #112	; 0x70
 8003eb2:	4393      	bics	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2203      	movs	r2, #3
 8003eba:	4393      	bics	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	4393      	bics	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	621a      	str	r2, [r3, #32]
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b006      	add	sp, #24
 8003efa:	bd80      	pop	{r7, pc}

08003efc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	4393      	bics	r3, r2
 8003f0e:	001a      	movs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a1b      	ldr	r3, [r3, #32]
 8003f18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	4a13      	ldr	r2, [pc, #76]	; (8003f78 <TIM_OC2_SetConfig+0x7c>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4a12      	ldr	r2, [pc, #72]	; (8003f7c <TIM_OC2_SetConfig+0x80>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2220      	movs	r2, #32
 8003f46:	4393      	bics	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	621a      	str	r2, [r3, #32]
}
 8003f70:	46c0      	nop			; (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b006      	add	sp, #24
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	ffff8fff 	.word	0xffff8fff
 8003f7c:	fffffcff 	.word	0xfffffcff

08003f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ff8 <TIM_OC3_SetConfig+0x78>)
 8003f90:	401a      	ands	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2270      	movs	r2, #112	; 0x70
 8003fac:	4393      	bics	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2203      	movs	r2, #3
 8003fb4:	4393      	bics	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	4a0d      	ldr	r2, [pc, #52]	; (8003ffc <TIM_OC3_SetConfig+0x7c>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	621a      	str	r2, [r3, #32]
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b006      	add	sp, #24
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	fffffeff 	.word	0xfffffeff
 8003ffc:	fffffdff 	.word	0xfffffdff

08004000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	4a1b      	ldr	r2, [pc, #108]	; (800407c <TIM_OC4_SetConfig+0x7c>)
 8004010:	401a      	ands	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4a15      	ldr	r2, [pc, #84]	; (8004080 <TIM_OC4_SetConfig+0x80>)
 800402c:	4013      	ands	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4a14      	ldr	r2, [pc, #80]	; (8004084 <TIM_OC4_SetConfig+0x84>)
 8004034:	4013      	ands	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	4a10      	ldr	r2, [pc, #64]	; (8004088 <TIM_OC4_SetConfig+0x88>)
 8004048:	4013      	ands	r3, r2
 800404a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	031b      	lsls	r3, r3, #12
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b006      	add	sp, #24
 8004078:	bd80      	pop	{r7, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	ffffefff 	.word	0xffffefff
 8004080:	ffff8fff 	.word	0xffff8fff
 8004084:	fffffcff 	.word	0xfffffcff
 8004088:	ffffdfff 	.word	0xffffdfff

0800408c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	2201      	movs	r2, #1
 80040a4:	4393      	bics	r3, r2
 80040a6:	001a      	movs	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	22f0      	movs	r2, #240	; 0xf0
 80040b6:	4393      	bics	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	220a      	movs	r2, #10
 80040c8:	4393      	bics	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	621a      	str	r2, [r3, #32]
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b006      	add	sp, #24
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	2210      	movs	r2, #16
 80040fa:	4393      	bics	r3, r2
 80040fc:	001a      	movs	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	4a0d      	ldr	r2, [pc, #52]	; (8004148 <TIM_TI2_ConfigInputStage+0x60>)
 8004112:	4013      	ands	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	031b      	lsls	r3, r3, #12
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	22a0      	movs	r2, #160	; 0xa0
 8004124:	4393      	bics	r3, r2
 8004126:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	46bd      	mov	sp, r7
 8004142:	b006      	add	sp, #24
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	ffff0fff 	.word	0xffff0fff

0800414c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2270      	movs	r2, #112	; 0x70
 8004160:	4393      	bics	r3, r2
 8004162:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	2207      	movs	r2, #7
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	609a      	str	r2, [r3, #8]
}
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	46bd      	mov	sp, r7
 800417a:	b004      	add	sp, #16
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	4a09      	ldr	r2, [pc, #36]	; (80041bc <TIM_ETR_SetConfig+0x3c>)
 8004198:	4013      	ands	r3, r2
 800419a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	021a      	lsls	r2, r3, #8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	609a      	str	r2, [r3, #8]
}
 80041b4:	46c0      	nop			; (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b006      	add	sp, #24
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	ffff00ff 	.word	0xffff00ff

080041c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	221f      	movs	r2, #31
 80041d0:	4013      	ands	r3, r2
 80041d2:	2201      	movs	r2, #1
 80041d4:	409a      	lsls	r2, r3
 80041d6:	0013      	movs	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	43d2      	mvns	r2, r2
 80041e2:	401a      	ands	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a1a      	ldr	r2, [r3, #32]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	211f      	movs	r1, #31
 80041f0:	400b      	ands	r3, r1
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4099      	lsls	r1, r3
 80041f6:	000b      	movs	r3, r1
 80041f8:	431a      	orrs	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	621a      	str	r2, [r3, #32]
}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	46bd      	mov	sp, r7
 8004202:	b006      	add	sp, #24
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2238      	movs	r2, #56	; 0x38
 8004214:	5c9b      	ldrb	r3, [r3, r2]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d101      	bne.n	800421e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800421a:	2302      	movs	r3, #2
 800421c:	e032      	b.n	8004284 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2238      	movs	r2, #56	; 0x38
 8004222:	2101      	movs	r1, #1
 8004224:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2239      	movs	r2, #57	; 0x39
 800422a:	2102      	movs	r1, #2
 800422c:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2270      	movs	r2, #112	; 0x70
 8004242:	4393      	bics	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	4313      	orrs	r3, r2
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	4393      	bics	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	4313      	orrs	r3, r2
 8004260:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2239      	movs	r2, #57	; 0x39
 8004276:	2101      	movs	r1, #1
 8004278:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2238      	movs	r2, #56	; 0x38
 800427e:	2100      	movs	r1, #0
 8004280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	0018      	movs	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	b004      	add	sp, #16
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e044      	b.n	8004328 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d107      	bne.n	80042b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2270      	movs	r2, #112	; 0x70
 80042aa:	2100      	movs	r1, #0
 80042ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7fc fccf 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2224      	movs	r2, #36	; 0x24
 80042ba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2101      	movs	r1, #1
 80042c8:	438a      	bics	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 f830 	bl	8004334 <UART_SetConfig>
 80042d4:	0003      	movs	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e024      	b.n	8004328 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0018      	movs	r0, r3
 80042ea:	f000 fb3b 	bl	8004964 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	490d      	ldr	r1, [pc, #52]	; (8004330 <HAL_UART_Init+0xa4>)
 80042fa:	400a      	ands	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	212a      	movs	r1, #42	; 0x2a
 800430a:	438a      	bics	r2, r1
 800430c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2101      	movs	r1, #1
 800431a:	430a      	orrs	r2, r1
 800431c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	0018      	movs	r0, r3
 8004322:	f000 fbd3 	bl	8004acc <UART_CheckIdleState>
 8004326:	0003      	movs	r3, r0
}
 8004328:	0018      	movs	r0, r3
 800432a:	46bd      	mov	sp, r7
 800432c:	b002      	add	sp, #8
 800432e:	bd80      	pop	{r7, pc}
 8004330:	ffffb7ff 	.word	0xffffb7ff

08004334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004334:	b5b0      	push	{r4, r5, r7, lr}
 8004336:	b08e      	sub	sp, #56	; 0x38
 8004338:	af00      	add	r7, sp, #0
 800433a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800433c:	231b      	movs	r3, #27
 800433e:	2218      	movs	r2, #24
 8004340:	4694      	mov	ip, r2
 8004342:	44bc      	add	ip, r7
 8004344:	4463      	add	r3, ip
 8004346:	2210      	movs	r2, #16
 8004348:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800434a:	2300      	movs	r3, #0
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800434e:	2313      	movs	r3, #19
 8004350:	2218      	movs	r2, #24
 8004352:	4694      	mov	ip, r2
 8004354:	44bc      	add	ip, r7
 8004356:	4463      	add	r3, ip
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	431a      	orrs	r2, r3
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	431a      	orrs	r2, r3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	4313      	orrs	r3, r2
 8004376:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4ac8      	ldr	r2, [pc, #800]	; (80046a0 <UART_SetConfig+0x36c>)
 8004380:	4013      	ands	r3, r2
 8004382:	0019      	movs	r1, r3
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800438a:	430a      	orrs	r2, r1
 800438c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	4ac3      	ldr	r2, [pc, #780]	; (80046a4 <UART_SetConfig+0x370>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4abd      	ldr	r2, [pc, #756]	; (80046a8 <UART_SetConfig+0x374>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d004      	beq.n	80043c0 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043bc:	4313      	orrs	r3, r2
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	4ab9      	ldr	r2, [pc, #740]	; (80046ac <UART_SetConfig+0x378>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	0019      	movs	r1, r3
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043d2:	430a      	orrs	r2, r1
 80043d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4ab5      	ldr	r2, [pc, #724]	; (80046b0 <UART_SetConfig+0x37c>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d134      	bne.n	800444a <UART_SetConfig+0x116>
 80043e0:	4bb4      	ldr	r3, [pc, #720]	; (80046b4 <UART_SetConfig+0x380>)
 80043e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e4:	2203      	movs	r2, #3
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d015      	beq.n	8004418 <UART_SetConfig+0xe4>
 80043ec:	d304      	bcc.n	80043f8 <UART_SetConfig+0xc4>
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d00a      	beq.n	8004408 <UART_SetConfig+0xd4>
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d018      	beq.n	8004428 <UART_SetConfig+0xf4>
 80043f6:	e01f      	b.n	8004438 <UART_SetConfig+0x104>
 80043f8:	231b      	movs	r3, #27
 80043fa:	2218      	movs	r2, #24
 80043fc:	4694      	mov	ip, r2
 80043fe:	44bc      	add	ip, r7
 8004400:	4463      	add	r3, ip
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	e0ab      	b.n	8004560 <UART_SetConfig+0x22c>
 8004408:	231b      	movs	r3, #27
 800440a:	2218      	movs	r2, #24
 800440c:	4694      	mov	ip, r2
 800440e:	44bc      	add	ip, r7
 8004410:	4463      	add	r3, ip
 8004412:	2202      	movs	r2, #2
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	e0a3      	b.n	8004560 <UART_SetConfig+0x22c>
 8004418:	231b      	movs	r3, #27
 800441a:	2218      	movs	r2, #24
 800441c:	4694      	mov	ip, r2
 800441e:	44bc      	add	ip, r7
 8004420:	4463      	add	r3, ip
 8004422:	2204      	movs	r2, #4
 8004424:	701a      	strb	r2, [r3, #0]
 8004426:	e09b      	b.n	8004560 <UART_SetConfig+0x22c>
 8004428:	231b      	movs	r3, #27
 800442a:	2218      	movs	r2, #24
 800442c:	4694      	mov	ip, r2
 800442e:	44bc      	add	ip, r7
 8004430:	4463      	add	r3, ip
 8004432:	2208      	movs	r2, #8
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	e093      	b.n	8004560 <UART_SetConfig+0x22c>
 8004438:	231b      	movs	r3, #27
 800443a:	2218      	movs	r2, #24
 800443c:	4694      	mov	ip, r2
 800443e:	44bc      	add	ip, r7
 8004440:	4463      	add	r3, ip
 8004442:	2210      	movs	r2, #16
 8004444:	701a      	strb	r2, [r3, #0]
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	e08a      	b.n	8004560 <UART_SetConfig+0x22c>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a9a      	ldr	r2, [pc, #616]	; (80046b8 <UART_SetConfig+0x384>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d137      	bne.n	80044c4 <UART_SetConfig+0x190>
 8004454:	4b97      	ldr	r3, [pc, #604]	; (80046b4 <UART_SetConfig+0x380>)
 8004456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004458:	220c      	movs	r2, #12
 800445a:	4013      	ands	r3, r2
 800445c:	2b04      	cmp	r3, #4
 800445e:	d018      	beq.n	8004492 <UART_SetConfig+0x15e>
 8004460:	d802      	bhi.n	8004468 <UART_SetConfig+0x134>
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <UART_SetConfig+0x13e>
 8004466:	e024      	b.n	80044b2 <UART_SetConfig+0x17e>
 8004468:	2b08      	cmp	r3, #8
 800446a:	d00a      	beq.n	8004482 <UART_SetConfig+0x14e>
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d018      	beq.n	80044a2 <UART_SetConfig+0x16e>
 8004470:	e01f      	b.n	80044b2 <UART_SetConfig+0x17e>
 8004472:	231b      	movs	r3, #27
 8004474:	2218      	movs	r2, #24
 8004476:	4694      	mov	ip, r2
 8004478:	44bc      	add	ip, r7
 800447a:	4463      	add	r3, ip
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e06e      	b.n	8004560 <UART_SetConfig+0x22c>
 8004482:	231b      	movs	r3, #27
 8004484:	2218      	movs	r2, #24
 8004486:	4694      	mov	ip, r2
 8004488:	44bc      	add	ip, r7
 800448a:	4463      	add	r3, ip
 800448c:	2202      	movs	r2, #2
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	e066      	b.n	8004560 <UART_SetConfig+0x22c>
 8004492:	231b      	movs	r3, #27
 8004494:	2218      	movs	r2, #24
 8004496:	4694      	mov	ip, r2
 8004498:	44bc      	add	ip, r7
 800449a:	4463      	add	r3, ip
 800449c:	2204      	movs	r2, #4
 800449e:	701a      	strb	r2, [r3, #0]
 80044a0:	e05e      	b.n	8004560 <UART_SetConfig+0x22c>
 80044a2:	231b      	movs	r3, #27
 80044a4:	2218      	movs	r2, #24
 80044a6:	4694      	mov	ip, r2
 80044a8:	44bc      	add	ip, r7
 80044aa:	4463      	add	r3, ip
 80044ac:	2208      	movs	r2, #8
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	e056      	b.n	8004560 <UART_SetConfig+0x22c>
 80044b2:	231b      	movs	r3, #27
 80044b4:	2218      	movs	r2, #24
 80044b6:	4694      	mov	ip, r2
 80044b8:	44bc      	add	ip, r7
 80044ba:	4463      	add	r3, ip
 80044bc:	2210      	movs	r2, #16
 80044be:	701a      	strb	r2, [r3, #0]
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	e04d      	b.n	8004560 <UART_SetConfig+0x22c>
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a77      	ldr	r2, [pc, #476]	; (80046a8 <UART_SetConfig+0x374>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d141      	bne.n	8004552 <UART_SetConfig+0x21e>
 80044ce:	4b79      	ldr	r3, [pc, #484]	; (80046b4 <UART_SetConfig+0x380>)
 80044d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044d2:	23c0      	movs	r3, #192	; 0xc0
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	4013      	ands	r3, r2
 80044d8:	2280      	movs	r2, #128	; 0x80
 80044da:	00d2      	lsls	r2, r2, #3
 80044dc:	4293      	cmp	r3, r2
 80044de:	d01f      	beq.n	8004520 <UART_SetConfig+0x1ec>
 80044e0:	2280      	movs	r2, #128	; 0x80
 80044e2:	00d2      	lsls	r2, r2, #3
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d802      	bhi.n	80044ee <UART_SetConfig+0x1ba>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <UART_SetConfig+0x1cc>
 80044ec:	e028      	b.n	8004540 <UART_SetConfig+0x20c>
 80044ee:	2280      	movs	r2, #128	; 0x80
 80044f0:	0112      	lsls	r2, r2, #4
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00c      	beq.n	8004510 <UART_SetConfig+0x1dc>
 80044f6:	22c0      	movs	r2, #192	; 0xc0
 80044f8:	0112      	lsls	r2, r2, #4
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d018      	beq.n	8004530 <UART_SetConfig+0x1fc>
 80044fe:	e01f      	b.n	8004540 <UART_SetConfig+0x20c>
 8004500:	231b      	movs	r3, #27
 8004502:	2218      	movs	r2, #24
 8004504:	4694      	mov	ip, r2
 8004506:	44bc      	add	ip, r7
 8004508:	4463      	add	r3, ip
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e027      	b.n	8004560 <UART_SetConfig+0x22c>
 8004510:	231b      	movs	r3, #27
 8004512:	2218      	movs	r2, #24
 8004514:	4694      	mov	ip, r2
 8004516:	44bc      	add	ip, r7
 8004518:	4463      	add	r3, ip
 800451a:	2202      	movs	r2, #2
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	e01f      	b.n	8004560 <UART_SetConfig+0x22c>
 8004520:	231b      	movs	r3, #27
 8004522:	2218      	movs	r2, #24
 8004524:	4694      	mov	ip, r2
 8004526:	44bc      	add	ip, r7
 8004528:	4463      	add	r3, ip
 800452a:	2204      	movs	r2, #4
 800452c:	701a      	strb	r2, [r3, #0]
 800452e:	e017      	b.n	8004560 <UART_SetConfig+0x22c>
 8004530:	231b      	movs	r3, #27
 8004532:	2218      	movs	r2, #24
 8004534:	4694      	mov	ip, r2
 8004536:	44bc      	add	ip, r7
 8004538:	4463      	add	r3, ip
 800453a:	2208      	movs	r2, #8
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e00f      	b.n	8004560 <UART_SetConfig+0x22c>
 8004540:	231b      	movs	r3, #27
 8004542:	2218      	movs	r2, #24
 8004544:	4694      	mov	ip, r2
 8004546:	44bc      	add	ip, r7
 8004548:	4463      	add	r3, ip
 800454a:	2210      	movs	r2, #16
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	46c0      	nop			; (mov r8, r8)
 8004550:	e006      	b.n	8004560 <UART_SetConfig+0x22c>
 8004552:	231b      	movs	r3, #27
 8004554:	2218      	movs	r2, #24
 8004556:	4694      	mov	ip, r2
 8004558:	44bc      	add	ip, r7
 800455a:	4463      	add	r3, ip
 800455c:	2210      	movs	r2, #16
 800455e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a50      	ldr	r2, [pc, #320]	; (80046a8 <UART_SetConfig+0x374>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d000      	beq.n	800456c <UART_SetConfig+0x238>
 800456a:	e083      	b.n	8004674 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800456c:	231b      	movs	r3, #27
 800456e:	2218      	movs	r2, #24
 8004570:	4694      	mov	ip, r2
 8004572:	44bc      	add	ip, r7
 8004574:	4463      	add	r3, ip
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d00d      	beq.n	8004598 <UART_SetConfig+0x264>
 800457c:	dc02      	bgt.n	8004584 <UART_SetConfig+0x250>
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <UART_SetConfig+0x25a>
 8004582:	e01d      	b.n	80045c0 <UART_SetConfig+0x28c>
 8004584:	2b04      	cmp	r3, #4
 8004586:	d012      	beq.n	80045ae <UART_SetConfig+0x27a>
 8004588:	2b08      	cmp	r3, #8
 800458a:	d015      	beq.n	80045b8 <UART_SetConfig+0x284>
 800458c:	e018      	b.n	80045c0 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800458e:	f7fe fdc3 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 8004592:	0003      	movs	r3, r0
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004596:	e01b      	b.n	80045d0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004598:	4b46      	ldr	r3, [pc, #280]	; (80046b4 <UART_SetConfig+0x380>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2210      	movs	r2, #16
 800459e:	4013      	ands	r3, r2
 80045a0:	d002      	beq.n	80045a8 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80045a2:	4b46      	ldr	r3, [pc, #280]	; (80046bc <UART_SetConfig+0x388>)
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80045a6:	e013      	b.n	80045d0 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80045a8:	4b45      	ldr	r3, [pc, #276]	; (80046c0 <UART_SetConfig+0x38c>)
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045ac:	e010      	b.n	80045d0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80045ae:	f7fe fd25 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 80045b2:	0003      	movs	r3, r0
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045b6:	e00b      	b.n	80045d0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80045b8:	2380      	movs	r3, #128	; 0x80
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045be:	e007      	b.n	80045d0 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80045c0:	2313      	movs	r3, #19
 80045c2:	2218      	movs	r2, #24
 80045c4:	4694      	mov	ip, r2
 80045c6:	44bc      	add	ip, r7
 80045c8:	4463      	add	r3, ip
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
        break;
 80045ce:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d100      	bne.n	80045d8 <UART_SetConfig+0x2a4>
 80045d6:	e1a6      	b.n	8004926 <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	0013      	movs	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	189b      	adds	r3, r3, r2
 80045e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d305      	bcc.n	80045f4 <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d907      	bls.n	8004604 <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 80045f4:	2313      	movs	r3, #19
 80045f6:	2218      	movs	r2, #24
 80045f8:	4694      	mov	ip, r2
 80045fa:	44bc      	add	ip, r7
 80045fc:	4463      	add	r3, ip
 80045fe:	2201      	movs	r2, #1
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	e190      	b.n	8004926 <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	6939      	ldr	r1, [r7, #16]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	000b      	movs	r3, r1
 8004612:	0e1b      	lsrs	r3, r3, #24
 8004614:	0010      	movs	r0, r2
 8004616:	0205      	lsls	r5, r0, #8
 8004618:	431d      	orrs	r5, r3
 800461a:	000b      	movs	r3, r1
 800461c:	021c      	lsls	r4, r3, #8
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	60bb      	str	r3, [r7, #8]
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	68b8      	ldr	r0, [r7, #8]
 800462c:	68f9      	ldr	r1, [r7, #12]
 800462e:	1900      	adds	r0, r0, r4
 8004630:	4169      	adcs	r1, r5
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	2300      	movs	r3, #0
 800463a:	607b      	str	r3, [r7, #4]
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f7fb fdee 	bl	8000220 <__aeabi_uldivmod>
 8004644:	0003      	movs	r3, r0
 8004646:	000c      	movs	r4, r1
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800464a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464c:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <UART_SetConfig+0x390>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d908      	bls.n	8004664 <UART_SetConfig+0x330>
 8004652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004654:	4a1c      	ldr	r2, [pc, #112]	; (80046c8 <UART_SetConfig+0x394>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d804      	bhi.n	8004664 <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	e160      	b.n	8004926 <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 8004664:	2313      	movs	r3, #19
 8004666:	2218      	movs	r2, #24
 8004668:	4694      	mov	ip, r2
 800466a:	44bc      	add	ip, r7
 800466c:	4463      	add	r3, ip
 800466e:	2201      	movs	r2, #1
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	e158      	b.n	8004926 <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	2380      	movs	r3, #128	; 0x80
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	429a      	cmp	r2, r3
 800467e:	d000      	beq.n	8004682 <UART_SetConfig+0x34e>
 8004680:	e0c3      	b.n	800480a <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 8004682:	231b      	movs	r3, #27
 8004684:	2218      	movs	r2, #24
 8004686:	4694      	mov	ip, r2
 8004688:	44bc      	add	ip, r7
 800468a:	4463      	add	r3, ip
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b08      	cmp	r3, #8
 8004690:	d900      	bls.n	8004694 <UART_SetConfig+0x360>
 8004692:	e086      	b.n	80047a2 <UART_SetConfig+0x46e>
 8004694:	009a      	lsls	r2, r3, #2
 8004696:	4b0d      	ldr	r3, [pc, #52]	; (80046cc <UART_SetConfig+0x398>)
 8004698:	18d3      	adds	r3, r2, r3
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	469f      	mov	pc, r3
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	efff69f3 	.word	0xefff69f3
 80046a4:	ffffcfff 	.word	0xffffcfff
 80046a8:	40004800 	.word	0x40004800
 80046ac:	fffff4ff 	.word	0xfffff4ff
 80046b0:	40013800 	.word	0x40013800
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40004400 	.word	0x40004400
 80046bc:	003d0900 	.word	0x003d0900
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	000002ff 	.word	0x000002ff
 80046c8:	000fffff 	.word	0x000fffff
 80046cc:	080081f0 	.word	0x080081f0
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80046d0:	f7fe fd22 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 80046d4:	0003      	movs	r3, r0
 80046d6:	005a      	lsls	r2, r3, #1
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	18d2      	adds	r2, r2, r3
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	0019      	movs	r1, r3
 80046e6:	0010      	movs	r0, r2
 80046e8:	f7fb fd0e 	bl	8000108 <__udivsi3>
 80046ec:	0003      	movs	r3, r0
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046f2:	e05e      	b.n	80047b2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046f4:	f7fe fd26 	bl	8003144 <HAL_RCC_GetPCLK2Freq>
 80046f8:	0003      	movs	r3, r0
 80046fa:	005a      	lsls	r2, r3, #1
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	18d2      	adds	r2, r2, r3
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	0019      	movs	r1, r3
 800470a:	0010      	movs	r0, r2
 800470c:	f7fb fcfc 	bl	8000108 <__udivsi3>
 8004710:	0003      	movs	r3, r0
 8004712:	b29b      	uxth	r3, r3
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004716:	e04c      	b.n	80047b2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004718:	4b8b      	ldr	r3, [pc, #556]	; (8004948 <UART_SetConfig+0x614>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2210      	movs	r2, #16
 800471e:	4013      	ands	r3, r2
 8004720:	d00e      	beq.n	8004740 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	085b      	lsrs	r3, r3, #1
 8004728:	4a88      	ldr	r2, [pc, #544]	; (800494c <UART_SetConfig+0x618>)
 800472a:	189a      	adds	r2, r3, r2
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	0019      	movs	r1, r3
 8004732:	0010      	movs	r0, r2
 8004734:	f7fb fce8 	bl	8000108 <__udivsi3>
 8004738:	0003      	movs	r3, r0
 800473a:	b29b      	uxth	r3, r3
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800473e:	e038      	b.n	80047b2 <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	085b      	lsrs	r3, r3, #1
 8004746:	4a82      	ldr	r2, [pc, #520]	; (8004950 <UART_SetConfig+0x61c>)
 8004748:	189a      	adds	r2, r3, r2
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	0019      	movs	r1, r3
 8004750:	0010      	movs	r0, r2
 8004752:	f7fb fcd9 	bl	8000108 <__udivsi3>
 8004756:	0003      	movs	r3, r0
 8004758:	b29b      	uxth	r3, r3
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800475c:	e029      	b.n	80047b2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800475e:	f7fe fc4d 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8004762:	0003      	movs	r3, r0
 8004764:	005a      	lsls	r2, r3, #1
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	085b      	lsrs	r3, r3, #1
 800476c:	18d2      	adds	r2, r2, r3
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	0019      	movs	r1, r3
 8004774:	0010      	movs	r0, r2
 8004776:	f7fb fcc7 	bl	8000108 <__udivsi3>
 800477a:	0003      	movs	r3, r0
 800477c:	b29b      	uxth	r3, r3
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004780:	e017      	b.n	80047b2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	2280      	movs	r2, #128	; 0x80
 800478a:	0252      	lsls	r2, r2, #9
 800478c:	189a      	adds	r2, r3, r2
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	0019      	movs	r1, r3
 8004794:	0010      	movs	r0, r2
 8004796:	f7fb fcb7 	bl	8000108 <__udivsi3>
 800479a:	0003      	movs	r3, r0
 800479c:	b29b      	uxth	r3, r3
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047a0:	e007      	b.n	80047b2 <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80047a2:	2313      	movs	r3, #19
 80047a4:	2218      	movs	r2, #24
 80047a6:	4694      	mov	ip, r2
 80047a8:	44bc      	add	ip, r7
 80047aa:	4463      	add	r3, ip
 80047ac:	2201      	movs	r2, #1
 80047ae:	701a      	strb	r2, [r3, #0]
        break;
 80047b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	2b0f      	cmp	r3, #15
 80047b6:	d920      	bls.n	80047fa <UART_SetConfig+0x4c6>
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	4a66      	ldr	r2, [pc, #408]	; (8004954 <UART_SetConfig+0x620>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d81c      	bhi.n	80047fa <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	200a      	movs	r0, #10
 80047c6:	2418      	movs	r4, #24
 80047c8:	193b      	adds	r3, r7, r4
 80047ca:	181b      	adds	r3, r3, r0
 80047cc:	210f      	movs	r1, #15
 80047ce:	438a      	bics	r2, r1
 80047d0:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	085b      	lsrs	r3, r3, #1
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2207      	movs	r2, #7
 80047da:	4013      	ands	r3, r2
 80047dc:	b299      	uxth	r1, r3
 80047de:	193b      	adds	r3, r7, r4
 80047e0:	181b      	adds	r3, r3, r0
 80047e2:	193a      	adds	r2, r7, r4
 80047e4:	1812      	adds	r2, r2, r0
 80047e6:	8812      	ldrh	r2, [r2, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	193a      	adds	r2, r7, r4
 80047f2:	1812      	adds	r2, r2, r0
 80047f4:	8812      	ldrh	r2, [r2, #0]
 80047f6:	60da      	str	r2, [r3, #12]
 80047f8:	e095      	b.n	8004926 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 80047fa:	2313      	movs	r3, #19
 80047fc:	2218      	movs	r2, #24
 80047fe:	4694      	mov	ip, r2
 8004800:	44bc      	add	ip, r7
 8004802:	4463      	add	r3, ip
 8004804:	2201      	movs	r2, #1
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e08d      	b.n	8004926 <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 800480a:	231b      	movs	r3, #27
 800480c:	2218      	movs	r2, #24
 800480e:	4694      	mov	ip, r2
 8004810:	44bc      	add	ip, r7
 8004812:	4463      	add	r3, ip
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b08      	cmp	r3, #8
 8004818:	d86a      	bhi.n	80048f0 <UART_SetConfig+0x5bc>
 800481a:	009a      	lsls	r2, r3, #2
 800481c:	4b4e      	ldr	r3, [pc, #312]	; (8004958 <UART_SetConfig+0x624>)
 800481e:	18d3      	adds	r3, r2, r3
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004824:	f7fe fc78 	bl	8003118 <HAL_RCC_GetPCLK1Freq>
 8004828:	0002      	movs	r2, r0
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	085b      	lsrs	r3, r3, #1
 8004830:	18d2      	adds	r2, r2, r3
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	0019      	movs	r1, r3
 8004838:	0010      	movs	r0, r2
 800483a:	f7fb fc65 	bl	8000108 <__udivsi3>
 800483e:	0003      	movs	r3, r0
 8004840:	b29b      	uxth	r3, r3
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004844:	e05c      	b.n	8004900 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004846:	f7fe fc7d 	bl	8003144 <HAL_RCC_GetPCLK2Freq>
 800484a:	0002      	movs	r2, r0
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	18d2      	adds	r2, r2, r3
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	0019      	movs	r1, r3
 800485a:	0010      	movs	r0, r2
 800485c:	f7fb fc54 	bl	8000108 <__udivsi3>
 8004860:	0003      	movs	r3, r0
 8004862:	b29b      	uxth	r3, r3
 8004864:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004866:	e04b      	b.n	8004900 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004868:	4b37      	ldr	r3, [pc, #220]	; (8004948 <UART_SetConfig+0x614>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2210      	movs	r2, #16
 800486e:	4013      	ands	r3, r2
 8004870:	d00e      	beq.n	8004890 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	085b      	lsrs	r3, r3, #1
 8004878:	4a38      	ldr	r2, [pc, #224]	; (800495c <UART_SetConfig+0x628>)
 800487a:	189a      	adds	r2, r3, r2
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	0019      	movs	r1, r3
 8004882:	0010      	movs	r0, r2
 8004884:	f7fb fc40 	bl	8000108 <__udivsi3>
 8004888:	0003      	movs	r3, r0
 800488a:	b29b      	uxth	r3, r3
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800488e:	e037      	b.n	8004900 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	4a32      	ldr	r2, [pc, #200]	; (8004960 <UART_SetConfig+0x62c>)
 8004898:	189a      	adds	r2, r3, r2
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	0019      	movs	r1, r3
 80048a0:	0010      	movs	r0, r2
 80048a2:	f7fb fc31 	bl	8000108 <__udivsi3>
 80048a6:	0003      	movs	r3, r0
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ac:	e028      	b.n	8004900 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80048ae:	f7fe fba5 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 80048b2:	0002      	movs	r2, r0
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	085b      	lsrs	r3, r3, #1
 80048ba:	18d2      	adds	r2, r2, r3
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	0019      	movs	r1, r3
 80048c2:	0010      	movs	r0, r2
 80048c4:	f7fb fc20 	bl	8000108 <__udivsi3>
 80048c8:	0003      	movs	r3, r0
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ce:	e017      	b.n	8004900 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	085b      	lsrs	r3, r3, #1
 80048d6:	2280      	movs	r2, #128	; 0x80
 80048d8:	0212      	lsls	r2, r2, #8
 80048da:	189a      	adds	r2, r3, r2
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	0019      	movs	r1, r3
 80048e2:	0010      	movs	r0, r2
 80048e4:	f7fb fc10 	bl	8000108 <__udivsi3>
 80048e8:	0003      	movs	r3, r0
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048ee:	e007      	b.n	8004900 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80048f0:	2313      	movs	r3, #19
 80048f2:	2218      	movs	r2, #24
 80048f4:	4694      	mov	ip, r2
 80048f6:	44bc      	add	ip, r7
 80048f8:	4463      	add	r3, ip
 80048fa:	2201      	movs	r2, #1
 80048fc:	701a      	strb	r2, [r3, #0]
        break;
 80048fe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	2b0f      	cmp	r3, #15
 8004904:	d908      	bls.n	8004918 <UART_SetConfig+0x5e4>
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	4a12      	ldr	r2, [pc, #72]	; (8004954 <UART_SetConfig+0x620>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d804      	bhi.n	8004918 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	e006      	b.n	8004926 <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8004918:	2313      	movs	r3, #19
 800491a:	2218      	movs	r2, #24
 800491c:	4694      	mov	ip, r2
 800491e:	44bc      	add	ip, r7
 8004920:	4463      	add	r3, ip
 8004922:	2201      	movs	r2, #1
 8004924:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	2200      	movs	r2, #0
 800492a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2200      	movs	r2, #0
 8004930:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004932:	2313      	movs	r3, #19
 8004934:	2218      	movs	r2, #24
 8004936:	4694      	mov	ip, r2
 8004938:	44bc      	add	ip, r7
 800493a:	4463      	add	r3, ip
 800493c:	781b      	ldrb	r3, [r3, #0]
}
 800493e:	0018      	movs	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	b00e      	add	sp, #56	; 0x38
 8004944:	bdb0      	pop	{r4, r5, r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	40021000 	.word	0x40021000
 800494c:	007a1200 	.word	0x007a1200
 8004950:	01e84800 	.word	0x01e84800
 8004954:	0000ffff 	.word	0x0000ffff
 8004958:	08008214 	.word	0x08008214
 800495c:	003d0900 	.word	0x003d0900
 8004960:	00f42400 	.word	0x00f42400

08004964 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	2201      	movs	r2, #1
 8004972:	4013      	ands	r3, r2
 8004974:	d00b      	beq.n	800498e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a4a      	ldr	r2, [pc, #296]	; (8004aa8 <UART_AdvFeatureConfig+0x144>)
 800497e:	4013      	ands	r3, r2
 8004980:	0019      	movs	r1, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	2202      	movs	r2, #2
 8004994:	4013      	ands	r3, r2
 8004996:	d00b      	beq.n	80049b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4a43      	ldr	r2, [pc, #268]	; (8004aac <UART_AdvFeatureConfig+0x148>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	2204      	movs	r2, #4
 80049b6:	4013      	ands	r3, r2
 80049b8:	d00b      	beq.n	80049d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	4a3b      	ldr	r2, [pc, #236]	; (8004ab0 <UART_AdvFeatureConfig+0x14c>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	2208      	movs	r2, #8
 80049d8:	4013      	ands	r3, r2
 80049da:	d00b      	beq.n	80049f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4a34      	ldr	r2, [pc, #208]	; (8004ab4 <UART_AdvFeatureConfig+0x150>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	0019      	movs	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	2210      	movs	r2, #16
 80049fa:	4013      	ands	r3, r2
 80049fc:	d00b      	beq.n	8004a16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	4a2c      	ldr	r2, [pc, #176]	; (8004ab8 <UART_AdvFeatureConfig+0x154>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	0019      	movs	r1, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d00b      	beq.n	8004a38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	4a25      	ldr	r2, [pc, #148]	; (8004abc <UART_AdvFeatureConfig+0x158>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	0019      	movs	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	2240      	movs	r2, #64	; 0x40
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d01d      	beq.n	8004a7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	4a1d      	ldr	r2, [pc, #116]	; (8004ac0 <UART_AdvFeatureConfig+0x15c>)
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	0019      	movs	r1, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	035b      	lsls	r3, r3, #13
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d10b      	bne.n	8004a7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4a15      	ldr	r2, [pc, #84]	; (8004ac4 <UART_AdvFeatureConfig+0x160>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	0019      	movs	r1, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2280      	movs	r2, #128	; 0x80
 8004a84:	4013      	ands	r3, r2
 8004a86:	d00b      	beq.n	8004aa0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <UART_AdvFeatureConfig+0x164>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	0019      	movs	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	605a      	str	r2, [r3, #4]
  }
}
 8004aa0:	46c0      	nop			; (mov r8, r8)
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b002      	add	sp, #8
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	fffdffff 	.word	0xfffdffff
 8004aac:	fffeffff 	.word	0xfffeffff
 8004ab0:	fffbffff 	.word	0xfffbffff
 8004ab4:	ffff7fff 	.word	0xffff7fff
 8004ab8:	ffffefff 	.word	0xffffefff
 8004abc:	ffffdfff 	.word	0xffffdfff
 8004ac0:	ffefffff 	.word	0xffefffff
 8004ac4:	ff9fffff 	.word	0xff9fffff
 8004ac8:	fff7ffff 	.word	0xfff7ffff

08004acc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af02      	add	r7, sp, #8
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004ada:	f7fc fa99 	bl	8001010 <HAL_GetTick>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b08      	cmp	r3, #8
 8004aee:	d10d      	bne.n	8004b0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	2380      	movs	r3, #128	; 0x80
 8004af4:	0399      	lsls	r1, r3, #14
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <UART_CheckIdleState+0x88>)
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	0013      	movs	r3, r2
 8004afe:	2200      	movs	r2, #0
 8004b00:	f000 f82a 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 8004b04:	1e03      	subs	r3, r0, #0
 8004b06:	d001      	beq.n	8004b0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e01f      	b.n	8004b4c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2204      	movs	r2, #4
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d10d      	bne.n	8004b36 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	03d9      	lsls	r1, r3, #15
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <UART_CheckIdleState+0x88>)
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	0013      	movs	r3, r2
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f000 f815 	bl	8004b58 <UART_WaitOnFlagUntilTimeout>
 8004b2e:	1e03      	subs	r3, r0, #0
 8004b30:	d001      	beq.n	8004b36 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e00a      	b.n	8004b4c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2220      	movs	r2, #32
 8004b3a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2270      	movs	r2, #112	; 0x70
 8004b46:	2100      	movs	r1, #0
 8004b48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b004      	add	sp, #16
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	01ffffff 	.word	0x01ffffff

08004b58 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	1dfb      	adds	r3, r7, #7
 8004b66:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b68:	e029      	b.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	d026      	beq.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b70:	f7fc fa4e 	bl	8001010 <HAL_GetTick>
 8004b74:	0002      	movs	r2, r0
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d302      	bcc.n	8004b86 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d11b      	bne.n	8004bbe <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4915      	ldr	r1, [pc, #84]	; (8004be8 <UART_WaitOnFlagUntilTimeout+0x90>)
 8004b92:	400a      	ands	r2, r1
 8004b94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	438a      	bics	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2270      	movs	r2, #112	; 0x70
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e00f      	b.n	8004bde <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	425a      	negs	r2, r3
 8004bce:	4153      	adcs	r3, r2
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	001a      	movs	r2, r3
 8004bd4:	1dfb      	adds	r3, r7, #7
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d0c6      	beq.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	0018      	movs	r0, r3
 8004be0:	46bd      	mov	sp, r7
 8004be2:	b004      	add	sp, #16
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	fffffe5f 	.word	0xfffffe5f

08004bec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bf4:	210e      	movs	r1, #14
 8004bf6:	187b      	adds	r3, r7, r1
 8004bf8:	4a08      	ldr	r2, [pc, #32]	; (8004c1c <USB_EnableGlobalInt+0x30>)
 8004bfa:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2240      	movs	r2, #64	; 0x40
 8004c00:	5a9b      	ldrh	r3, [r3, r2]
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	187b      	adds	r3, r7, r1
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	b299      	uxth	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2240      	movs	r2, #64	; 0x40
 8004c10:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	0018      	movs	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	b004      	add	sp, #16
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	ffffbf80 	.word	0xffffbf80

08004c20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c28:	210e      	movs	r1, #14
 8004c2a:	187b      	adds	r3, r7, r1
 8004c2c:	4a0b      	ldr	r2, [pc, #44]	; (8004c5c <USB_DisableGlobalInt+0x3c>)
 8004c2e:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2240      	movs	r2, #64	; 0x40
 8004c34:	5a9b      	ldrh	r3, [r3, r2]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	b21b      	sxth	r3, r3
 8004c3a:	187a      	adds	r2, r7, r1
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	5e52      	ldrsh	r2, [r2, r1]
 8004c40:	43d2      	mvns	r2, r2
 8004c42:	b212      	sxth	r2, r2
 8004c44:	4013      	ands	r3, r2
 8004c46:	b21b      	sxth	r3, r3
 8004c48:	b299      	uxth	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2240      	movs	r2, #64	; 0x40
 8004c4e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b004      	add	sp, #16
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	ffffbf80 	.word	0xffffbf80

08004c60 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c60:	b084      	sub	sp, #16
 8004c62:	b590      	push	{r4, r7, lr}
 8004c64:	46c6      	mov	lr, r8
 8004c66:	b500      	push	{lr}
 8004c68:	b082      	sub	sp, #8
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	2004      	movs	r0, #4
 8004c70:	2410      	movs	r4, #16
 8004c72:	46a4      	mov	ip, r4
 8004c74:	2408      	movs	r4, #8
 8004c76:	46a0      	mov	r8, r4
 8004c78:	44b8      	add	r8, r7
 8004c7a:	44c4      	add	ip, r8
 8004c7c:	4460      	add	r0, ip
 8004c7e:	6001      	str	r1, [r0, #0]
 8004c80:	6042      	str	r2, [r0, #4]
 8004c82:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2240      	movs	r2, #64	; 0x40
 8004c88:	2101      	movs	r1, #1
 8004c8a:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2240      	movs	r2, #64	; 0x40
 8004c90:	2100      	movs	r1, #0
 8004c92:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2244      	movs	r2, #68	; 0x44
 8004c98:	2100      	movs	r1, #0
 8004c9a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2250      	movs	r2, #80	; 0x50
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f7ff ffa0 	bl	8004bec <USB_EnableGlobalInt>

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	0018      	movs	r0, r3
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	b002      	add	sp, #8
 8004cb4:	bc04      	pop	{r2}
 8004cb6:	4690      	mov	r8, r2
 8004cb8:	bc90      	pop	{r4, r7}
 8004cba:	bc08      	pop	{r3}
 8004cbc:	b004      	add	sp, #16
 8004cbe:	4718      	bx	r3

08004cc0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cc0:	b590      	push	{r4, r7, lr}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cca:	2317      	movs	r3, #23
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	18d3      	adds	r3, r2, r3
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	2314      	movs	r3, #20
 8004ce2:	18fb      	adds	r3, r7, r3
 8004ce4:	49ae      	ldr	r1, [pc, #696]	; (8004fa0 <USB_ActivateEndpoint+0x2e0>)
 8004ce6:	400a      	ands	r2, r1
 8004ce8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	78db      	ldrb	r3, [r3, #3]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d020      	beq.n	8004d34 <USB_ActivateEndpoint+0x74>
 8004cf2:	dc02      	bgt.n	8004cfa <USB_ActivateEndpoint+0x3a>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <USB_ActivateEndpoint+0x44>
 8004cf8:	e025      	b.n	8004d46 <USB_ActivateEndpoint+0x86>
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d00b      	beq.n	8004d16 <USB_ActivateEndpoint+0x56>
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d00f      	beq.n	8004d22 <USB_ActivateEndpoint+0x62>
 8004d02:	e020      	b.n	8004d46 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d04:	2214      	movs	r2, #20
 8004d06:	18bb      	adds	r3, r7, r2
 8004d08:	18ba      	adds	r2, r7, r2
 8004d0a:	8812      	ldrh	r2, [r2, #0]
 8004d0c:	2180      	movs	r1, #128	; 0x80
 8004d0e:	0089      	lsls	r1, r1, #2
 8004d10:	430a      	orrs	r2, r1
 8004d12:	801a      	strh	r2, [r3, #0]
      break;
 8004d14:	e01c      	b.n	8004d50 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8004d16:	2214      	movs	r2, #20
 8004d18:	18bb      	adds	r3, r7, r2
 8004d1a:	18ba      	adds	r2, r7, r2
 8004d1c:	8812      	ldrh	r2, [r2, #0]
 8004d1e:	801a      	strh	r2, [r3, #0]
      break;
 8004d20:	e016      	b.n	8004d50 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d22:	2214      	movs	r2, #20
 8004d24:	18bb      	adds	r3, r7, r2
 8004d26:	18ba      	adds	r2, r7, r2
 8004d28:	8812      	ldrh	r2, [r2, #0]
 8004d2a:	21c0      	movs	r1, #192	; 0xc0
 8004d2c:	00c9      	lsls	r1, r1, #3
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	801a      	strh	r2, [r3, #0]
      break;
 8004d32:	e00d      	b.n	8004d50 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d34:	2214      	movs	r2, #20
 8004d36:	18bb      	adds	r3, r7, r2
 8004d38:	18ba      	adds	r2, r7, r2
 8004d3a:	8812      	ldrh	r2, [r2, #0]
 8004d3c:	2180      	movs	r1, #128	; 0x80
 8004d3e:	00c9      	lsls	r1, r1, #3
 8004d40:	430a      	orrs	r2, r1
 8004d42:	801a      	strh	r2, [r3, #0]
      break;
 8004d44:	e004      	b.n	8004d50 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8004d46:	2317      	movs	r3, #23
 8004d48:	18fb      	adds	r3, r7, r3
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
      break;
 8004d4e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	18d3      	adds	r3, r2, r3
 8004d5a:	2214      	movs	r2, #20
 8004d5c:	18ba      	adds	r2, r7, r2
 8004d5e:	8812      	ldrh	r2, [r2, #0]
 8004d60:	4990      	ldr	r1, [pc, #576]	; (8004fa4 <USB_ActivateEndpoint+0x2e4>)
 8004d62:	430a      	orrs	r2, r1
 8004d64:	b292      	uxth	r2, r2
 8004d66:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	18d3      	adds	r3, r2, r3
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	b21b      	sxth	r3, r3
 8004d78:	4a8b      	ldr	r2, [pc, #556]	; (8004fa8 <USB_ActivateEndpoint+0x2e8>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	b21a      	sxth	r2, r3
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	b21b      	sxth	r3, r3
 8004d84:	4313      	orrs	r3, r2
 8004d86:	b21b      	sxth	r3, r3
 8004d88:	b29c      	uxth	r4, r3
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	18d3      	adds	r3, r2, r3
 8004d94:	4a83      	ldr	r2, [pc, #524]	; (8004fa4 <USB_ActivateEndpoint+0x2e4>)
 8004d96:	4322      	orrs	r2, r4
 8004d98:	b292      	uxth	r2, r2
 8004d9a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	7b1b      	ldrb	r3, [r3, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d000      	beq.n	8004da6 <USB_ActivateEndpoint+0xe6>
 8004da4:	e112      	b.n	8004fcc <USB_ActivateEndpoint+0x30c>
  {
    if (ep->is_in != 0U)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	785b      	ldrb	r3, [r3, #1]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d062      	beq.n	8004e74 <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dae:	687c      	ldr	r4, [r7, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2250      	movs	r2, #80	; 0x50
 8004db4:	5a9b      	ldrh	r3, [r3, r2]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	18e4      	adds	r4, r4, r3
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	18e3      	adds	r3, r4, r3
 8004dc2:	2280      	movs	r2, #128	; 0x80
 8004dc4:	00d2      	lsls	r2, r2, #3
 8004dc6:	4694      	mov	ip, r2
 8004dc8:	4463      	add	r3, ip
 8004dca:	001c      	movs	r4, r3
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	88db      	ldrh	r3, [r3, #6]
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	18db      	adds	r3, r3, r3
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	18d3      	adds	r3, r2, r3
 8004de4:	881b      	ldrh	r3, [r3, #0]
 8004de6:	b29c      	uxth	r4, r3
 8004de8:	0022      	movs	r2, r4
 8004dea:	2340      	movs	r3, #64	; 0x40
 8004dec:	4013      	ands	r3, r2
 8004dee:	d012      	beq.n	8004e16 <USB_ActivateEndpoint+0x156>
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	18d3      	adds	r3, r2, r3
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	4a6a      	ldr	r2, [pc, #424]	; (8004fa8 <USB_ActivateEndpoint+0x2e8>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	b29c      	uxth	r4, r3
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	18d3      	adds	r3, r2, r3
 8004e0e:	4a67      	ldr	r2, [pc, #412]	; (8004fac <USB_ActivateEndpoint+0x2ec>)
 8004e10:	4322      	orrs	r2, r4
 8004e12:	b292      	uxth	r2, r2
 8004e14:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	78db      	ldrb	r3, [r3, #3]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d016      	beq.n	8004e4c <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	18d3      	adds	r3, r2, r3
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	4a60      	ldr	r2, [pc, #384]	; (8004fb0 <USB_ActivateEndpoint+0x2f0>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	b29c      	uxth	r4, r3
 8004e32:	2320      	movs	r3, #32
 8004e34:	4063      	eors	r3, r4
 8004e36:	b29c      	uxth	r4, r3
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	18d3      	adds	r3, r2, r3
 8004e42:	4a58      	ldr	r2, [pc, #352]	; (8004fa4 <USB_ActivateEndpoint+0x2e4>)
 8004e44:	4322      	orrs	r2, r4
 8004e46:	b292      	uxth	r2, r2
 8004e48:	801a      	strh	r2, [r3, #0]
 8004e4a:	e212      	b.n	8005272 <USB_ActivateEndpoint+0x5b2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	18d3      	adds	r3, r2, r3
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	4a55      	ldr	r2, [pc, #340]	; (8004fb0 <USB_ActivateEndpoint+0x2f0>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	b29c      	uxth	r4, r3
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	18d3      	adds	r3, r2, r3
 8004e6a:	4a4e      	ldr	r2, [pc, #312]	; (8004fa4 <USB_ActivateEndpoint+0x2e4>)
 8004e6c:	4322      	orrs	r2, r4
 8004e6e:	b292      	uxth	r2, r2
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	e1fe      	b.n	8005272 <USB_ActivateEndpoint+0x5b2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004e74:	687c      	ldr	r4, [r7, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2250      	movs	r2, #80	; 0x50
 8004e7a:	5a9b      	ldrh	r3, [r3, r2]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	18e4      	adds	r4, r4, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	18e3      	adds	r3, r4, r3
 8004e88:	4a4a      	ldr	r2, [pc, #296]	; (8004fb4 <USB_ActivateEndpoint+0x2f4>)
 8004e8a:	4694      	mov	ip, r2
 8004e8c:	4463      	add	r3, ip
 8004e8e:	001c      	movs	r4, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	88db      	ldrh	r3, [r3, #6]
 8004e94:	085b      	lsrs	r3, r3, #1
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	18db      	adds	r3, r3, r3
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004e9e:	687c      	ldr	r4, [r7, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2250      	movs	r2, #80	; 0x50
 8004ea4:	5a9b      	ldrh	r3, [r3, r2]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	18e4      	adds	r4, r4, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	18e3      	adds	r3, r4, r3
 8004eb2:	4a41      	ldr	r2, [pc, #260]	; (8004fb8 <USB_ActivateEndpoint+0x2f8>)
 8004eb4:	4694      	mov	ip, r2
 8004eb6:	4463      	add	r3, ip
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10e      	bne.n	8004ee0 <USB_ActivateEndpoint+0x220>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	4a3d      	ldr	r2, [pc, #244]	; (8004fbc <USB_ActivateEndpoint+0x2fc>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	801a      	strh	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	4a3a      	ldr	r2, [pc, #232]	; (8004fc0 <USB_ActivateEndpoint+0x300>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	e023      	b.n	8004f28 <USB_ActivateEndpoint+0x268>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	2b3d      	cmp	r3, #61	; 0x3d
 8004ee6:	d812      	bhi.n	8004f0e <USB_ActivateEndpoint+0x24e>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d002      	beq.n	8004f00 <USB_ActivateEndpoint+0x240>
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	3301      	adds	r3, #1
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	029b      	lsls	r3, r3, #10
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	e00c      	b.n	8004f28 <USB_ActivateEndpoint+0x268>
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	029b      	lsls	r3, r3, #10
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	4a28      	ldr	r2, [pc, #160]	; (8004fc0 <USB_ActivateEndpoint+0x300>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	18d3      	adds	r3, r2, r3
 8004f32:	881b      	ldrh	r3, [r3, #0]
 8004f34:	b29c      	uxth	r4, r3
 8004f36:	0022      	movs	r2, r4
 8004f38:	2380      	movs	r3, #128	; 0x80
 8004f3a:	01db      	lsls	r3, r3, #7
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d012      	beq.n	8004f66 <USB_ActivateEndpoint+0x2a6>
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	18d3      	adds	r3, r2, r3
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	4a16      	ldr	r2, [pc, #88]	; (8004fa8 <USB_ActivateEndpoint+0x2e8>)
 8004f50:	4013      	ands	r3, r2
 8004f52:	b29c      	uxth	r4, r3
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	18d3      	adds	r3, r2, r3
 8004f5e:	4a19      	ldr	r2, [pc, #100]	; (8004fc4 <USB_ActivateEndpoint+0x304>)
 8004f60:	4322      	orrs	r2, r4
 8004f62:	b292      	uxth	r2, r2
 8004f64:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	18d3      	adds	r3, r2, r3
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <USB_ActivateEndpoint+0x308>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	b29c      	uxth	r4, r3
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	015b      	lsls	r3, r3, #5
 8004f7e:	4063      	eors	r3, r4
 8004f80:	b29c      	uxth	r4, r3
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	019b      	lsls	r3, r3, #6
 8004f86:	4063      	eors	r3, r4
 8004f88:	b29c      	uxth	r4, r3
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	18d3      	adds	r3, r2, r3
 8004f94:	4a03      	ldr	r2, [pc, #12]	; (8004fa4 <USB_ActivateEndpoint+0x2e4>)
 8004f96:	4322      	orrs	r2, r4
 8004f98:	b292      	uxth	r2, r2
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	e169      	b.n	8005272 <USB_ActivateEndpoint+0x5b2>
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	ffff898f 	.word	0xffff898f
 8004fa4:	ffff8080 	.word	0xffff8080
 8004fa8:	ffff8f8f 	.word	0xffff8f8f
 8004fac:	ffff80c0 	.word	0xffff80c0
 8004fb0:	ffff8fbf 	.word	0xffff8fbf
 8004fb4:	00000404 	.word	0x00000404
 8004fb8:	00000406 	.word	0x00000406
 8004fbc:	ffff83ff 	.word	0xffff83ff
 8004fc0:	ffff8000 	.word	0xffff8000
 8004fc4:	ffffc080 	.word	0xffffc080
 8004fc8:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	18d3      	adds	r3, r2, r3
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	4aa9      	ldr	r2, [pc, #676]	; (8005280 <USB_ActivateEndpoint+0x5c0>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	b29c      	uxth	r4, r3
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	18d3      	adds	r3, r2, r3
 8004fea:	4aa6      	ldr	r2, [pc, #664]	; (8005284 <USB_ActivateEndpoint+0x5c4>)
 8004fec:	4322      	orrs	r2, r4
 8004fee:	b292      	uxth	r2, r2
 8004ff0:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ff2:	687c      	ldr	r4, [r7, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2250      	movs	r2, #80	; 0x50
 8004ff8:	5a9b      	ldrh	r3, [r3, r2]
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	18e4      	adds	r4, r4, r3
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	18e3      	adds	r3, r4, r3
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	00d2      	lsls	r2, r2, #3
 800500a:	4694      	mov	ip, r2
 800500c:	4463      	add	r3, ip
 800500e:	001c      	movs	r4, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	891b      	ldrh	r3, [r3, #8]
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	b29b      	uxth	r3, r3
 8005018:	18db      	adds	r3, r3, r3
 800501a:	b29b      	uxth	r3, r3
 800501c:	8023      	strh	r3, [r4, #0]
 800501e:	687c      	ldr	r4, [r7, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2250      	movs	r2, #80	; 0x50
 8005024:	5a9b      	ldrh	r3, [r3, r2]
 8005026:	b29b      	uxth	r3, r3
 8005028:	18e4      	adds	r4, r4, r3
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	18e3      	adds	r3, r4, r3
 8005032:	4a95      	ldr	r2, [pc, #596]	; (8005288 <USB_ActivateEndpoint+0x5c8>)
 8005034:	4694      	mov	ip, r2
 8005036:	4463      	add	r3, ip
 8005038:	001c      	movs	r4, r3
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	895b      	ldrh	r3, [r3, #10]
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	b29b      	uxth	r3, r3
 8005042:	18db      	adds	r3, r3, r3
 8005044:	b29b      	uxth	r3, r3
 8005046:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d000      	beq.n	8005052 <USB_ActivateEndpoint+0x392>
 8005050:	e07e      	b.n	8005150 <USB_ActivateEndpoint+0x490>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	18d3      	adds	r3, r2, r3
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29c      	uxth	r4, r3
 8005060:	0022      	movs	r2, r4
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	01db      	lsls	r3, r3, #7
 8005066:	4013      	ands	r3, r2
 8005068:	d012      	beq.n	8005090 <USB_ActivateEndpoint+0x3d0>
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	18d3      	adds	r3, r2, r3
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	4a81      	ldr	r2, [pc, #516]	; (8005280 <USB_ActivateEndpoint+0x5c0>)
 800507a:	4013      	ands	r3, r2
 800507c:	b29c      	uxth	r4, r3
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	18d3      	adds	r3, r2, r3
 8005088:	4a80      	ldr	r2, [pc, #512]	; (800528c <USB_ActivateEndpoint+0x5cc>)
 800508a:	4322      	orrs	r2, r4
 800508c:	b292      	uxth	r2, r2
 800508e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	18d3      	adds	r3, r2, r3
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29c      	uxth	r4, r3
 800509e:	0022      	movs	r2, r4
 80050a0:	2340      	movs	r3, #64	; 0x40
 80050a2:	4013      	ands	r3, r2
 80050a4:	d012      	beq.n	80050cc <USB_ActivateEndpoint+0x40c>
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	18d3      	adds	r3, r2, r3
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	4a72      	ldr	r2, [pc, #456]	; (8005280 <USB_ActivateEndpoint+0x5c0>)
 80050b6:	4013      	ands	r3, r2
 80050b8:	b29c      	uxth	r4, r3
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	18d3      	adds	r3, r2, r3
 80050c4:	4a72      	ldr	r2, [pc, #456]	; (8005290 <USB_ActivateEndpoint+0x5d0>)
 80050c6:	4322      	orrs	r2, r4
 80050c8:	b292      	uxth	r2, r2
 80050ca:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	18d3      	adds	r3, r2, r3
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	4a69      	ldr	r2, [pc, #420]	; (8005280 <USB_ActivateEndpoint+0x5c0>)
 80050dc:	4013      	ands	r3, r2
 80050de:	b29c      	uxth	r4, r3
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	18d3      	adds	r3, r2, r3
 80050ea:	4a69      	ldr	r2, [pc, #420]	; (8005290 <USB_ActivateEndpoint+0x5d0>)
 80050ec:	4322      	orrs	r2, r4
 80050ee:	b292      	uxth	r2, r2
 80050f0:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	18d3      	adds	r3, r2, r3
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	4a64      	ldr	r2, [pc, #400]	; (8005294 <USB_ActivateEndpoint+0x5d4>)
 8005102:	4013      	ands	r3, r2
 8005104:	b29c      	uxth	r4, r3
 8005106:	2380      	movs	r3, #128	; 0x80
 8005108:	015b      	lsls	r3, r3, #5
 800510a:	4063      	eors	r3, r4
 800510c:	b29c      	uxth	r4, r3
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	019b      	lsls	r3, r3, #6
 8005112:	4063      	eors	r3, r4
 8005114:	b29c      	uxth	r4, r3
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	18d3      	adds	r3, r2, r3
 8005120:	4a5d      	ldr	r2, [pc, #372]	; (8005298 <USB_ActivateEndpoint+0x5d8>)
 8005122:	4322      	orrs	r2, r4
 8005124:	b292      	uxth	r2, r2
 8005126:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	18d3      	adds	r3, r2, r3
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29b      	uxth	r3, r3
 8005136:	4a59      	ldr	r2, [pc, #356]	; (800529c <USB_ActivateEndpoint+0x5dc>)
 8005138:	4013      	ands	r3, r2
 800513a:	b29c      	uxth	r4, r3
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	18d3      	adds	r3, r2, r3
 8005146:	4a54      	ldr	r2, [pc, #336]	; (8005298 <USB_ActivateEndpoint+0x5d8>)
 8005148:	4322      	orrs	r2, r4
 800514a:	b292      	uxth	r2, r2
 800514c:	801a      	strh	r2, [r3, #0]
 800514e:	e090      	b.n	8005272 <USB_ActivateEndpoint+0x5b2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	18d3      	adds	r3, r2, r3
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29c      	uxth	r4, r3
 800515e:	0022      	movs	r2, r4
 8005160:	2380      	movs	r3, #128	; 0x80
 8005162:	01db      	lsls	r3, r3, #7
 8005164:	4013      	ands	r3, r2
 8005166:	d012      	beq.n	800518e <USB_ActivateEndpoint+0x4ce>
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	18d3      	adds	r3, r2, r3
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	b29b      	uxth	r3, r3
 8005176:	4a42      	ldr	r2, [pc, #264]	; (8005280 <USB_ActivateEndpoint+0x5c0>)
 8005178:	4013      	ands	r3, r2
 800517a:	b29c      	uxth	r4, r3
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	18d3      	adds	r3, r2, r3
 8005186:	4a41      	ldr	r2, [pc, #260]	; (800528c <USB_ActivateEndpoint+0x5cc>)
 8005188:	4322      	orrs	r2, r4
 800518a:	b292      	uxth	r2, r2
 800518c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	18d3      	adds	r3, r2, r3
 8005198:	881b      	ldrh	r3, [r3, #0]
 800519a:	b29c      	uxth	r4, r3
 800519c:	0022      	movs	r2, r4
 800519e:	2340      	movs	r3, #64	; 0x40
 80051a0:	4013      	ands	r3, r2
 80051a2:	d012      	beq.n	80051ca <USB_ActivateEndpoint+0x50a>
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	18d3      	adds	r3, r2, r3
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	4a33      	ldr	r2, [pc, #204]	; (8005280 <USB_ActivateEndpoint+0x5c0>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	b29c      	uxth	r4, r3
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	18d3      	adds	r3, r2, r3
 80051c2:	4a33      	ldr	r2, [pc, #204]	; (8005290 <USB_ActivateEndpoint+0x5d0>)
 80051c4:	4322      	orrs	r2, r4
 80051c6:	b292      	uxth	r2, r2
 80051c8:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	18d3      	adds	r3, r2, r3
 80051d4:	881b      	ldrh	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	4a29      	ldr	r2, [pc, #164]	; (8005280 <USB_ActivateEndpoint+0x5c0>)
 80051da:	4013      	ands	r3, r2
 80051dc:	b29c      	uxth	r4, r3
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	18d3      	adds	r3, r2, r3
 80051e8:	4a28      	ldr	r2, [pc, #160]	; (800528c <USB_ActivateEndpoint+0x5cc>)
 80051ea:	4322      	orrs	r2, r4
 80051ec:	b292      	uxth	r2, r2
 80051ee:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	78db      	ldrb	r3, [r3, #3]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d016      	beq.n	8005226 <USB_ActivateEndpoint+0x566>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	18d3      	adds	r3, r2, r3
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	4a25      	ldr	r2, [pc, #148]	; (800529c <USB_ActivateEndpoint+0x5dc>)
 8005208:	4013      	ands	r3, r2
 800520a:	b29c      	uxth	r4, r3
 800520c:	2320      	movs	r3, #32
 800520e:	4063      	eors	r3, r4
 8005210:	b29c      	uxth	r4, r3
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	18d3      	adds	r3, r2, r3
 800521c:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <USB_ActivateEndpoint+0x5d8>)
 800521e:	4322      	orrs	r2, r4
 8005220:	b292      	uxth	r2, r2
 8005222:	801a      	strh	r2, [r3, #0]
 8005224:	e012      	b.n	800524c <USB_ActivateEndpoint+0x58c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	18d3      	adds	r3, r2, r3
 8005230:	881b      	ldrh	r3, [r3, #0]
 8005232:	b29b      	uxth	r3, r3
 8005234:	4a19      	ldr	r2, [pc, #100]	; (800529c <USB_ActivateEndpoint+0x5dc>)
 8005236:	4013      	ands	r3, r2
 8005238:	b29c      	uxth	r4, r3
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	18d3      	adds	r3, r2, r3
 8005244:	4a14      	ldr	r2, [pc, #80]	; (8005298 <USB_ActivateEndpoint+0x5d8>)
 8005246:	4322      	orrs	r2, r4
 8005248:	b292      	uxth	r2, r2
 800524a:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	18d3      	adds	r3, r2, r3
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	4a0e      	ldr	r2, [pc, #56]	; (8005294 <USB_ActivateEndpoint+0x5d4>)
 800525c:	4013      	ands	r3, r2
 800525e:	b29c      	uxth	r4, r3
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	18d3      	adds	r3, r2, r3
 800526a:	4a0b      	ldr	r2, [pc, #44]	; (8005298 <USB_ActivateEndpoint+0x5d8>)
 800526c:	4322      	orrs	r2, r4
 800526e:	b292      	uxth	r2, r2
 8005270:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8005272:	2317      	movs	r3, #23
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	781b      	ldrb	r3, [r3, #0]
}
 8005278:	0018      	movs	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	b007      	add	sp, #28
 800527e:	bd90      	pop	{r4, r7, pc}
 8005280:	ffff8f8f 	.word	0xffff8f8f
 8005284:	ffff8180 	.word	0xffff8180
 8005288:	00000404 	.word	0x00000404
 800528c:	ffffc080 	.word	0xffffc080
 8005290:	ffff80c0 	.word	0xffff80c0
 8005294:	ffffbf8f 	.word	0xffffbf8f
 8005298:	ffff8080 	.word	0xffff8080
 800529c:	ffff8fbf 	.word	0xffff8fbf

080052a0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	7b1b      	ldrb	r3, [r3, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d168      	bne.n	8005384 <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	785b      	ldrb	r3, [r3, #1]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d031      	beq.n	800531e <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	18d3      	adds	r3, r2, r3
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29c      	uxth	r4, r3
 80052c8:	0022      	movs	r2, r4
 80052ca:	2340      	movs	r3, #64	; 0x40
 80052cc:	4013      	ands	r3, r2
 80052ce:	d012      	beq.n	80052f6 <USB_DeactivateEndpoint+0x56>
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	18d3      	adds	r3, r2, r3
 80052da:	881b      	ldrh	r3, [r3, #0]
 80052dc:	b29b      	uxth	r3, r3
 80052de:	4aa5      	ldr	r2, [pc, #660]	; (8005574 <USB_DeactivateEndpoint+0x2d4>)
 80052e0:	4013      	ands	r3, r2
 80052e2:	b29c      	uxth	r4, r3
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	18d3      	adds	r3, r2, r3
 80052ee:	4aa2      	ldr	r2, [pc, #648]	; (8005578 <USB_DeactivateEndpoint+0x2d8>)
 80052f0:	4322      	orrs	r2, r4
 80052f2:	b292      	uxth	r2, r2
 80052f4:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	4a9d      	ldr	r2, [pc, #628]	; (800557c <USB_DeactivateEndpoint+0x2dc>)
 8005306:	4013      	ands	r3, r2
 8005308:	b29c      	uxth	r4, r3
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	18d3      	adds	r3, r2, r3
 8005314:	4a9a      	ldr	r2, [pc, #616]	; (8005580 <USB_DeactivateEndpoint+0x2e0>)
 8005316:	4322      	orrs	r2, r4
 8005318:	b292      	uxth	r2, r2
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	e124      	b.n	8005568 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	18d3      	adds	r3, r2, r3
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29c      	uxth	r4, r3
 800532c:	0022      	movs	r2, r4
 800532e:	2380      	movs	r3, #128	; 0x80
 8005330:	01db      	lsls	r3, r3, #7
 8005332:	4013      	ands	r3, r2
 8005334:	d012      	beq.n	800535c <USB_DeactivateEndpoint+0xbc>
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	18d3      	adds	r3, r2, r3
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	4a8b      	ldr	r2, [pc, #556]	; (8005574 <USB_DeactivateEndpoint+0x2d4>)
 8005346:	4013      	ands	r3, r2
 8005348:	b29c      	uxth	r4, r3
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	18d3      	adds	r3, r2, r3
 8005354:	4a8b      	ldr	r2, [pc, #556]	; (8005584 <USB_DeactivateEndpoint+0x2e4>)
 8005356:	4322      	orrs	r2, r4
 8005358:	b292      	uxth	r2, r2
 800535a:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	18d3      	adds	r3, r2, r3
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	b29b      	uxth	r3, r3
 800536a:	4a87      	ldr	r2, [pc, #540]	; (8005588 <USB_DeactivateEndpoint+0x2e8>)
 800536c:	4013      	ands	r3, r2
 800536e:	b29c      	uxth	r4, r3
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	18d3      	adds	r3, r2, r3
 800537a:	4a81      	ldr	r2, [pc, #516]	; (8005580 <USB_DeactivateEndpoint+0x2e0>)
 800537c:	4322      	orrs	r2, r4
 800537e:	b292      	uxth	r2, r2
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	e0f1      	b.n	8005568 <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d000      	beq.n	800538e <USB_DeactivateEndpoint+0xee>
 800538c:	e076      	b.n	800547c <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	18d3      	adds	r3, r2, r3
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	b29c      	uxth	r4, r3
 800539c:	0022      	movs	r2, r4
 800539e:	2380      	movs	r3, #128	; 0x80
 80053a0:	01db      	lsls	r3, r3, #7
 80053a2:	4013      	ands	r3, r2
 80053a4:	d012      	beq.n	80053cc <USB_DeactivateEndpoint+0x12c>
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	18d3      	adds	r3, r2, r3
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	4a6f      	ldr	r2, [pc, #444]	; (8005574 <USB_DeactivateEndpoint+0x2d4>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	b29c      	uxth	r4, r3
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	18d3      	adds	r3, r2, r3
 80053c4:	4a6f      	ldr	r2, [pc, #444]	; (8005584 <USB_DeactivateEndpoint+0x2e4>)
 80053c6:	4322      	orrs	r2, r4
 80053c8:	b292      	uxth	r2, r2
 80053ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	18d3      	adds	r3, r2, r3
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	b29c      	uxth	r4, r3
 80053da:	0022      	movs	r2, r4
 80053dc:	2340      	movs	r3, #64	; 0x40
 80053de:	4013      	ands	r3, r2
 80053e0:	d012      	beq.n	8005408 <USB_DeactivateEndpoint+0x168>
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	18d3      	adds	r3, r2, r3
 80053ec:	881b      	ldrh	r3, [r3, #0]
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	4a60      	ldr	r2, [pc, #384]	; (8005574 <USB_DeactivateEndpoint+0x2d4>)
 80053f2:	4013      	ands	r3, r2
 80053f4:	b29c      	uxth	r4, r3
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	18d3      	adds	r3, r2, r3
 8005400:	4a5d      	ldr	r2, [pc, #372]	; (8005578 <USB_DeactivateEndpoint+0x2d8>)
 8005402:	4322      	orrs	r2, r4
 8005404:	b292      	uxth	r2, r2
 8005406:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	18d3      	adds	r3, r2, r3
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	b29b      	uxth	r3, r3
 8005416:	4a57      	ldr	r2, [pc, #348]	; (8005574 <USB_DeactivateEndpoint+0x2d4>)
 8005418:	4013      	ands	r3, r2
 800541a:	b29c      	uxth	r4, r3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	18d3      	adds	r3, r2, r3
 8005426:	4a54      	ldr	r2, [pc, #336]	; (8005578 <USB_DeactivateEndpoint+0x2d8>)
 8005428:	4322      	orrs	r2, r4
 800542a:	b292      	uxth	r2, r2
 800542c:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	18d3      	adds	r3, r2, r3
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	4a52      	ldr	r2, [pc, #328]	; (8005588 <USB_DeactivateEndpoint+0x2e8>)
 800543e:	4013      	ands	r3, r2
 8005440:	b29c      	uxth	r4, r3
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	18d3      	adds	r3, r2, r3
 800544c:	4a4c      	ldr	r2, [pc, #304]	; (8005580 <USB_DeactivateEndpoint+0x2e0>)
 800544e:	4322      	orrs	r2, r4
 8005450:	b292      	uxth	r2, r2
 8005452:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	18d3      	adds	r3, r2, r3
 800545e:	881b      	ldrh	r3, [r3, #0]
 8005460:	b29b      	uxth	r3, r3
 8005462:	4a46      	ldr	r2, [pc, #280]	; (800557c <USB_DeactivateEndpoint+0x2dc>)
 8005464:	4013      	ands	r3, r2
 8005466:	b29c      	uxth	r4, r3
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	18d3      	adds	r3, r2, r3
 8005472:	4a43      	ldr	r2, [pc, #268]	; (8005580 <USB_DeactivateEndpoint+0x2e0>)
 8005474:	4322      	orrs	r2, r4
 8005476:	b292      	uxth	r2, r2
 8005478:	801a      	strh	r2, [r3, #0]
 800547a:	e075      	b.n	8005568 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	18d3      	adds	r3, r2, r3
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29c      	uxth	r4, r3
 800548a:	0022      	movs	r2, r4
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	01db      	lsls	r3, r3, #7
 8005490:	4013      	ands	r3, r2
 8005492:	d012      	beq.n	80054ba <USB_DeactivateEndpoint+0x21a>
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	18d3      	adds	r3, r2, r3
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4a34      	ldr	r2, [pc, #208]	; (8005574 <USB_DeactivateEndpoint+0x2d4>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	b29c      	uxth	r4, r3
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	18d3      	adds	r3, r2, r3
 80054b2:	4a34      	ldr	r2, [pc, #208]	; (8005584 <USB_DeactivateEndpoint+0x2e4>)
 80054b4:	4322      	orrs	r2, r4
 80054b6:	b292      	uxth	r2, r2
 80054b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	18d3      	adds	r3, r2, r3
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29c      	uxth	r4, r3
 80054c8:	0022      	movs	r2, r4
 80054ca:	2340      	movs	r3, #64	; 0x40
 80054cc:	4013      	ands	r3, r2
 80054ce:	d012      	beq.n	80054f6 <USB_DeactivateEndpoint+0x256>
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	18d3      	adds	r3, r2, r3
 80054da:	881b      	ldrh	r3, [r3, #0]
 80054dc:	b29b      	uxth	r3, r3
 80054de:	4a25      	ldr	r2, [pc, #148]	; (8005574 <USB_DeactivateEndpoint+0x2d4>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	b29c      	uxth	r4, r3
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	18d3      	adds	r3, r2, r3
 80054ee:	4a22      	ldr	r2, [pc, #136]	; (8005578 <USB_DeactivateEndpoint+0x2d8>)
 80054f0:	4322      	orrs	r2, r4
 80054f2:	b292      	uxth	r2, r2
 80054f4:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	18d3      	adds	r3, r2, r3
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	b29b      	uxth	r3, r3
 8005504:	4a1b      	ldr	r2, [pc, #108]	; (8005574 <USB_DeactivateEndpoint+0x2d4>)
 8005506:	4013      	ands	r3, r2
 8005508:	b29c      	uxth	r4, r3
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	18d3      	adds	r3, r2, r3
 8005514:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <USB_DeactivateEndpoint+0x2e4>)
 8005516:	4322      	orrs	r2, r4
 8005518:	b292      	uxth	r2, r2
 800551a:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	18d3      	adds	r3, r2, r3
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	4a14      	ldr	r2, [pc, #80]	; (800557c <USB_DeactivateEndpoint+0x2dc>)
 800552c:	4013      	ands	r3, r2
 800552e:	b29c      	uxth	r4, r3
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	18d3      	adds	r3, r2, r3
 800553a:	4a11      	ldr	r2, [pc, #68]	; (8005580 <USB_DeactivateEndpoint+0x2e0>)
 800553c:	4322      	orrs	r2, r4
 800553e:	b292      	uxth	r2, r2
 8005540:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	18d3      	adds	r3, r2, r3
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	4a0d      	ldr	r2, [pc, #52]	; (8005588 <USB_DeactivateEndpoint+0x2e8>)
 8005552:	4013      	ands	r3, r2
 8005554:	b29c      	uxth	r4, r3
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	18d3      	adds	r3, r2, r3
 8005560:	4a07      	ldr	r2, [pc, #28]	; (8005580 <USB_DeactivateEndpoint+0x2e0>)
 8005562:	4322      	orrs	r2, r4
 8005564:	b292      	uxth	r2, r2
 8005566:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	0018      	movs	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	b003      	add	sp, #12
 8005570:	bd90      	pop	{r4, r7, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	ffff8f8f 	.word	0xffff8f8f
 8005578:	ffff80c0 	.word	0xffff80c0
 800557c:	ffff8fbf 	.word	0xffff8fbf
 8005580:	ffff8080 	.word	0xffff8080
 8005584:	ffffc080 	.word	0xffffc080
 8005588:	ffffbf8f 	.word	0xffffbf8f

0800558c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b095      	sub	sp, #84	; 0x54
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d000      	beq.n	80055a0 <USB_EPStartXfer+0x14>
 800559e:	e155      	b.n	800584c <USB_EPStartXfer+0x2c0>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d909      	bls.n	80055c0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055b8:	1ad2      	subs	r2, r2, r3
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	619a      	str	r2, [r3, #24]
 80055be:	e005      	b.n	80055cc <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2200      	movs	r2, #0
 80055ca:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	7b1b      	ldrb	r3, [r3, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d11b      	bne.n	800560c <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	6959      	ldr	r1, [r3, #20]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	88da      	ldrh	r2, [r3, #6]
 80055dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055de:	b29b      	uxth	r3, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fb93 	bl	8005d0c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80055e6:	687c      	ldr	r4, [r7, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2250      	movs	r2, #80	; 0x50
 80055ec:	5a9b      	ldrh	r3, [r3, r2]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	18e4      	adds	r4, r4, r3
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	00db      	lsls	r3, r3, #3
 80055f8:	18e3      	adds	r3, r4, r3
 80055fa:	4ad4      	ldr	r2, [pc, #848]	; (800594c <USB_EPStartXfer+0x3c0>)
 80055fc:	4694      	mov	ip, r2
 80055fe:	4463      	add	r3, ip
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	e105      	b.n	8005818 <USB_EPStartXfer+0x28c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	18d3      	adds	r3, r2, r3
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	001a      	movs	r2, r3
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	4013      	ands	r3, r2
 8005620:	d060      	beq.n	80056e4 <USB_EPStartXfer+0x158>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005622:	687c      	ldr	r4, [r7, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d140      	bne.n	80056ae <USB_EPStartXfer+0x122>
 800562c:	687c      	ldr	r4, [r7, #4]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2250      	movs	r2, #80	; 0x50
 8005632:	5a9b      	ldrh	r3, [r3, r2]
 8005634:	b29b      	uxth	r3, r3
 8005636:	18e4      	adds	r4, r4, r3
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	18e3      	adds	r3, r4, r3
 8005640:	4ac3      	ldr	r2, [pc, #780]	; (8005950 <USB_EPStartXfer+0x3c4>)
 8005642:	4694      	mov	ip, r2
 8005644:	4463      	add	r3, ip
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10e      	bne.n	800566c <USB_EPStartXfer+0xe0>
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	4ac0      	ldr	r2, [pc, #768]	; (8005954 <USB_EPStartXfer+0x3c8>)
 8005654:	4013      	ands	r3, r2
 8005656:	b29a      	uxth	r2, r3
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	801a      	strh	r2, [r3, #0]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	4abd      	ldr	r2, [pc, #756]	; (8005958 <USB_EPStartXfer+0x3cc>)
 8005662:	4313      	orrs	r3, r2
 8005664:	b29a      	uxth	r2, r3
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	801a      	strh	r2, [r3, #0]
 800566a:	e035      	b.n	80056d8 <USB_EPStartXfer+0x14c>
 800566c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800566e:	2b3d      	cmp	r3, #61	; 0x3d
 8005670:	d810      	bhi.n	8005694 <USB_EPStartXfer+0x108>
 8005672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005674:	085b      	lsrs	r3, r3, #1
 8005676:	647b      	str	r3, [r7, #68]	; 0x44
 8005678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800567a:	2201      	movs	r2, #1
 800567c:	4013      	ands	r3, r2
 800567e:	d002      	beq.n	8005686 <USB_EPStartXfer+0xfa>
 8005680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005682:	3301      	adds	r3, #1
 8005684:	647b      	str	r3, [r7, #68]	; 0x44
 8005686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005688:	b29b      	uxth	r3, r3
 800568a:	029b      	lsls	r3, r3, #10
 800568c:	b29a      	uxth	r2, r3
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	801a      	strh	r2, [r3, #0]
 8005692:	e021      	b.n	80056d8 <USB_EPStartXfer+0x14c>
 8005694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	647b      	str	r3, [r7, #68]	; 0x44
 800569a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800569c:	b29b      	uxth	r3, r3
 800569e:	029b      	lsls	r3, r3, #10
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	4aad      	ldr	r2, [pc, #692]	; (8005958 <USB_EPStartXfer+0x3cc>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	e014      	b.n	80056d8 <USB_EPStartXfer+0x14c>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d110      	bne.n	80056d8 <USB_EPStartXfer+0x14c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2250      	movs	r2, #80	; 0x50
 80056ba:	5a9b      	ldrh	r3, [r3, r2]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	18e4      	adds	r4, r4, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	18e3      	adds	r3, r4, r3
 80056c8:	4aa1      	ldr	r2, [pc, #644]	; (8005950 <USB_EPStartXfer+0x3c4>)
 80056ca:	4694      	mov	ip, r2
 80056cc:	4463      	add	r3, ip
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056d2:	b29a      	uxth	r2, r3
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80056d8:	234e      	movs	r3, #78	; 0x4e
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	8952      	ldrh	r2, [r2, #10]
 80056e0:	801a      	strh	r2, [r3, #0]
 80056e2:	e05f      	b.n	80057a4 <USB_EPStartXfer+0x218>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	785b      	ldrb	r3, [r3, #1]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d140      	bne.n	800576e <USB_EPStartXfer+0x1e2>
 80056ec:	687c      	ldr	r4, [r7, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2250      	movs	r2, #80	; 0x50
 80056f2:	5a9b      	ldrh	r3, [r3, r2]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	18e4      	adds	r4, r4, r3
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	18e3      	adds	r3, r4, r3
 8005700:	4a92      	ldr	r2, [pc, #584]	; (800594c <USB_EPStartXfer+0x3c0>)
 8005702:	4694      	mov	ip, r2
 8005704:	4463      	add	r3, ip
 8005706:	61bb      	str	r3, [r7, #24]
 8005708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10e      	bne.n	800572c <USB_EPStartXfer+0x1a0>
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	4a90      	ldr	r2, [pc, #576]	; (8005954 <USB_EPStartXfer+0x3c8>)
 8005714:	4013      	ands	r3, r2
 8005716:	b29a      	uxth	r2, r3
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	801a      	strh	r2, [r3, #0]
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	4a8d      	ldr	r2, [pc, #564]	; (8005958 <USB_EPStartXfer+0x3cc>)
 8005722:	4313      	orrs	r3, r2
 8005724:	b29a      	uxth	r2, r3
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	801a      	strh	r2, [r3, #0]
 800572a:	e036      	b.n	800579a <USB_EPStartXfer+0x20e>
 800572c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800572e:	2b3d      	cmp	r3, #61	; 0x3d
 8005730:	d810      	bhi.n	8005754 <USB_EPStartXfer+0x1c8>
 8005732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005734:	085b      	lsrs	r3, r3, #1
 8005736:	643b      	str	r3, [r7, #64]	; 0x40
 8005738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573a:	2201      	movs	r2, #1
 800573c:	4013      	ands	r3, r2
 800573e:	d002      	beq.n	8005746 <USB_EPStartXfer+0x1ba>
 8005740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005742:	3301      	adds	r3, #1
 8005744:	643b      	str	r3, [r7, #64]	; 0x40
 8005746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005748:	b29b      	uxth	r3, r3
 800574a:	029b      	lsls	r3, r3, #10
 800574c:	b29a      	uxth	r2, r3
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	801a      	strh	r2, [r3, #0]
 8005752:	e022      	b.n	800579a <USB_EPStartXfer+0x20e>
 8005754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	643b      	str	r3, [r7, #64]	; 0x40
 800575a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575c:	b29b      	uxth	r3, r3
 800575e:	029b      	lsls	r3, r3, #10
 8005760:	b29b      	uxth	r3, r3
 8005762:	4a7d      	ldr	r2, [pc, #500]	; (8005958 <USB_EPStartXfer+0x3cc>)
 8005764:	4313      	orrs	r3, r2
 8005766:	b29a      	uxth	r2, r3
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e015      	b.n	800579a <USB_EPStartXfer+0x20e>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	785b      	ldrb	r3, [r3, #1]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d111      	bne.n	800579a <USB_EPStartXfer+0x20e>
 8005776:	687c      	ldr	r4, [r7, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2250      	movs	r2, #80	; 0x50
 800577c:	5a9b      	ldrh	r3, [r3, r2]
 800577e:	b29b      	uxth	r3, r3
 8005780:	18e4      	adds	r4, r4, r3
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	18e3      	adds	r3, r4, r3
 800578a:	4a70      	ldr	r2, [pc, #448]	; (800594c <USB_EPStartXfer+0x3c0>)
 800578c:	4694      	mov	ip, r2
 800578e:	4463      	add	r3, ip
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005794:	b29a      	uxth	r2, r3
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800579a:	234e      	movs	r3, #78	; 0x4e
 800579c:	18fb      	adds	r3, r7, r3
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	8912      	ldrh	r2, [r2, #8]
 80057a2:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	6959      	ldr	r1, [r3, #20]
 80057a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057aa:	b29c      	uxth	r4, r3
 80057ac:	234e      	movs	r3, #78	; 0x4e
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	881a      	ldrh	r2, [r3, #0]
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	0023      	movs	r3, r4
 80057b6:	f000 faa9 	bl	8005d0c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d113      	bne.n	80057ea <USB_EPStartXfer+0x25e>
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	18d3      	adds	r3, r2, r3
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	4a62      	ldr	r2, [pc, #392]	; (800595c <USB_EPStartXfer+0x3d0>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	b29c      	uxth	r4, r3
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	18d3      	adds	r3, r2, r3
 80057e0:	4a5f      	ldr	r2, [pc, #380]	; (8005960 <USB_EPStartXfer+0x3d4>)
 80057e2:	4322      	orrs	r2, r4
 80057e4:	b292      	uxth	r2, r2
 80057e6:	801a      	strh	r2, [r3, #0]
 80057e8:	e016      	b.n	8005818 <USB_EPStartXfer+0x28c>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d112      	bne.n	8005818 <USB_EPStartXfer+0x28c>
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	18d3      	adds	r3, r2, r3
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	4a56      	ldr	r2, [pc, #344]	; (800595c <USB_EPStartXfer+0x3d0>)
 8005802:	4013      	ands	r3, r2
 8005804:	b29c      	uxth	r4, r3
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	18d3      	adds	r3, r2, r3
 8005810:	4a54      	ldr	r2, [pc, #336]	; (8005964 <USB_EPStartXfer+0x3d8>)
 8005812:	4322      	orrs	r2, r4
 8005814:	b292      	uxth	r2, r2
 8005816:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	18d3      	adds	r3, r2, r3
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	b29b      	uxth	r3, r3
 8005826:	4a50      	ldr	r2, [pc, #320]	; (8005968 <USB_EPStartXfer+0x3dc>)
 8005828:	4013      	ands	r3, r2
 800582a:	b29c      	uxth	r4, r3
 800582c:	2310      	movs	r3, #16
 800582e:	4063      	eors	r3, r4
 8005830:	b29c      	uxth	r4, r3
 8005832:	2320      	movs	r3, #32
 8005834:	4063      	eors	r3, r4
 8005836:	b29c      	uxth	r4, r3
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	18d3      	adds	r3, r2, r3
 8005842:	4a4a      	ldr	r2, [pc, #296]	; (800596c <USB_EPStartXfer+0x3e0>)
 8005844:	4322      	orrs	r2, r4
 8005846:	b292      	uxth	r2, r2
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	e13e      	b.n	8005aca <USB_EPStartXfer+0x53e>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	699a      	ldr	r2, [r3, #24]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	429a      	cmp	r2, r3
 8005856:	d909      	bls.n	800586c <USB_EPStartXfer+0x2e0>
    {
      len = ep->maxpacket;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005864:	1ad2      	subs	r2, r2, r3
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	619a      	str	r2, [r3, #24]
 800586a:	e005      	b.n	8005878 <USB_EPStartXfer+0x2ec>
    }
    else
    {
      len = ep->xfer_len;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2200      	movs	r2, #0
 8005876:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	7b1b      	ldrb	r3, [r3, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d140      	bne.n	8005902 <USB_EPStartXfer+0x376>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005880:	687c      	ldr	r4, [r7, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2250      	movs	r2, #80	; 0x50
 8005886:	5a9b      	ldrh	r3, [r3, r2]
 8005888:	b29b      	uxth	r3, r3
 800588a:	18e4      	adds	r4, r4, r3
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	18e3      	adds	r3, r4, r3
 8005894:	4a2e      	ldr	r2, [pc, #184]	; (8005950 <USB_EPStartXfer+0x3c4>)
 8005896:	4694      	mov	ip, r2
 8005898:	4463      	add	r3, ip
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10e      	bne.n	80058c0 <USB_EPStartXfer+0x334>
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	4a2b      	ldr	r2, [pc, #172]	; (8005954 <USB_EPStartXfer+0x3c8>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	801a      	strh	r2, [r3, #0]
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	4a28      	ldr	r2, [pc, #160]	; (8005958 <USB_EPStartXfer+0x3cc>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	e0e9      	b.n	8005a94 <USB_EPStartXfer+0x508>
 80058c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c2:	2b3d      	cmp	r3, #61	; 0x3d
 80058c4:	d810      	bhi.n	80058e8 <USB_EPStartXfer+0x35c>
 80058c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c8:	085b      	lsrs	r3, r3, #1
 80058ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ce:	2201      	movs	r2, #1
 80058d0:	4013      	ands	r3, r2
 80058d2:	d002      	beq.n	80058da <USB_EPStartXfer+0x34e>
 80058d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d6:	3301      	adds	r3, #1
 80058d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058dc:	b29b      	uxth	r3, r3
 80058de:	029b      	lsls	r3, r3, #10
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	e0d5      	b.n	8005a94 <USB_EPStartXfer+0x508>
 80058e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	029b      	lsls	r3, r3, #10
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	4a18      	ldr	r2, [pc, #96]	; (8005958 <USB_EPStartXfer+0x3cc>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	801a      	strh	r2, [r3, #0]
 8005900:	e0c8      	b.n	8005a94 <USB_EPStartXfer+0x508>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	785b      	ldrb	r3, [r3, #1]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d153      	bne.n	80059b2 <USB_EPStartXfer+0x426>
 800590a:	687c      	ldr	r4, [r7, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2250      	movs	r2, #80	; 0x50
 8005910:	5a9b      	ldrh	r3, [r3, r2]
 8005912:	b29b      	uxth	r3, r3
 8005914:	18e4      	adds	r4, r4, r3
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	18e3      	adds	r3, r4, r3
 800591e:	4a0b      	ldr	r2, [pc, #44]	; (800594c <USB_EPStartXfer+0x3c0>)
 8005920:	4694      	mov	ip, r2
 8005922:	4463      	add	r3, ip
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005928:	2b00      	cmp	r3, #0
 800592a:	d121      	bne.n	8005970 <USB_EPStartXfer+0x3e4>
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	4a08      	ldr	r2, [pc, #32]	; (8005954 <USB_EPStartXfer+0x3c8>)
 8005932:	4013      	ands	r3, r2
 8005934:	b29a      	uxth	r2, r3
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	801a      	strh	r2, [r3, #0]
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	4a06      	ldr	r2, [pc, #24]	; (8005958 <USB_EPStartXfer+0x3cc>)
 8005940:	4313      	orrs	r3, r2
 8005942:	b29a      	uxth	r2, r3
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	e049      	b.n	80059de <USB_EPStartXfer+0x452>
 800594a:	46c0      	nop			; (mov r8, r8)
 800594c:	00000402 	.word	0x00000402
 8005950:	00000406 	.word	0x00000406
 8005954:	ffff83ff 	.word	0xffff83ff
 8005958:	ffff8000 	.word	0xffff8000
 800595c:	ffff8f8f 	.word	0xffff8f8f
 8005960:	ffff80c0 	.word	0xffff80c0
 8005964:	ffffc080 	.word	0xffffc080
 8005968:	ffff8fbf 	.word	0xffff8fbf
 800596c:	ffff8080 	.word	0xffff8080
 8005970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005972:	2b3d      	cmp	r3, #61	; 0x3d
 8005974:	d810      	bhi.n	8005998 <USB_EPStartXfer+0x40c>
 8005976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005978:	085b      	lsrs	r3, r3, #1
 800597a:	63bb      	str	r3, [r7, #56]	; 0x38
 800597c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800597e:	2201      	movs	r2, #1
 8005980:	4013      	ands	r3, r2
 8005982:	d002      	beq.n	800598a <USB_EPStartXfer+0x3fe>
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	3301      	adds	r3, #1
 8005988:	63bb      	str	r3, [r7, #56]	; 0x38
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	b29b      	uxth	r3, r3
 800598e:	029b      	lsls	r3, r3, #10
 8005990:	b29a      	uxth	r2, r3
 8005992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	e022      	b.n	80059de <USB_EPStartXfer+0x452>
 8005998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	63bb      	str	r3, [r7, #56]	; 0x38
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	029b      	lsls	r3, r3, #10
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	4a4b      	ldr	r2, [pc, #300]	; (8005ad4 <USB_EPStartXfer+0x548>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	801a      	strh	r2, [r3, #0]
 80059b0:	e015      	b.n	80059de <USB_EPStartXfer+0x452>
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d111      	bne.n	80059de <USB_EPStartXfer+0x452>
 80059ba:	687c      	ldr	r4, [r7, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2250      	movs	r2, #80	; 0x50
 80059c0:	5a9b      	ldrh	r3, [r3, r2]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	18e4      	adds	r4, r4, r3
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	18e3      	adds	r3, r4, r3
 80059ce:	4a42      	ldr	r2, [pc, #264]	; (8005ad8 <USB_EPStartXfer+0x54c>)
 80059d0:	4694      	mov	ip, r2
 80059d2:	4463      	add	r3, ip
 80059d4:	633b      	str	r3, [r7, #48]	; 0x30
 80059d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d8:	b29a      	uxth	r2, r3
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	687c      	ldr	r4, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	785b      	ldrb	r3, [r3, #1]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d140      	bne.n	8005a6a <USB_EPStartXfer+0x4de>
 80059e8:	687c      	ldr	r4, [r7, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2250      	movs	r2, #80	; 0x50
 80059ee:	5a9b      	ldrh	r3, [r3, r2]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	18e4      	adds	r4, r4, r3
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	18e3      	adds	r3, r4, r3
 80059fc:	4a37      	ldr	r2, [pc, #220]	; (8005adc <USB_EPStartXfer+0x550>)
 80059fe:	4694      	mov	ip, r2
 8005a00:	4463      	add	r3, ip
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
 8005a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10e      	bne.n	8005a28 <USB_EPStartXfer+0x49c>
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	4a34      	ldr	r2, [pc, #208]	; (8005ae0 <USB_EPStartXfer+0x554>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	801a      	strh	r2, [r3, #0]
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	881b      	ldrh	r3, [r3, #0]
 8005a1c:	4a2d      	ldr	r2, [pc, #180]	; (8005ad4 <USB_EPStartXfer+0x548>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	e035      	b.n	8005a94 <USB_EPStartXfer+0x508>
 8005a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2a:	2b3d      	cmp	r3, #61	; 0x3d
 8005a2c:	d810      	bhi.n	8005a50 <USB_EPStartXfer+0x4c4>
 8005a2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
 8005a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a36:	2201      	movs	r2, #1
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d002      	beq.n	8005a42 <USB_EPStartXfer+0x4b6>
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3e:	3301      	adds	r3, #1
 8005a40:	637b      	str	r3, [r7, #52]	; 0x34
 8005a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	029b      	lsls	r3, r3, #10
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	e021      	b.n	8005a94 <USB_EPStartXfer+0x508>
 8005a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	637b      	str	r3, [r7, #52]	; 0x34
 8005a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ad4 <USB_EPStartXfer+0x548>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	e014      	b.n	8005a94 <USB_EPStartXfer+0x508>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d110      	bne.n	8005a94 <USB_EPStartXfer+0x508>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2250      	movs	r2, #80	; 0x50
 8005a76:	5a9b      	ldrh	r3, [r3, r2]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	18e4      	adds	r4, r4, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	18e3      	adds	r3, r4, r3
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <USB_EPStartXfer+0x550>)
 8005a86:	4694      	mov	ip, r2
 8005a88:	4463      	add	r3, ip
 8005a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a92:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	18d3      	adds	r3, r2, r3
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	4a10      	ldr	r2, [pc, #64]	; (8005ae4 <USB_EPStartXfer+0x558>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	b29c      	uxth	r4, r3
 8005aa8:	2380      	movs	r3, #128	; 0x80
 8005aaa:	015b      	lsls	r3, r3, #5
 8005aac:	4063      	eors	r3, r4
 8005aae:	b29c      	uxth	r4, r3
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	019b      	lsls	r3, r3, #6
 8005ab4:	4063      	eors	r3, r4
 8005ab6:	b29c      	uxth	r4, r3
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	18d3      	adds	r3, r2, r3
 8005ac2:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <USB_EPStartXfer+0x55c>)
 8005ac4:	4322      	orrs	r2, r4
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	0018      	movs	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b015      	add	sp, #84	; 0x54
 8005ad2:	bd90      	pop	{r4, r7, pc}
 8005ad4:	ffff8000 	.word	0xffff8000
 8005ad8:	00000402 	.word	0x00000402
 8005adc:	00000406 	.word	0x00000406
 8005ae0:	ffff83ff 	.word	0xffff83ff
 8005ae4:	ffffbf8f 	.word	0xffffbf8f
 8005ae8:	ffff8080 	.word	0xffff8080

08005aec <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005aec:	b590      	push	{r4, r7, lr}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d016      	beq.n	8005b2c <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	18d3      	adds	r3, r2, r3
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	4a15      	ldr	r2, [pc, #84]	; (8005b64 <USB_EPSetStall+0x78>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	b29c      	uxth	r4, r3
 8005b12:	2310      	movs	r3, #16
 8005b14:	4063      	eors	r3, r4
 8005b16:	b29c      	uxth	r4, r3
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	18d3      	adds	r3, r2, r3
 8005b22:	4a11      	ldr	r2, [pc, #68]	; (8005b68 <USB_EPSetStall+0x7c>)
 8005b24:	4322      	orrs	r2, r4
 8005b26:	b292      	uxth	r2, r2
 8005b28:	801a      	strh	r2, [r3, #0]
 8005b2a:	e016      	b.n	8005b5a <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	18d3      	adds	r3, r2, r3
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	4a0c      	ldr	r2, [pc, #48]	; (8005b6c <USB_EPSetStall+0x80>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	b29c      	uxth	r4, r3
 8005b40:	2380      	movs	r3, #128	; 0x80
 8005b42:	015b      	lsls	r3, r3, #5
 8005b44:	4063      	eors	r3, r4
 8005b46:	b29c      	uxth	r4, r3
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	18d3      	adds	r3, r2, r3
 8005b52:	4a05      	ldr	r2, [pc, #20]	; (8005b68 <USB_EPSetStall+0x7c>)
 8005b54:	4322      	orrs	r2, r4
 8005b56:	b292      	uxth	r2, r2
 8005b58:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	b003      	add	sp, #12
 8005b62:	bd90      	pop	{r4, r7, pc}
 8005b64:	ffff8fbf 	.word	0xffff8fbf
 8005b68:	ffff8080 	.word	0xffff8080
 8005b6c:	ffffbf8f 	.word	0xffffbf8f

08005b70 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b70:	b590      	push	{r4, r7, lr}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	785b      	ldrb	r3, [r3, #1]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d037      	beq.n	8005bf2 <USB_EPClearStall+0x82>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	18d3      	adds	r3, r2, r3
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29c      	uxth	r4, r3
 8005b90:	0022      	movs	r2, r4
 8005b92:	2340      	movs	r3, #64	; 0x40
 8005b94:	4013      	ands	r3, r2
 8005b96:	d012      	beq.n	8005bbe <USB_EPClearStall+0x4e>
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	18d3      	adds	r3, r2, r3
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	4a32      	ldr	r2, [pc, #200]	; (8005c70 <USB_EPClearStall+0x100>)
 8005ba8:	4013      	ands	r3, r2
 8005baa:	b29c      	uxth	r4, r3
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	18d3      	adds	r3, r2, r3
 8005bb6:	4a2f      	ldr	r2, [pc, #188]	; (8005c74 <USB_EPClearStall+0x104>)
 8005bb8:	4322      	orrs	r2, r4
 8005bba:	b292      	uxth	r2, r2
 8005bbc:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	18d3      	adds	r3, r2, r3
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	4a2a      	ldr	r2, [pc, #168]	; (8005c78 <USB_EPClearStall+0x108>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	b29c      	uxth	r4, r3
 8005bd2:	2310      	movs	r3, #16
 8005bd4:	4063      	eors	r3, r4
 8005bd6:	b29c      	uxth	r4, r3
 8005bd8:	2320      	movs	r3, #32
 8005bda:	4063      	eors	r3, r4
 8005bdc:	b29c      	uxth	r4, r3
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	18d3      	adds	r3, r2, r3
 8005be8:	4a24      	ldr	r2, [pc, #144]	; (8005c7c <USB_EPClearStall+0x10c>)
 8005bea:	4322      	orrs	r2, r4
 8005bec:	b292      	uxth	r2, r2
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	e039      	b.n	8005c66 <USB_EPClearStall+0xf6>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	18d3      	adds	r3, r2, r3
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29c      	uxth	r4, r3
 8005c00:	0022      	movs	r2, r4
 8005c02:	2380      	movs	r3, #128	; 0x80
 8005c04:	01db      	lsls	r3, r3, #7
 8005c06:	4013      	ands	r3, r2
 8005c08:	d012      	beq.n	8005c30 <USB_EPClearStall+0xc0>
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	18d3      	adds	r3, r2, r3
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	4a15      	ldr	r2, [pc, #84]	; (8005c70 <USB_EPClearStall+0x100>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	b29c      	uxth	r4, r3
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	18d3      	adds	r3, r2, r3
 8005c28:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <USB_EPClearStall+0x110>)
 8005c2a:	4322      	orrs	r2, r4
 8005c2c:	b292      	uxth	r2, r2
 8005c2e:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	18d3      	adds	r3, r2, r3
 8005c3a:	881b      	ldrh	r3, [r3, #0]
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	4a11      	ldr	r2, [pc, #68]	; (8005c84 <USB_EPClearStall+0x114>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	b29c      	uxth	r4, r3
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	015b      	lsls	r3, r3, #5
 8005c48:	4063      	eors	r3, r4
 8005c4a:	b29c      	uxth	r4, r3
 8005c4c:	2380      	movs	r3, #128	; 0x80
 8005c4e:	019b      	lsls	r3, r3, #6
 8005c50:	4063      	eors	r3, r4
 8005c52:	b29c      	uxth	r4, r3
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	18d3      	adds	r3, r2, r3
 8005c5e:	4a07      	ldr	r2, [pc, #28]	; (8005c7c <USB_EPClearStall+0x10c>)
 8005c60:	4322      	orrs	r2, r4
 8005c62:	b292      	uxth	r2, r2
 8005c64:	801a      	strh	r2, [r3, #0]
  }
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	0018      	movs	r0, r3
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	b003      	add	sp, #12
 8005c6e:	bd90      	pop	{r4, r7, pc}
 8005c70:	ffff8f8f 	.word	0xffff8f8f
 8005c74:	ffff80c0 	.word	0xffff80c0
 8005c78:	ffff8fbf 	.word	0xffff8fbf
 8005c7c:	ffff8080 	.word	0xffff8080
 8005c80:	ffffc080 	.word	0xffffc080
 8005c84:	ffffbf8f 	.word	0xffffbf8f

08005c88 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	000a      	movs	r2, r1
 8005c92:	1cfb      	adds	r3, r7, #3
 8005c94:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8005c96:	1cfb      	adds	r3, r7, #3
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d103      	bne.n	8005ca6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	224c      	movs	r2, #76	; 0x4c
 8005ca2:	2180      	movs	r1, #128	; 0x80
 8005ca4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	0018      	movs	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	b002      	add	sp, #8
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2258      	movs	r2, #88	; 0x58
 8005cbc:	5a9b      	ldrh	r3, [r3, r2]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	4a05      	ldr	r2, [pc, #20]	; (8005cd8 <USB_DevConnect+0x28>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	b299      	uxth	r1, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2258      	movs	r2, #88	; 0x58
 8005cca:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	0018      	movs	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	b002      	add	sp, #8
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	46c0      	nop			; (mov r8, r8)
 8005cd8:	ffff8000 	.word	0xffff8000

08005cdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2244      	movs	r2, #68	; 0x44
 8005ce8:	5a9b      	ldrh	r3, [r3, r2]
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005cee:	68fb      	ldr	r3, [r7, #12]
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b004      	add	sp, #16
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	0018      	movs	r0, r3
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b002      	add	sp, #8
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08c      	sub	sp, #48	; 0x30
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	0019      	movs	r1, r3
 8005d18:	1dbb      	adds	r3, r7, #6
 8005d1a:	801a      	strh	r2, [r3, #0]
 8005d1c:	1d3b      	adds	r3, r7, #4
 8005d1e:	1c0a      	adds	r2, r1, #0
 8005d20:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005d22:	1d3b      	adds	r3, r7, #4
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	3301      	adds	r3, #1
 8005d28:	085b      	lsrs	r3, r3, #1
 8005d2a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d34:	1dbb      	adds	r3, r7, #6
 8005d36:	881a      	ldrh	r2, [r3, #0]
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	18d3      	adds	r3, r2, r3
 8005d3c:	2280      	movs	r2, #128	; 0x80
 8005d3e:	00d2      	lsls	r2, r2, #3
 8005d40:	4694      	mov	ip, r2
 8005d42:	4463      	add	r3, ip
 8005d44:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d4a:	e01b      	b.n	8005d84 <USB_WritePMA+0x78>
  {
    temp1 = (uint16_t) * pBuf;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	3301      	adds	r3, #1
 8005d56:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	001a      	movs	r2, r3
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	3302      	adds	r3, #2
 8005d76:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	3b01      	subs	r3, #1
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1e0      	bne.n	8005d4c <USB_WritePMA+0x40>
  }
}
 8005d8a:	46c0      	nop			; (mov r8, r8)
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	b00c      	add	sp, #48	; 0x30
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b08a      	sub	sp, #40	; 0x28
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	0019      	movs	r1, r3
 8005d9e:	1dbb      	adds	r3, r7, #6
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	1c0a      	adds	r2, r1, #0
 8005da6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005da8:	1d3b      	adds	r3, r7, #4
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	085b      	lsrs	r3, r3, #1
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dba:	1dbb      	adds	r3, r7, #6
 8005dbc:	881a      	ldrh	r2, [r3, #0]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	18d3      	adds	r3, r2, r3
 8005dc2:	2280      	movs	r2, #128	; 0x80
 8005dc4:	00d2      	lsls	r2, r2, #3
 8005dc6:	4694      	mov	ip, r2
 8005dc8:	4463      	add	r3, ip
 8005dca:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd0:	e017      	b.n	8005e02 <USB_ReadPMA+0x70>
  {
    temp = *pdwVal;
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	3302      	adds	r3, #2
 8005ddc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	3301      	adds	r3, #1
 8005dea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	0a1b      	lsrs	r3, r3, #8
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1e4      	bne.n	8005dd2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005e08:	1d3b      	adds	r3, r7, #4
 8005e0a:	881b      	ldrh	r3, [r3, #0]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	4013      	ands	r3, r2
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d006      	beq.n	8005e24 <USB_ReadPMA+0x92>
  {
    temp = *pdwVal;
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	701a      	strb	r2, [r3, #0]
  }
}
 8005e24:	46c0      	nop			; (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b00a      	add	sp, #40	; 0x28
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	000a      	movs	r2, r1
 8005e36:	1cfb      	adds	r3, r7, #3
 8005e38:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005e3a:	230f      	movs	r3, #15
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	7c1b      	ldrb	r3, [r3, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d116      	bne.n	8005e78 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e4a:	2380      	movs	r3, #128	; 0x80
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	2202      	movs	r2, #2
 8005e52:	2181      	movs	r1, #129	; 0x81
 8005e54:	f001 ff74 	bl	8007d40 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e5e:	2380      	movs	r3, #128	; 0x80
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	2202      	movs	r2, #2
 8005e66:	2101      	movs	r1, #1
 8005e68:	f001 ff6a 	bl	8007d40 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	23ac      	movs	r3, #172	; 0xac
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	2101      	movs	r1, #1
 8005e74:	50d1      	str	r1, [r2, r3]
 8005e76:	e013      	b.n	8005ea0 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	2340      	movs	r3, #64	; 0x40
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	2181      	movs	r1, #129	; 0x81
 8005e80:	f001 ff5e 	bl	8007d40 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	2340      	movs	r3, #64	; 0x40
 8005e8e:	2202      	movs	r2, #2
 8005e90:	2101      	movs	r1, #1
 8005e92:	f001 ff55 	bl	8007d40 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	23ac      	movs	r3, #172	; 0xac
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	2203      	movs	r2, #3
 8005ea6:	2182      	movs	r1, #130	; 0x82
 8005ea8:	f001 ff4a 	bl	8007d40 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005eb2:	2387      	movs	r3, #135	; 0x87
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f002 f8da 	bl	8008070 <USBD_static_malloc>
 8005ebc:	0001      	movs	r1, r0
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	23a4      	movs	r3, #164	; 0xa4
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	50d1      	str	r1, [r2, r3]

  if(pdev->pClassData == NULL)
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	23a4      	movs	r3, #164	; 0xa4
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	58d3      	ldr	r3, [r2, r3]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d104      	bne.n	8005edc <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8005ed2:	230f      	movs	r3, #15
 8005ed4:	18fb      	adds	r3, r7, r3
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	e02c      	b.n	8005f36 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	23a4      	movs	r3, #164	; 0xa4
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	58d3      	ldr	r3, [r2, r3]
 8005ee4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	23a5      	movs	r3, #165	; 0xa5
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	58d3      	ldr	r3, [r2, r3]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	2385      	movs	r3, #133	; 0x85
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	2100      	movs	r1, #0
 8005efa:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	2386      	movs	r3, #134	; 0x86
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	2100      	movs	r1, #0
 8005f04:	50d1      	str	r1, [r2, r3]

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	7c1b      	ldrb	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	2381      	movs	r3, #129	; 0x81
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	58d2      	ldr	r2, [r2, r3]
 8005f16:	2380      	movs	r3, #128	; 0x80
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	2101      	movs	r1, #1
 8005f1e:	f002 f859 	bl	8007fd4 <USBD_LL_PrepareReceive>
 8005f22:	e008      	b.n	8005f36 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	2381      	movs	r3, #129	; 0x81
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	58d2      	ldr	r2, [r2, r3]
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	2340      	movs	r3, #64	; 0x40
 8005f30:	2101      	movs	r1, #1
 8005f32:	f002 f84f 	bl	8007fd4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005f36:	230f      	movs	r3, #15
 8005f38:	18fb      	adds	r3, r7, r3
 8005f3a:	781b      	ldrb	r3, [r3, #0]
}
 8005f3c:	0018      	movs	r0, r3
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	b004      	add	sp, #16
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	000a      	movs	r2, r1
 8005f4e:	1cfb      	adds	r3, r7, #3
 8005f50:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8005f52:	230f      	movs	r3, #15
 8005f54:	18fb      	adds	r3, r7, r3
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2181      	movs	r1, #129	; 0x81
 8005f5e:	0018      	movs	r0, r3
 8005f60:	f001 ff25 	bl	8007dae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f001 ff1d 	bl	8007dae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	23ac      	movs	r3, #172	; 0xac
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2182      	movs	r1, #130	; 0x82
 8005f82:	0018      	movs	r0, r3
 8005f84:	f001 ff13 	bl	8007dae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	23a4      	movs	r3, #164	; 0xa4
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	58d3      	ldr	r3, [r2, r3]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d011      	beq.n	8005fbe <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	23a5      	movs	r3, #165	; 0xa5
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	58d3      	ldr	r3, [r2, r3]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	23a4      	movs	r3, #164	; 0xa4
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	58d3      	ldr	r3, [r2, r3]
 8005fae:	0018      	movs	r0, r3
 8005fb0:	f002 f86a 	bl	8008088 <USBD_static_free>
    pdev->pClassData = NULL;
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	23a4      	movs	r3, #164	; 0xa4
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	2100      	movs	r1, #0
 8005fbc:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8005fbe:	230f      	movs	r3, #15
 8005fc0:	18fb      	adds	r3, r7, r3
 8005fc2:	781b      	ldrb	r3, [r3, #0]
}
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	b004      	add	sp, #16
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	23a4      	movs	r3, #164	; 0xa4
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	58d3      	ldr	r3, [r2, r3]
 8005fde:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005fe0:	230f      	movs	r3, #15
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8005fe8:	230c      	movs	r3, #12
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	2200      	movs	r2, #0
 8005fee:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8005ff0:	2317      	movs	r3, #23
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	001a      	movs	r2, r3
 8005ffe:	2360      	movs	r3, #96	; 0x60
 8006000:	4013      	ands	r3, r2
 8006002:	d03d      	beq.n	8006080 <USBD_CDC_Setup+0xb4>
 8006004:	2b20      	cmp	r3, #32
 8006006:	d000      	beq.n	800600a <USBD_CDC_Setup+0x3e>
 8006008:	e092      	b.n	8006130 <USBD_CDC_Setup+0x164>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	88db      	ldrh	r3, [r3, #6]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d02b      	beq.n	800606a <USBD_CDC_Setup+0x9e>
    {
      if (req->bmRequest & 0x80U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	b25b      	sxtb	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	da12      	bge.n	8006042 <USBD_CDC_Setup+0x76>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	23a5      	movs	r3, #165	; 0xa5
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	58d3      	ldr	r3, [r2, r3]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800602a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	88d2      	ldrh	r2, [r2, #6]
 8006030:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006032:	6939      	ldr	r1, [r7, #16]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	88da      	ldrh	r2, [r3, #6]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	0018      	movs	r0, r3
 800603c:	f001 fada 	bl	80075f4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006040:	e081      	b.n	8006146 <USBD_CDC_Setup+0x17a>
        hcdc->CmdOpCode = req->bRequest;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	7859      	ldrb	r1, [r3, #1]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	2380      	movs	r3, #128	; 0x80
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	54d1      	strb	r1, [r2, r3]
        hcdc->CmdLength = (uint8_t)req->wLength;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	88db      	ldrh	r3, [r3, #6]
 8006052:	b2d9      	uxtb	r1, r3
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	4a3f      	ldr	r2, [pc, #252]	; (8006154 <USBD_CDC_Setup+0x188>)
 8006058:	5499      	strb	r1, [r3, r2]
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800605a:	6939      	ldr	r1, [r7, #16]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	88da      	ldrh	r2, [r3, #6]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	0018      	movs	r0, r3
 8006064:	f001 faf9 	bl	800765a <USBD_CtlPrepareRx>
    break;
 8006068:	e06d      	b.n	8006146 <USBD_CDC_Setup+0x17a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	23a5      	movs	r3, #165	; 0xa5
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	58d3      	ldr	r3, [r2, r3]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	7850      	ldrb	r0, [r2, #1]
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	2200      	movs	r2, #0
 800607c:	4798      	blx	r3
    break;
 800607e:	e062      	b.n	8006146 <USBD_CDC_Setup+0x17a>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	2b0a      	cmp	r3, #10
 8006086:	d01c      	beq.n	80060c2 <USBD_CDC_Setup+0xf6>
 8006088:	2b0b      	cmp	r3, #11
 800608a:	d033      	beq.n	80060f4 <USBD_CDC_Setup+0x128>
 800608c:	2b00      	cmp	r3, #0
 800608e:	d142      	bne.n	8006116 <USBD_CDC_Setup+0x14a>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	239d      	movs	r3, #157	; 0x9d
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	5cd3      	ldrb	r3, [r2, r3]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d107      	bne.n	80060ac <USBD_CDC_Setup+0xe0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800609c:	230c      	movs	r3, #12
 800609e:	18f9      	adds	r1, r7, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	0018      	movs	r0, r3
 80060a6:	f001 faa5 	bl	80075f4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80060aa:	e040      	b.n	800612e <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	0011      	movs	r1, r2
 80060b2:	0018      	movs	r0, r3
 80060b4:	f001 fa1f 	bl	80074f6 <USBD_CtlError>
			  ret = USBD_FAIL;
 80060b8:	2317      	movs	r3, #23
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	2202      	movs	r2, #2
 80060be:	701a      	strb	r2, [r3, #0]
      break;
 80060c0:	e035      	b.n	800612e <USBD_CDC_Setup+0x162>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	239d      	movs	r3, #157	; 0x9d
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	5cd3      	ldrb	r3, [r2, r3]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d107      	bne.n	80060de <USBD_CDC_Setup+0x112>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80060ce:	230f      	movs	r3, #15
 80060d0:	18f9      	adds	r1, r7, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	0018      	movs	r0, r3
 80060d8:	f001 fa8c 	bl	80075f4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80060dc:	e027      	b.n	800612e <USBD_CDC_Setup+0x162>
        USBD_CtlError (pdev, req);
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	0011      	movs	r1, r2
 80060e4:	0018      	movs	r0, r3
 80060e6:	f001 fa06 	bl	80074f6 <USBD_CtlError>
			  ret = USBD_FAIL;
 80060ea:	2317      	movs	r3, #23
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	2202      	movs	r2, #2
 80060f0:	701a      	strb	r2, [r3, #0]
      break;
 80060f2:	e01c      	b.n	800612e <USBD_CDC_Setup+0x162>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	239d      	movs	r3, #157	; 0x9d
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	5cd3      	ldrb	r3, [r2, r3]
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d015      	beq.n	800612c <USBD_CDC_Setup+0x160>
      {
        USBD_CtlError (pdev, req);
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	0011      	movs	r1, r2
 8006106:	0018      	movs	r0, r3
 8006108:	f001 f9f5 	bl	80074f6 <USBD_CtlError>
			  ret = USBD_FAIL;
 800610c:	2317      	movs	r3, #23
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	2202      	movs	r2, #2
 8006112:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006114:	e00a      	b.n	800612c <USBD_CDC_Setup+0x160>

    default:
      USBD_CtlError (pdev, req);
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	0011      	movs	r1, r2
 800611c:	0018      	movs	r0, r3
 800611e:	f001 f9ea 	bl	80074f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8006122:	2317      	movs	r3, #23
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	2202      	movs	r2, #2
 8006128:	701a      	strb	r2, [r3, #0]
      break;
 800612a:	e000      	b.n	800612e <USBD_CDC_Setup+0x162>
      break;
 800612c:	46c0      	nop			; (mov r8, r8)
    }
    break;
 800612e:	e00a      	b.n	8006146 <USBD_CDC_Setup+0x17a>

  default:
    USBD_CtlError (pdev, req);
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	0011      	movs	r1, r2
 8006136:	0018      	movs	r0, r3
 8006138:	f001 f9dd 	bl	80074f6 <USBD_CtlError>
    ret = USBD_FAIL;
 800613c:	2317      	movs	r3, #23
 800613e:	18fb      	adds	r3, r7, r3
 8006140:	2202      	movs	r2, #2
 8006142:	701a      	strb	r2, [r3, #0]
    break;
 8006144:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006146:	2317      	movs	r3, #23
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	781b      	ldrb	r3, [r3, #0]
}
 800614c:	0018      	movs	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	b006      	add	sp, #24
 8006152:	bd80      	pop	{r7, pc}
 8006154:	00000201 	.word	0x00000201

08006158 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	000a      	movs	r2, r1
 8006162:	1cfb      	adds	r3, r7, #3
 8006164:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	23a4      	movs	r3, #164	; 0xa4
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	58d3      	ldr	r3, [r2, r3]
 800616e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	23a6      	movs	r3, #166	; 0xa6
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	58d3      	ldr	r3, [r2, r3]
 8006178:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	23a4      	movs	r3, #164	; 0xa4
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	58d3      	ldr	r3, [r2, r3]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d03b      	beq.n	80061fe <USBD_CDC_DataIn+0xa6>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006186:	1cfb      	adds	r3, r7, #3
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	0013      	movs	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	189b      	adds	r3, r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	18cb      	adds	r3, r1, r3
 8006196:	331c      	adds	r3, #28
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d028      	beq.n	80061f0 <USBD_CDC_DataIn+0x98>
 800619e:	1cfb      	adds	r3, r7, #3
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	6879      	ldr	r1, [r7, #4]
 80061a4:	0013      	movs	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	189b      	adds	r3, r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	18cb      	adds	r3, r1, r3
 80061ae:	331c      	adds	r3, #28
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	1cfb      	adds	r3, r7, #3
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	015b      	lsls	r3, r3, #5
 80061ba:	18d3      	adds	r3, r2, r3
 80061bc:	3338      	adds	r3, #56	; 0x38
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	0019      	movs	r1, r3
 80061c2:	f7fa f827 	bl	8000214 <__aeabi_uidivmod>
 80061c6:	1e0b      	subs	r3, r1, #0
 80061c8:	d112      	bne.n	80061f0 <USBD_CDC_DataIn+0x98>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80061ca:	1cfb      	adds	r3, r7, #3
 80061cc:	781a      	ldrb	r2, [r3, #0]
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	0013      	movs	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	189b      	adds	r3, r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	18cb      	adds	r3, r1, r3
 80061da:	331c      	adds	r3, #28
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 80061e0:	1cfb      	adds	r3, r7, #3
 80061e2:	7819      	ldrb	r1, [r3, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	2300      	movs	r3, #0
 80061e8:	2200      	movs	r2, #0
 80061ea:	f001 febb 	bl	8007f64 <USBD_LL_Transmit>
 80061ee:	e004      	b.n	80061fa <USBD_CDC_DataIn+0xa2>
    }
    else
    {
      hcdc->TxState = 0U;
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	2385      	movs	r3, #133	; 0x85
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	2100      	movs	r1, #0
 80061f8:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	e000      	b.n	8006200 <USBD_CDC_DataIn+0xa8>
  }
  else
  {
    return USBD_FAIL;
 80061fe:	2302      	movs	r3, #2
  }
}
 8006200:	0018      	movs	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	b004      	add	sp, #16
 8006206:	bd80      	pop	{r7, pc}

08006208 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	000a      	movs	r2, r1
 8006212:	1cfb      	adds	r3, r7, #3
 8006214:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	23a4      	movs	r3, #164	; 0xa4
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	58d3      	ldr	r3, [r2, r3]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8006220:	1cfb      	adds	r3, r7, #3
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	0011      	movs	r1, r2
 8006228:	0018      	movs	r0, r3
 800622a:	f001 ff0b 	bl	8008044 <USBD_LL_GetRxDataSize>
 800622e:	0001      	movs	r1, r0
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	2383      	movs	r3, #131	; 0x83
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	23a4      	movs	r3, #164	; 0xa4
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	58d3      	ldr	r3, [r2, r3]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d011      	beq.n	8006268 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	23a5      	movs	r3, #165	; 0xa5
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	58d3      	ldr	r3, [r2, r3]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	68f9      	ldr	r1, [r7, #12]
 8006250:	2281      	movs	r2, #129	; 0x81
 8006252:	0092      	lsls	r2, r2, #2
 8006254:	5888      	ldr	r0, [r1, r2]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	2183      	movs	r1, #131	; 0x83
 800625a:	0089      	lsls	r1, r1, #2
 800625c:	468c      	mov	ip, r1
 800625e:	4462      	add	r2, ip
 8006260:	0011      	movs	r1, r2
 8006262:	4798      	blx	r3

    return USBD_OK;
 8006264:	2300      	movs	r3, #0
 8006266:	e000      	b.n	800626a <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8006268:	2302      	movs	r3, #2
  }
}
 800626a:	0018      	movs	r0, r3
 800626c:	46bd      	mov	sp, r7
 800626e:	b004      	add	sp, #16
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8006274:	b590      	push	{r4, r7, lr}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	23a4      	movs	r3, #164	; 0xa4
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	58d3      	ldr	r3, [r2, r3]
 8006284:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	23a5      	movs	r3, #165	; 0xa5
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	58d3      	ldr	r3, [r2, r3]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d01a      	beq.n	80062c8 <USBD_CDC_EP0_RxReady+0x54>
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	2380      	movs	r3, #128	; 0x80
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	5cd3      	ldrb	r3, [r2, r3]
 800629a:	2bff      	cmp	r3, #255	; 0xff
 800629c:	d014      	beq.n	80062c8 <USBD_CDC_EP0_RxReady+0x54>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	23a5      	movs	r3, #165	; 0xa5
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	58d3      	ldr	r3, [r2, r3]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	68f9      	ldr	r1, [r7, #12]
 80062aa:	2280      	movs	r2, #128	; 0x80
 80062ac:	0092      	lsls	r2, r2, #2
 80062ae:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 80062b0:	68fc      	ldr	r4, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4907      	ldr	r1, [pc, #28]	; (80062d4 <USBD_CDC_EP0_RxReady+0x60>)
 80062b6:	5c52      	ldrb	r2, [r2, r1]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80062b8:	b292      	uxth	r2, r2
 80062ba:	0021      	movs	r1, r4
 80062bc:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	2380      	movs	r3, #128	; 0x80
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	21ff      	movs	r1, #255	; 0xff
 80062c6:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	0018      	movs	r0, r3
 80062cc:	46bd      	mov	sp, r7
 80062ce:	b005      	add	sp, #20
 80062d0:	bd90      	pop	{r4, r7, pc}
 80062d2:	46c0      	nop			; (mov r8, r8)
 80062d4:	00000201 	.word	0x00000201

080062d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2243      	movs	r2, #67	; 0x43
 80062e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80062e6:	4b02      	ldr	r3, [pc, #8]	; (80062f0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 80062e8:	0018      	movs	r0, r3
 80062ea:	46bd      	mov	sp, r7
 80062ec:	b002      	add	sp, #8
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	2000008c 	.word	0x2000008c

080062f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2243      	movs	r2, #67	; 0x43
 8006300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006302:	4b02      	ldr	r3, [pc, #8]	; (800630c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8006304:	0018      	movs	r0, r3
 8006306:	46bd      	mov	sp, r7
 8006308:	b002      	add	sp, #8
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20000048 	.word	0x20000048

08006310 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2243      	movs	r2, #67	; 0x43
 800631c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800631e:	4b02      	ldr	r3, [pc, #8]	; (8006328 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8006320:	0018      	movs	r0, r3
 8006322:	46bd      	mov	sp, r7
 8006324:	b002      	add	sp, #8
 8006326:	bd80      	pop	{r7, pc}
 8006328:	200000d0 	.word	0x200000d0

0800632c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	220a      	movs	r2, #10
 8006338:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800633a:	4b02      	ldr	r3, [pc, #8]	; (8006344 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800633c:	0018      	movs	r0, r3
 800633e:	46bd      	mov	sp, r7
 8006340:	b002      	add	sp, #8
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20000004 	.word	0x20000004

08006348 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006352:	230f      	movs	r3, #15
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	2202      	movs	r2, #2
 8006358:	701a      	strb	r2, [r3, #0]

  if(fops != NULL)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <USBD_CDC_RegisterInterface+0x2a>
  {
    pdev->pUserData= fops;
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	23a5      	movs	r3, #165	; 0xa5
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800636a:	230f      	movs	r3, #15
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	2200      	movs	r2, #0
 8006370:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8006372:	230f      	movs	r3, #15
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	781b      	ldrb	r3, [r3, #0]
}
 8006378:	0018      	movs	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	b004      	add	sp, #16
 800637e:	bd80      	pop	{r7, pc}

08006380 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	1dbb      	adds	r3, r7, #6
 800638c:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	23a4      	movs	r3, #164	; 0xa4
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	58d3      	ldr	r3, [r2, r3]
 8006396:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	2382      	movs	r3, #130	; 0x82
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	68b9      	ldr	r1, [r7, #8]
 80063a0:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 80063a2:	1dbb      	adds	r3, r7, #6
 80063a4:	8819      	ldrh	r1, [r3, #0]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	2384      	movs	r3, #132	; 0x84
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	0018      	movs	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b006      	add	sp, #24
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	23a4      	movs	r3, #164	; 0xa4
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	58d3      	ldr	r3, [r2, r3]
 80063ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	2381      	movs	r3, #129	; 0x81
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	0018      	movs	r0, r3
 80063da:	46bd      	mov	sp, r7
 80063dc:	b004      	add	sp, #16
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	23a4      	movs	r3, #164	; 0xa4
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	58d3      	ldr	r3, [r2, r3]
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	23a4      	movs	r3, #164	; 0xa4
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	58d3      	ldr	r3, [r2, r3]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d019      	beq.n	8006432 <USBD_CDC_ReceivePacket+0x52>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	7c1b      	ldrb	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10a      	bne.n	800641c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	2381      	movs	r3, #129	; 0x81
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	58d2      	ldr	r2, [r2, r3]
 800640e:	2380      	movs	r3, #128	; 0x80
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	2101      	movs	r1, #1
 8006416:	f001 fddd 	bl	8007fd4 <USBD_LL_PrepareReceive>
 800641a:	e008      	b.n	800642e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	2381      	movs	r3, #129	; 0x81
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	58d2      	ldr	r2, [r2, r3]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	2340      	movs	r3, #64	; 0x40
 8006428:	2101      	movs	r1, #1
 800642a:	f001 fdd3 	bl	8007fd4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	e000      	b.n	8006434 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8006432:	2302      	movs	r3, #2
  }
}
 8006434:	0018      	movs	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	b004      	add	sp, #16
 800643a:	bd80      	pop	{r7, pc}

0800643c <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	1dfb      	adds	r3, r7, #7
 8006448:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006450:	2302      	movs	r3, #2
 8006452:	e020      	b.n	8006496 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	23a3      	movs	r3, #163	; 0xa3
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	58d3      	ldr	r3, [r2, r3]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	23a3      	movs	r3, #163	; 0xa3
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	2100      	movs	r1, #0
 8006468:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d004      	beq.n	800647a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	23a2      	movs	r3, #162	; 0xa2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	239d      	movs	r3, #157	; 0x9d
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	2101      	movs	r1, #1
 8006482:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	1dfa      	adds	r2, r7, #7
 8006488:	7812      	ldrb	r2, [r2, #0]
 800648a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	0018      	movs	r0, r3
 8006490:	f001 fbcc 	bl	8007c2c <USBD_LL_Init>

  return USBD_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	0018      	movs	r0, r3
 8006498:	46bd      	mov	sp, r7
 800649a:	b004      	add	sp, #16
 800649c:	bd80      	pop	{r7, pc}

0800649e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80064a8:	230f      	movs	r3, #15
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]
  if(pclass != 0)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d009      	beq.n	80064ca <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	23a3      	movs	r3, #163	; 0xa3
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80064c0:	230f      	movs	r3, #15
 80064c2:	18fb      	adds	r3, r7, r3
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	e003      	b.n	80064d2 <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064ca:	230f      	movs	r3, #15
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	2202      	movs	r2, #2
 80064d0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80064d2:	230f      	movs	r3, #15
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	781b      	ldrb	r3, [r3, #0]
}
 80064d8:	0018      	movs	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	b004      	add	sp, #16
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	0018      	movs	r0, r3
 80064ec:	f001 fc02 	bl	8007cf4 <USBD_LL_Start>

  return USBD_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	0018      	movs	r0, r3
 80064f4:	46bd      	mov	sp, r7
 80064f6:	b002      	add	sp, #8
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b082      	sub	sp, #8
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	0018      	movs	r0, r3
 8006506:	46bd      	mov	sp, r7
 8006508:	b002      	add	sp, #8
 800650a:	bd80      	pop	{r7, pc}

0800650c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	000a      	movs	r2, r1
 8006516:	1cfb      	adds	r3, r7, #3
 8006518:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800651a:	230f      	movs	r3, #15
 800651c:	18fb      	adds	r3, r7, r3
 800651e:	2202      	movs	r2, #2
 8006520:	701a      	strb	r2, [r3, #0]

  if(pdev->pClass != NULL)
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	23a3      	movs	r3, #163	; 0xa3
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	58d3      	ldr	r3, [r2, r3]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00f      	beq.n	800654e <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	23a3      	movs	r3, #163	; 0xa3
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	58d3      	ldr	r3, [r2, r3]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	1cfa      	adds	r2, r7, #3
 800653a:	7811      	ldrb	r1, [r2, #0]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	0010      	movs	r0, r2
 8006540:	4798      	blx	r3
 8006542:	1e03      	subs	r3, r0, #0
 8006544:	d103      	bne.n	800654e <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8006546:	230f      	movs	r3, #15
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800654e:	230f      	movs	r3, #15
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	781b      	ldrb	r3, [r3, #0]
}
 8006554:	0018      	movs	r0, r3
 8006556:	46bd      	mov	sp, r7
 8006558:	b004      	add	sp, #16
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	000a      	movs	r2, r1
 8006566:	1cfb      	adds	r3, r7, #3
 8006568:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	23a3      	movs	r3, #163	; 0xa3
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	58d3      	ldr	r3, [r2, r3]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	1cfa      	adds	r2, r7, #3
 8006576:	7811      	ldrb	r1, [r2, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	0010      	movs	r0, r2
 800657c:	4798      	blx	r3
  return USBD_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	0018      	movs	r0, r3
 8006582:	46bd      	mov	sp, r7
 8006584:	b002      	add	sp, #8
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	22a0      	movs	r2, #160	; 0xa0
 8006596:	0092      	lsls	r2, r2, #2
 8006598:	4694      	mov	ip, r2
 800659a:	4463      	add	r3, ip
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	0011      	movs	r1, r2
 80065a0:	0018      	movs	r0, r3
 80065a2:	f000 ff6d 	bl	8007480 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	239b      	movs	r3, #155	; 0x9b
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	2101      	movs	r1, #1
 80065ae:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a22      	ldr	r2, [pc, #136]	; (800663c <USBD_LL_SetupStage+0xb4>)
 80065b4:	5a9b      	ldrh	r3, [r3, r2]
 80065b6:	0019      	movs	r1, r3
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	239c      	movs	r3, #156	; 0x9c
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	23a0      	movs	r3, #160	; 0xa0
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	5cd3      	ldrb	r3, [r2, r3]
 80065c8:	001a      	movs	r2, r3
 80065ca:	231f      	movs	r3, #31
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d00d      	beq.n	80065ee <USBD_LL_SetupStage+0x66>
 80065d2:	d302      	bcc.n	80065da <USBD_LL_SetupStage+0x52>
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d014      	beq.n	8006602 <USBD_LL_SetupStage+0x7a>
 80065d8:	e01d      	b.n	8006616 <USBD_LL_SetupStage+0x8e>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	22a0      	movs	r2, #160	; 0xa0
 80065de:	0092      	lsls	r2, r2, #2
 80065e0:	189a      	adds	r2, r3, r2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	0011      	movs	r1, r2
 80065e6:	0018      	movs	r0, r3
 80065e8:	f000 fa0a 	bl	8006a00 <USBD_StdDevReq>
    break;
 80065ec:	e020      	b.n	8006630 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	22a0      	movs	r2, #160	; 0xa0
 80065f2:	0092      	lsls	r2, r2, #2
 80065f4:	189a      	adds	r2, r3, r2
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	0011      	movs	r1, r2
 80065fa:	0018      	movs	r0, r3
 80065fc:	f000 fa72 	bl	8006ae4 <USBD_StdItfReq>
    break;
 8006600:	e016      	b.n	8006630 <USBD_LL_SetupStage+0xa8>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	22a0      	movs	r2, #160	; 0xa0
 8006606:	0092      	lsls	r2, r2, #2
 8006608:	189a      	adds	r2, r3, r2
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	0011      	movs	r1, r2
 800660e:	0018      	movs	r0, r3
 8006610:	f000 fabf 	bl	8006b92 <USBD_StdEPReq>
    break;
 8006614:	e00c      	b.n	8006630 <USBD_LL_SetupStage+0xa8>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	23a0      	movs	r3, #160	; 0xa0
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	5cd3      	ldrb	r3, [r2, r3]
 800661e:	227f      	movs	r2, #127	; 0x7f
 8006620:	4393      	bics	r3, r2
 8006622:	b2da      	uxtb	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	0011      	movs	r1, r2
 8006628:	0018      	movs	r0, r3
 800662a:	f001 fbec 	bl	8007e06 <USBD_LL_StallEP>
    break;
 800662e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006630:	2300      	movs	r3, #0
}
 8006632:	0018      	movs	r0, r3
 8006634:	46bd      	mov	sp, r7
 8006636:	b002      	add	sp, #8
 8006638:	bd80      	pop	{r7, pc}
 800663a:	46c0      	nop			; (mov r8, r8)
 800663c:	00000286 	.word	0x00000286

08006640 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	607a      	str	r2, [r7, #4]
 800664a:	200b      	movs	r0, #11
 800664c:	183b      	adds	r3, r7, r0
 800664e:	1c0a      	adds	r2, r1, #0
 8006650:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006652:	183b      	adds	r3, r7, r0
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d154      	bne.n	8006704 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3341      	adds	r3, #65	; 0x41
 800665e:	33ff      	adds	r3, #255	; 0xff
 8006660:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	239b      	movs	r3, #155	; 0x9b
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	58d3      	ldr	r3, [r2, r3]
 800666a:	2b03      	cmp	r3, #3
 800666c:	d139      	bne.n	80066e2 <USBD_LL_DataOutStage+0xa2>
    {
      if(pep->rem_length > pep->maxpacket)
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	429a      	cmp	r2, r3
 8006678:	d919      	bls.n	80066ae <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -=  pep->maxpacket;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	1ad2      	subs	r2, r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	68da      	ldr	r2, [r3, #12]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006690:	429a      	cmp	r2, r3
 8006692:	d203      	bcs.n	800669c <USBD_LL_DataOutStage+0x5c>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006698:	b29b      	uxth	r3, r3
 800669a:	e002      	b.n	80066a2 <USBD_LL_DataOutStage+0x62>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	001a      	movs	r2, r3
 80066a8:	f000 fffb 	bl	80076a2 <USBD_CtlContinueRx>
 80066ac:	e045      	b.n	800673a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	23a3      	movs	r3, #163	; 0xa3
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	58d3      	ldr	r3, [r2, r3]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00d      	beq.n	80066d8 <USBD_LL_DataOutStage+0x98>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	239d      	movs	r3, #157	; 0x9d
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	5cd3      	ldrb	r3, [r2, r3]
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d107      	bne.n	80066d8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	23a3      	movs	r3, #163	; 0xa3
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	58d3      	ldr	r3, [r2, r3]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	0010      	movs	r0, r2
 80066d6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	0018      	movs	r0, r3
 80066dc:	f000 fff4 	bl	80076c8 <USBD_CtlSendStatus>
 80066e0:	e02b      	b.n	800673a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	239b      	movs	r3, #155	; 0x9b
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	58d3      	ldr	r3, [r2, r3]
 80066ea:	2b05      	cmp	r3, #5
 80066ec:	d125      	bne.n	800673a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	239b      	movs	r3, #155	; 0x9b
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	2100      	movs	r1, #0
 80066f6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2100      	movs	r1, #0
 80066fc:	0018      	movs	r0, r3
 80066fe:	f001 fb82 	bl	8007e06 <USBD_LL_StallEP>
 8006702:	e01a      	b.n	800673a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	23a3      	movs	r3, #163	; 0xa3
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	58d3      	ldr	r3, [r2, r3]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d011      	beq.n	8006736 <USBD_LL_DataOutStage+0xf6>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	239d      	movs	r3, #157	; 0x9d
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataOut != NULL) &&
 800671a:	2b03      	cmp	r3, #3
 800671c:	d10b      	bne.n	8006736 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	23a3      	movs	r3, #163	; 0xa3
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	58d3      	ldr	r3, [r2, r3]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	220b      	movs	r2, #11
 800672a:	18ba      	adds	r2, r7, r2
 800672c:	7811      	ldrb	r1, [r2, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	0010      	movs	r0, r2
 8006732:	4798      	blx	r3
 8006734:	e001      	b.n	800673a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006736:	2302      	movs	r3, #2
 8006738:	e000      	b.n	800673c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	0018      	movs	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	b006      	add	sp, #24
 8006742:	bd80      	pop	{r7, pc}

08006744 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	607a      	str	r2, [r7, #4]
 800674e:	200b      	movs	r0, #11
 8006750:	183b      	adds	r3, r7, r0
 8006752:	1c0a      	adds	r2, r1, #0
 8006754:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006756:	183b      	adds	r3, r7, r0
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d000      	beq.n	8006760 <USBD_LL_DataInStage+0x1c>
 800675e:	e08e      	b.n	800687e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3314      	adds	r3, #20
 8006764:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	239b      	movs	r3, #155	; 0x9b
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	58d3      	ldr	r3, [r2, r3]
 800676e:	2b02      	cmp	r3, #2
 8006770:	d164      	bne.n	800683c <USBD_LL_DataInStage+0xf8>
    {
      if(pep->rem_length > pep->maxpacket)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	429a      	cmp	r2, r3
 800677c:	d915      	bls.n	80067aa <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	1ad2      	subs	r2, r2, r3
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	b29a      	uxth	r2, r3
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	0018      	movs	r0, r3
 8006798:	f000 ff4c 	bl	8007634 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	2300      	movs	r3, #0
 80067a0:	2200      	movs	r2, #0
 80067a2:	2100      	movs	r1, #0
 80067a4:	f001 fc16 	bl	8007fd4 <USBD_LL_PrepareReceive>
 80067a8:	e059      	b.n	800685e <USBD_LL_DataInStage+0x11a>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	0019      	movs	r1, r3
 80067b4:	0010      	movs	r0, r2
 80067b6:	f7f9 fd2d 	bl	8000214 <__aeabi_uidivmod>
 80067ba:	1e0b      	subs	r3, r1, #0
 80067bc:	d11f      	bne.n	80067fe <USBD_LL_DataInStage+0xba>
           (pep->total_length >= pep->maxpacket) &&
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d319      	bcc.n	80067fe <USBD_LL_DataInStage+0xba>
           (pep->total_length < pdev->ep0_data_len))
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	68f9      	ldr	r1, [r7, #12]
 80067d0:	239c      	movs	r3, #156	; 0x9c
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	58cb      	ldr	r3, [r1, r3]
           (pep->total_length >= pep->maxpacket) &&
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d211      	bcs.n	80067fe <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	2100      	movs	r1, #0
 80067e0:	0018      	movs	r0, r3
 80067e2:	f000 ff27 	bl	8007634 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	239c      	movs	r3, #156	; 0x9c
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	2100      	movs	r1, #0
 80067ee:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	2300      	movs	r3, #0
 80067f4:	2200      	movs	r2, #0
 80067f6:	2100      	movs	r1, #0
 80067f8:	f001 fbec 	bl	8007fd4 <USBD_LL_PrepareReceive>
 80067fc:	e02f      	b.n	800685e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	23a3      	movs	r3, #163	; 0xa3
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	58d3      	ldr	r3, [r2, r3]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d00d      	beq.n	8006828 <USBD_LL_DataInStage+0xe4>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	239d      	movs	r3, #157	; 0x9d
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	5cd3      	ldrb	r3, [r2, r3]
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006814:	2b03      	cmp	r3, #3
 8006816:	d107      	bne.n	8006828 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	23a3      	movs	r3, #163	; 0xa3
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	58d3      	ldr	r3, [r2, r3]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	0010      	movs	r0, r2
 8006826:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2180      	movs	r1, #128	; 0x80
 800682c:	0018      	movs	r0, r3
 800682e:	f001 faea 	bl	8007e06 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	0018      	movs	r0, r3
 8006836:	f000 ff5b 	bl	80076f0 <USBD_CtlReceiveStatus>
 800683a:	e010      	b.n	800685e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	239b      	movs	r3, #155	; 0x9b
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	58d3      	ldr	r3, [r2, r3]
 8006844:	2b04      	cmp	r3, #4
 8006846:	d005      	beq.n	8006854 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	239b      	movs	r3, #155	; 0x9b
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2180      	movs	r1, #128	; 0x80
 8006858:	0018      	movs	r0, r3
 800685a:	f001 fad4 	bl	8007e06 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	239e      	movs	r3, #158	; 0x9e
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	5cd3      	ldrb	r3, [r2, r3]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d124      	bne.n	80068b4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	0018      	movs	r0, r3
 800686e:	f7ff fe44 	bl	80064fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	239e      	movs	r3, #158	; 0x9e
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	2100      	movs	r1, #0
 800687a:	54d1      	strb	r1, [r2, r3]
 800687c:	e01a      	b.n	80068b4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	23a3      	movs	r3, #163	; 0xa3
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	58d3      	ldr	r3, [r2, r3]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d011      	beq.n	80068b0 <USBD_LL_DataInStage+0x16c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	239d      	movs	r3, #157	; 0x9d
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	5cd3      	ldrb	r3, [r2, r3]
  else if((pdev->pClass->DataIn != NULL) &&
 8006894:	2b03      	cmp	r3, #3
 8006896:	d10b      	bne.n	80068b0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	23a3      	movs	r3, #163	; 0xa3
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	58d3      	ldr	r3, [r2, r3]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	220b      	movs	r2, #11
 80068a4:	18ba      	adds	r2, r7, r2
 80068a6:	7811      	ldrb	r1, [r2, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	0010      	movs	r0, r2
 80068ac:	4798      	blx	r3
 80068ae:	e001      	b.n	80068b4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068b0:	2302      	movs	r3, #2
 80068b2:	e000      	b.n	80068b6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	0018      	movs	r0, r3
 80068b8:	46bd      	mov	sp, r7
 80068ba:	b006      	add	sp, #24
 80068bc:	bd80      	pop	{r7, pc}

080068be <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b082      	sub	sp, #8
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	2340      	movs	r3, #64	; 0x40
 80068ca:	2200      	movs	r2, #0
 80068cc:	2100      	movs	r1, #0
 80068ce:	f001 fa37 	bl	8007d40 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	23a2      	movs	r3, #162	; 0xa2
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	2101      	movs	r1, #1
 80068da:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	23a8      	movs	r3, #168	; 0xa8
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	2140      	movs	r1, #64	; 0x40
 80068e4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	2340      	movs	r3, #64	; 0x40
 80068ea:	2200      	movs	r2, #0
 80068ec:	2180      	movs	r1, #128	; 0x80
 80068ee:	f001 fa27 	bl	8007d40 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2240      	movs	r2, #64	; 0x40
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	239d      	movs	r3, #157	; 0x9d
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	2101      	movs	r1, #1
 8006906:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	239b      	movs	r3, #155	; 0x9b
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	2100      	movs	r1, #0
 8006910:	50d1      	str	r1, [r2, r3]
  pdev->dev_config= 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	239f      	movs	r3, #159	; 0x9f
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	2100      	movs	r1, #0
 8006920:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	23a4      	movs	r3, #164	; 0xa4
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	58d3      	ldr	r3, [r2, r3]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d00a      	beq.n	8006944 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	23a3      	movs	r3, #163	; 0xa3
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	58d3      	ldr	r3, [r2, r3]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	b2d9      	uxtb	r1, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	0018      	movs	r0, r3
 8006942:	4790      	blx	r2
  }

  return USBD_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	0018      	movs	r0, r3
 8006948:	46bd      	mov	sp, r7
 800694a:	b002      	add	sp, #8
 800694c:	bd80      	pop	{r7, pc}

0800694e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	000a      	movs	r2, r1
 8006958:	1cfb      	adds	r3, r7, #3
 800695a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	1cfa      	adds	r2, r7, #3
 8006960:	7812      	ldrb	r2, [r2, #0]
 8006962:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	0018      	movs	r0, r3
 8006968:	46bd      	mov	sp, r7
 800696a:	b002      	add	sp, #8
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	239d      	movs	r3, #157	; 0x9d
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	5cd1      	ldrb	r1, [r2, r3]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a06      	ldr	r2, [pc, #24]	; (800699c <USBD_LL_Suspend+0x2c>)
 8006984:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	239d      	movs	r3, #157	; 0x9d
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	2104      	movs	r1, #4
 800698e:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	0018      	movs	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	b002      	add	sp, #8
 8006998:	bd80      	pop	{r7, pc}
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	00000275 	.word	0x00000275

080069a0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a05      	ldr	r2, [pc, #20]	; (80069c0 <USBD_LL_Resume+0x20>)
 80069ac:	5c99      	ldrb	r1, [r3, r2]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	239d      	movs	r3, #157	; 0x9d
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	54d1      	strb	r1, [r2, r3]
  return USBD_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	0018      	movs	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b002      	add	sp, #8
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	00000275 	.word	0x00000275

080069c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	239d      	movs	r3, #157	; 0x9d
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	5cd3      	ldrb	r3, [r2, r3]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d10e      	bne.n	80069f6 <USBD_LL_SOF+0x32>
  {
    if(pdev->pClass->SOF != NULL)
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	23a3      	movs	r3, #163	; 0xa3
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	58d3      	ldr	r3, [r2, r3]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	23a3      	movs	r3, #163	; 0xa3
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	58d3      	ldr	r3, [r2, r3]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	0010      	movs	r0, r2
 80069f4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	0018      	movs	r0, r3
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b002      	add	sp, #8
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a0a:	230f      	movs	r3, #15
 8006a0c:	18fb      	adds	r3, r7, r3
 8006a0e:	2200      	movs	r2, #0
 8006a10:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	001a      	movs	r2, r3
 8006a18:	2360      	movs	r3, #96	; 0x60
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b20      	cmp	r3, #32
 8006a1e:	d004      	beq.n	8006a2a <USBD_StdDevReq+0x2a>
 8006a20:	2b40      	cmp	r3, #64	; 0x40
 8006a22:	d002      	beq.n	8006a2a <USBD_StdDevReq+0x2a>
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00a      	beq.n	8006a3e <USBD_StdDevReq+0x3e>
 8006a28:	e04b      	b.n	8006ac2 <USBD_StdDevReq+0xc2>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	23a3      	movs	r3, #163	; 0xa3
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	58d3      	ldr	r3, [r2, r3]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	0010      	movs	r0, r2
 8006a3a:	4798      	blx	r3
    break;
 8006a3c:	e048      	b.n	8006ad0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	2b09      	cmp	r3, #9
 8006a44:	d835      	bhi.n	8006ab2 <USBD_StdDevReq+0xb2>
 8006a46:	009a      	lsls	r2, r3, #2
 8006a48:	4b25      	ldr	r3, [pc, #148]	; (8006ae0 <USBD_StdDevReq+0xe0>)
 8006a4a:	18d3      	adds	r3, r2, r3
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	469f      	mov	pc, r3
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	0011      	movs	r1, r2
 8006a56:	0018      	movs	r0, r3
 8006a58:	f000 fa58 	bl	8006f0c <USBD_GetDescriptor>
      break;
 8006a5c:	e030      	b.n	8006ac0 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	0011      	movs	r1, r2
 8006a64:	0018      	movs	r0, r3
 8006a66:	f000 fb63 	bl	8007130 <USBD_SetAddress>
      break;
 8006a6a:	e029      	b.n	8006ac0 <USBD_StdDevReq+0xc0>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8006a6c:	683a      	ldr	r2, [r7, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	0011      	movs	r1, r2
 8006a72:	0018      	movs	r0, r3
 8006a74:	f000 fbb0 	bl	80071d8 <USBD_SetConfig>
      break;
 8006a78:	e022      	b.n	8006ac0 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8006a7a:	683a      	ldr	r2, [r7, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	0011      	movs	r1, r2
 8006a80:	0018      	movs	r0, r3
 8006a82:	f000 fc4d 	bl	8007320 <USBD_GetConfig>
      break;
 8006a86:	e01b      	b.n	8006ac0 <USBD_StdDevReq+0xc0>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	0011      	movs	r1, r2
 8006a8e:	0018      	movs	r0, r3
 8006a90:	f000 fc80 	bl	8007394 <USBD_GetStatus>
      break;
 8006a94:	e014      	b.n	8006ac0 <USBD_StdDevReq+0xc0>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	0011      	movs	r1, r2
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f000 fcb3 	bl	8007408 <USBD_SetFeature>
      break;
 8006aa2:	e00d      	b.n	8006ac0 <USBD_StdDevReq+0xc0>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	0011      	movs	r1, r2
 8006aaa:	0018      	movs	r0, r3
 8006aac:	f000 fcc2 	bl	8007434 <USBD_ClrFeature>
      break;
 8006ab0:	e006      	b.n	8006ac0 <USBD_StdDevReq+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	0011      	movs	r1, r2
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f000 fd1c 	bl	80074f6 <USBD_CtlError>
      break;
 8006abe:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8006ac0:	e006      	b.n	8006ad0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	0011      	movs	r1, r2
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 fd14 	bl	80074f6 <USBD_CtlError>
    break;
 8006ace:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006ad0:	230f      	movs	r3, #15
 8006ad2:	18fb      	adds	r3, r7, r3
 8006ad4:	781b      	ldrb	r3, [r3, #0]
}
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	b004      	add	sp, #16
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	08008238 	.word	0x08008238

08006ae4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006ae4:	b590      	push	{r4, r7, lr}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aee:	230f      	movs	r3, #15
 8006af0:	18fb      	adds	r3, r7, r3
 8006af2:	2200      	movs	r2, #0
 8006af4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	001a      	movs	r2, r3
 8006afc:	2360      	movs	r3, #96	; 0x60
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d003      	beq.n	8006b0c <USBD_StdItfReq+0x28>
 8006b04:	2b40      	cmp	r3, #64	; 0x40
 8006b06:	d001      	beq.n	8006b0c <USBD_StdItfReq+0x28>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d136      	bne.n	8006b7a <USBD_StdItfReq+0x96>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	239d      	movs	r3, #157	; 0x9d
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	5cd3      	ldrb	r3, [r2, r3]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	2b02      	cmp	r3, #2
 8006b18:	d826      	bhi.n	8006b68 <USBD_StdItfReq+0x84>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	889b      	ldrh	r3, [r3, #4]
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d81a      	bhi.n	8006b5a <USBD_StdItfReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	23a3      	movs	r3, #163	; 0xa3
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	58d3      	ldr	r3, [r2, r3]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	220f      	movs	r2, #15
 8006b30:	18bc      	adds	r4, r7, r2
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	687a      	ldr	r2, [r7, #4]
 8006b36:	0010      	movs	r0, r2
 8006b38:	4798      	blx	r3
 8006b3a:	0003      	movs	r3, r0
 8006b3c:	7023      	strb	r3, [r4, #0]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	88db      	ldrh	r3, [r3, #6]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d117      	bne.n	8006b76 <USBD_StdItfReq+0x92>
 8006b46:	230f      	movs	r3, #15
 8006b48:	18fb      	adds	r3, r7, r3
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d112      	bne.n	8006b76 <USBD_StdItfReq+0x92>
        {
          USBD_CtlSendStatus(pdev);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	0018      	movs	r0, r3
 8006b54:	f000 fdb8 	bl	80076c8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006b58:	e00d      	b.n	8006b76 <USBD_StdItfReq+0x92>
        USBD_CtlError(pdev, req);
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	0011      	movs	r1, r2
 8006b60:	0018      	movs	r0, r3
 8006b62:	f000 fcc8 	bl	80074f6 <USBD_CtlError>
      break;
 8006b66:	e006      	b.n	8006b76 <USBD_StdItfReq+0x92>

    default:
      USBD_CtlError(pdev, req);
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	0011      	movs	r1, r2
 8006b6e:	0018      	movs	r0, r3
 8006b70:	f000 fcc1 	bl	80074f6 <USBD_CtlError>
      break;
 8006b74:	e000      	b.n	8006b78 <USBD_StdItfReq+0x94>
      break;
 8006b76:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8006b78:	e006      	b.n	8006b88 <USBD_StdItfReq+0xa4>

  default:
    USBD_CtlError(pdev, req);
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	0011      	movs	r1, r2
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 fcb8 	bl	80074f6 <USBD_CtlError>
    break;
 8006b86:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b005      	add	sp, #20
 8006b90:	bd90      	pop	{r4, r7, pc}

08006b92 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8006b92:	b5b0      	push	{r4, r5, r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b9c:	230f      	movs	r3, #15
 8006b9e:	18fb      	adds	r3, r7, r3
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	889a      	ldrh	r2, [r3, #4]
 8006ba8:	230e      	movs	r3, #14
 8006baa:	18fb      	adds	r3, r7, r3
 8006bac:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	001a      	movs	r2, r3
 8006bb4:	2360      	movs	r3, #96	; 0x60
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d004      	beq.n	8006bc6 <USBD_StdEPReq+0x34>
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	d002      	beq.n	8006bc6 <USBD_StdEPReq+0x34>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00a      	beq.n	8006bda <USBD_StdEPReq+0x48>
 8006bc4:	e193      	b.n	8006eee <USBD_StdEPReq+0x35c>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	23a3      	movs	r3, #163	; 0xa3
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	58d3      	ldr	r3, [r2, r3]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	0010      	movs	r0, r2
 8006bd6:	4798      	blx	r3
    break;
 8006bd8:	e190      	b.n	8006efc <USBD_StdEPReq+0x36a>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	001a      	movs	r2, r3
 8006be0:	2360      	movs	r3, #96	; 0x60
 8006be2:	4013      	ands	r3, r2
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	d10f      	bne.n	8006c08 <USBD_StdEPReq+0x76>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	23a3      	movs	r3, #163	; 0xa3
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	58d3      	ldr	r3, [r2, r3]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	250f      	movs	r5, #15
 8006bf4:	197c      	adds	r4, r7, r5
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	0010      	movs	r0, r2
 8006bfc:	4798      	blx	r3
 8006bfe:	0003      	movs	r3, r0
 8006c00:	7023      	strb	r3, [r4, #0]

      return ret;
 8006c02:	197b      	adds	r3, r7, r5
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	e17c      	b.n	8006f02 <USBD_StdEPReq+0x370>
    }

    switch (req->bRequest)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	785b      	ldrb	r3, [r3, #1]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d054      	beq.n	8006cba <USBD_StdEPReq+0x128>
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d003      	beq.n	8006c1c <USBD_StdEPReq+0x8a>
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d100      	bne.n	8006c1a <USBD_StdEPReq+0x88>
 8006c18:	e097      	b.n	8006d4a <USBD_StdEPReq+0x1b8>
 8006c1a:	e160      	b.n	8006ede <USBD_StdEPReq+0x34c>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	239d      	movs	r3, #157	; 0x9d
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	5cd3      	ldrb	r3, [r2, r3]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d002      	beq.n	8006c2e <USBD_StdEPReq+0x9c>
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d01f      	beq.n	8006c6c <USBD_StdEPReq+0xda>
 8006c2c:	e03d      	b.n	8006caa <USBD_StdEPReq+0x118>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c2e:	230e      	movs	r3, #14
 8006c30:	18fb      	adds	r3, r7, r3
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d012      	beq.n	8006c5e <USBD_StdEPReq+0xcc>
 8006c38:	230e      	movs	r3, #14
 8006c3a:	18fb      	adds	r3, r7, r3
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	2b80      	cmp	r3, #128	; 0x80
 8006c40:	d00d      	beq.n	8006c5e <USBD_StdEPReq+0xcc>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006c42:	230e      	movs	r3, #14
 8006c44:	18fb      	adds	r3, r7, r3
 8006c46:	781a      	ldrb	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	0011      	movs	r1, r2
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f001 f8da 	bl	8007e06 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2180      	movs	r1, #128	; 0x80
 8006c56:	0018      	movs	r0, r3
 8006c58:	f001 f8d5 	bl	8007e06 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006c5c:	e02c      	b.n	8006cb8 <USBD_StdEPReq+0x126>
          USBD_CtlError(pdev, req);
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	0011      	movs	r1, r2
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 fc46 	bl	80074f6 <USBD_CtlError>
        break;
 8006c6a:	e025      	b.n	8006cb8 <USBD_StdEPReq+0x126>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	885b      	ldrh	r3, [r3, #2]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d115      	bne.n	8006ca0 <USBD_StdEPReq+0x10e>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c74:	230e      	movs	r3, #14
 8006c76:	18fb      	adds	r3, r7, r3
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d010      	beq.n	8006ca0 <USBD_StdEPReq+0x10e>
 8006c7e:	230e      	movs	r3, #14
 8006c80:	18fb      	adds	r3, r7, r3
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b80      	cmp	r3, #128	; 0x80
 8006c86:	d00b      	beq.n	8006ca0 <USBD_StdEPReq+0x10e>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	88db      	ldrh	r3, [r3, #6]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d107      	bne.n	8006ca0 <USBD_StdEPReq+0x10e>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8006c90:	230e      	movs	r3, #14
 8006c92:	18fb      	adds	r3, r7, r3
 8006c94:	781a      	ldrb	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	0011      	movs	r1, r2
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f001 f8b3 	bl	8007e06 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f000 fd10 	bl	80076c8 <USBD_CtlSendStatus>

        break;
 8006ca8:	e006      	b.n	8006cb8 <USBD_StdEPReq+0x126>

      default:
        USBD_CtlError(pdev, req);
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0011      	movs	r1, r2
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 fc20 	bl	80074f6 <USBD_CtlError>
        break;
 8006cb6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006cb8:	e118      	b.n	8006eec <USBD_StdEPReq+0x35a>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	239d      	movs	r3, #157	; 0x9d
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	5cd3      	ldrb	r3, [r2, r3]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d002      	beq.n	8006ccc <USBD_StdEPReq+0x13a>
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d01f      	beq.n	8006d0a <USBD_StdEPReq+0x178>
 8006cca:	e035      	b.n	8006d38 <USBD_StdEPReq+0x1a6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ccc:	230e      	movs	r3, #14
 8006cce:	18fb      	adds	r3, r7, r3
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d012      	beq.n	8006cfc <USBD_StdEPReq+0x16a>
 8006cd6:	230e      	movs	r3, #14
 8006cd8:	18fb      	adds	r3, r7, r3
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	2b80      	cmp	r3, #128	; 0x80
 8006cde:	d00d      	beq.n	8006cfc <USBD_StdEPReq+0x16a>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8006ce0:	230e      	movs	r3, #14
 8006ce2:	18fb      	adds	r3, r7, r3
 8006ce4:	781a      	ldrb	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	0011      	movs	r1, r2
 8006cea:	0018      	movs	r0, r3
 8006cec:	f001 f88b 	bl	8007e06 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2180      	movs	r1, #128	; 0x80
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f001 f886 	bl	8007e06 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006cfa:	e025      	b.n	8006d48 <USBD_StdEPReq+0x1b6>
          USBD_CtlError(pdev, req);
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	0011      	movs	r1, r2
 8006d02:	0018      	movs	r0, r3
 8006d04:	f000 fbf7 	bl	80074f6 <USBD_CtlError>
        break;
 8006d08:	e01e      	b.n	8006d48 <USBD_StdEPReq+0x1b6>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	885b      	ldrh	r3, [r3, #2]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d119      	bne.n	8006d46 <USBD_StdEPReq+0x1b4>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006d12:	230e      	movs	r3, #14
 8006d14:	18fb      	adds	r3, r7, r3
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	227f      	movs	r2, #127	; 0x7f
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	d007      	beq.n	8006d2e <USBD_StdEPReq+0x19c>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d1e:	230e      	movs	r3, #14
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	781a      	ldrb	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	0011      	movs	r1, r2
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f001 f898 	bl	8007e5e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f000 fcc9 	bl	80076c8 <USBD_CtlSendStatus>
        }
        break;
 8006d36:	e006      	b.n	8006d46 <USBD_StdEPReq+0x1b4>

      default:
        USBD_CtlError(pdev, req);
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	0011      	movs	r1, r2
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f000 fbd9 	bl	80074f6 <USBD_CtlError>
        break;
 8006d44:	e000      	b.n	8006d48 <USBD_StdEPReq+0x1b6>
        break;
 8006d46:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006d48:	e0d0      	b.n	8006eec <USBD_StdEPReq+0x35a>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	239d      	movs	r3, #157	; 0x9d
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	5cd3      	ldrb	r3, [r2, r3]
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d002      	beq.n	8006d5c <USBD_StdEPReq+0x1ca>
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d03d      	beq.n	8006dd6 <USBD_StdEPReq+0x244>
 8006d5a:	e0b8      	b.n	8006ece <USBD_StdEPReq+0x33c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d5c:	230e      	movs	r3, #14
 8006d5e:	18fb      	adds	r3, r7, r3
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <USBD_StdEPReq+0x1ec>
 8006d66:	230e      	movs	r3, #14
 8006d68:	18fb      	adds	r3, r7, r3
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	2b80      	cmp	r3, #128	; 0x80
 8006d6e:	d006      	beq.n	8006d7e <USBD_StdEPReq+0x1ec>
        {
          USBD_CtlError(pdev, req);
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	0011      	movs	r1, r2
 8006d76:	0018      	movs	r0, r3
 8006d78:	f000 fbbd 	bl	80074f6 <USBD_CtlError>
          break;
 8006d7c:	e0ae      	b.n	8006edc <USBD_StdEPReq+0x34a>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006d7e:	230e      	movs	r3, #14
 8006d80:	18fb      	adds	r3, r7, r3
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	b25b      	sxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	da0d      	bge.n	8006da6 <USBD_StdEPReq+0x214>
 8006d8a:	230e      	movs	r3, #14
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	227f      	movs	r2, #127	; 0x7f
 8006d92:	401a      	ands	r2, r3
 8006d94:	0013      	movs	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	189b      	adds	r3, r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	3310      	adds	r3, #16
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	18d3      	adds	r3, r2, r3
 8006da2:	3304      	adds	r3, #4
 8006da4:	e00c      	b.n	8006dc0 <USBD_StdEPReq+0x22e>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006da6:	230e      	movs	r3, #14
 8006da8:	18fb      	adds	r3, r7, r3
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	227f      	movs	r2, #127	; 0x7f
 8006dae:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006db0:	0013      	movs	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	189b      	adds	r3, r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	3341      	adds	r3, #65	; 0x41
 8006dba:	33ff      	adds	r3, #255	; 0xff
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	18d3      	adds	r3, r2, r3
 8006dc0:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f000 fc10 	bl	80075f4 <USBD_CtlSendData>
          break;
 8006dd4:	e082      	b.n	8006edc <USBD_StdEPReq+0x34a>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8006dd6:	230e      	movs	r3, #14
 8006dd8:	18fb      	adds	r3, r7, r3
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	b25b      	sxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	da15      	bge.n	8006e0e <USBD_StdEPReq+0x27c>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006de2:	230e      	movs	r3, #14
 8006de4:	18fb      	adds	r3, r7, r3
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	220f      	movs	r2, #15
 8006dea:	401a      	ands	r2, r3
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	0013      	movs	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	189b      	adds	r3, r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	18cb      	adds	r3, r1, r3
 8006df8:	3318      	adds	r3, #24
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d11e      	bne.n	8006e3e <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	0011      	movs	r1, r2
 8006e06:	0018      	movs	r0, r3
 8006e08:	f000 fb75 	bl	80074f6 <USBD_CtlError>
            break;
 8006e0c:	e066      	b.n	8006edc <USBD_StdEPReq+0x34a>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e0e:	230e      	movs	r3, #14
 8006e10:	18fb      	adds	r3, r7, r3
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	220f      	movs	r2, #15
 8006e16:	401a      	ands	r2, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	23a2      	movs	r3, #162	; 0xa2
 8006e1c:	0059      	lsls	r1, r3, #1
 8006e1e:	0013      	movs	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	189b      	adds	r3, r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	18c3      	adds	r3, r0, r3
 8006e28:	185b      	adds	r3, r3, r1
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <USBD_StdEPReq+0x2ac>
          {
            USBD_CtlError(pdev, req);
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	0011      	movs	r1, r2
 8006e36:	0018      	movs	r0, r3
 8006e38:	f000 fb5d 	bl	80074f6 <USBD_CtlError>
            break;
 8006e3c:	e04e      	b.n	8006edc <USBD_StdEPReq+0x34a>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006e3e:	230e      	movs	r3, #14
 8006e40:	18fb      	adds	r3, r7, r3
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	b25b      	sxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	da0d      	bge.n	8006e66 <USBD_StdEPReq+0x2d4>
 8006e4a:	230e      	movs	r3, #14
 8006e4c:	18fb      	adds	r3, r7, r3
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	227f      	movs	r2, #127	; 0x7f
 8006e52:	401a      	ands	r2, r3
 8006e54:	0013      	movs	r3, r2
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	189b      	adds	r3, r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	3310      	adds	r3, #16
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	18d3      	adds	r3, r2, r3
 8006e62:	3304      	adds	r3, #4
 8006e64:	e00c      	b.n	8006e80 <USBD_StdEPReq+0x2ee>
          &pdev->ep_out[ep_addr & 0x7FU];
 8006e66:	230e      	movs	r3, #14
 8006e68:	18fb      	adds	r3, r7, r3
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	227f      	movs	r2, #127	; 0x7f
 8006e6e:	401a      	ands	r2, r3
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8006e70:	0013      	movs	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	189b      	adds	r3, r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	3341      	adds	r3, #65	; 0x41
 8006e7a:	33ff      	adds	r3, #255	; 0xff
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	18d3      	adds	r3, r2, r3
 8006e80:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e82:	230e      	movs	r3, #14
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d004      	beq.n	8006e96 <USBD_StdEPReq+0x304>
 8006e8c:	230e      	movs	r3, #14
 8006e8e:	18fb      	adds	r3, r7, r3
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b80      	cmp	r3, #128	; 0x80
 8006e94:	d103      	bne.n	8006e9e <USBD_StdEPReq+0x30c>
          {
            pep->status = 0x0000U;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	e010      	b.n	8006ec0 <USBD_StdEPReq+0x32e>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8006e9e:	230e      	movs	r3, #14
 8006ea0:	18fb      	adds	r3, r7, r3
 8006ea2:	781a      	ldrb	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	0011      	movs	r1, r2
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f001 f804 	bl	8007eb6 <USBD_LL_IsStallEP>
 8006eae:	1e03      	subs	r3, r0, #0
 8006eb0:	d003      	beq.n	8006eba <USBD_StdEPReq+0x328>
          {
            pep->status = 0x0001U;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	e002      	b.n	8006ec0 <USBD_StdEPReq+0x32e>
          }
          else
          {
            pep->status = 0x0000U;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006ec0:	68b9      	ldr	r1, [r7, #8]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f000 fb94 	bl	80075f4 <USBD_CtlSendData>
          break;
 8006ecc:	e006      	b.n	8006edc <USBD_StdEPReq+0x34a>

      default:
        USBD_CtlError(pdev, req);
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	0011      	movs	r1, r2
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f000 fb0e 	bl	80074f6 <USBD_CtlError>
        break;
 8006eda:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006edc:	e006      	b.n	8006eec <USBD_StdEPReq+0x35a>

    default:
      USBD_CtlError(pdev, req);
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	0011      	movs	r1, r2
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f000 fb06 	bl	80074f6 <USBD_CtlError>
      break;
 8006eea:	46c0      	nop			; (mov r8, r8)
    }
    break;
 8006eec:	e006      	b.n	8006efc <USBD_StdEPReq+0x36a>

  default:
    USBD_CtlError(pdev, req);
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	0011      	movs	r1, r2
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 fafe 	bl	80074f6 <USBD_CtlError>
    break;
 8006efa:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006efc:	230f      	movs	r3, #15
 8006efe:	18fb      	adds	r3, r7, r3
 8006f00:	781b      	ldrb	r3, [r3, #0]
}
 8006f02:	0018      	movs	r0, r3
 8006f04:	46bd      	mov	sp, r7
 8006f06:	b004      	add	sp, #16
 8006f08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006f0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	885b      	ldrh	r3, [r3, #2]
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	2b07      	cmp	r3, #7
 8006f20:	d900      	bls.n	8006f24 <USBD_GetDescriptor+0x18>
 8006f22:	e0ce      	b.n	80070c2 <USBD_GetDescriptor+0x1b6>
 8006f24:	009a      	lsls	r2, r3, #2
 8006f26:	4b80      	ldr	r3, [pc, #512]	; (8007128 <USBD_GetDescriptor+0x21c>)
 8006f28:	18d3      	adds	r3, r2, r3
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	469f      	mov	pc, r3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	23a2      	movs	r3, #162	; 0xa2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	58d3      	ldr	r3, [r2, r3]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7c12      	ldrb	r2, [r2, #16]
 8006f3c:	210a      	movs	r1, #10
 8006f3e:	1879      	adds	r1, r7, r1
 8006f40:	0010      	movs	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	0003      	movs	r3, r0
 8006f46:	60fb      	str	r3, [r7, #12]
    break;
 8006f48:	e0c2      	b.n	80070d0 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7c1b      	ldrb	r3, [r3, #16]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10f      	bne.n	8006f72 <USBD_GetDescriptor+0x66>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	23a3      	movs	r3, #163	; 0xa3
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	58d3      	ldr	r3, [r2, r3]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	220a      	movs	r2, #10
 8006f5e:	18ba      	adds	r2, r7, r2
 8006f60:	0010      	movs	r0, r2
 8006f62:	4798      	blx	r3
 8006f64:	0003      	movs	r3, r0
 8006f66:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006f70:	e0ae      	b.n	80070d0 <USBD_GetDescriptor+0x1c4>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	23a3      	movs	r3, #163	; 0xa3
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	58d3      	ldr	r3, [r2, r3]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	220a      	movs	r2, #10
 8006f7e:	18ba      	adds	r2, r7, r2
 8006f80:	0010      	movs	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	0003      	movs	r3, r0
 8006f86:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	701a      	strb	r2, [r3, #0]
    break;
 8006f90:	e09e      	b.n	80070d0 <USBD_GetDescriptor+0x1c4>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	885b      	ldrh	r3, [r3, #2]
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b05      	cmp	r3, #5
 8006f9a:	d858      	bhi.n	800704e <USBD_GetDescriptor+0x142>
 8006f9c:	009a      	lsls	r2, r3, #2
 8006f9e:	4b63      	ldr	r3, [pc, #396]	; (800712c <USBD_GetDescriptor+0x220>)
 8006fa0:	18d3      	adds	r3, r2, r3
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	469f      	mov	pc, r3
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	23a2      	movs	r3, #162	; 0xa2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	58d3      	ldr	r3, [r2, r3]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	7c12      	ldrb	r2, [r2, #16]
 8006fb4:	210a      	movs	r1, #10
 8006fb6:	1879      	adds	r1, r7, r1
 8006fb8:	0010      	movs	r0, r2
 8006fba:	4798      	blx	r3
 8006fbc:	0003      	movs	r3, r0
 8006fbe:	60fb      	str	r3, [r7, #12]
      break;
 8006fc0:	e04c      	b.n	800705c <USBD_GetDescriptor+0x150>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	23a2      	movs	r3, #162	; 0xa2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	58d3      	ldr	r3, [r2, r3]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	7c12      	ldrb	r2, [r2, #16]
 8006fd0:	210a      	movs	r1, #10
 8006fd2:	1879      	adds	r1, r7, r1
 8006fd4:	0010      	movs	r0, r2
 8006fd6:	4798      	blx	r3
 8006fd8:	0003      	movs	r3, r0
 8006fda:	60fb      	str	r3, [r7, #12]
      break;
 8006fdc:	e03e      	b.n	800705c <USBD_GetDescriptor+0x150>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	23a2      	movs	r3, #162	; 0xa2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	58d3      	ldr	r3, [r2, r3]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	7c12      	ldrb	r2, [r2, #16]
 8006fec:	210a      	movs	r1, #10
 8006fee:	1879      	adds	r1, r7, r1
 8006ff0:	0010      	movs	r0, r2
 8006ff2:	4798      	blx	r3
 8006ff4:	0003      	movs	r3, r0
 8006ff6:	60fb      	str	r3, [r7, #12]
      break;
 8006ff8:	e030      	b.n	800705c <USBD_GetDescriptor+0x150>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	23a2      	movs	r3, #162	; 0xa2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	58d3      	ldr	r3, [r2, r3]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	7c12      	ldrb	r2, [r2, #16]
 8007008:	210a      	movs	r1, #10
 800700a:	1879      	adds	r1, r7, r1
 800700c:	0010      	movs	r0, r2
 800700e:	4798      	blx	r3
 8007010:	0003      	movs	r3, r0
 8007012:	60fb      	str	r3, [r7, #12]
      break;
 8007014:	e022      	b.n	800705c <USBD_GetDescriptor+0x150>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	23a2      	movs	r3, #162	; 0xa2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	58d3      	ldr	r3, [r2, r3]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	687a      	ldr	r2, [r7, #4]
 8007022:	7c12      	ldrb	r2, [r2, #16]
 8007024:	210a      	movs	r1, #10
 8007026:	1879      	adds	r1, r7, r1
 8007028:	0010      	movs	r0, r2
 800702a:	4798      	blx	r3
 800702c:	0003      	movs	r3, r0
 800702e:	60fb      	str	r3, [r7, #12]
      break;
 8007030:	e014      	b.n	800705c <USBD_GetDescriptor+0x150>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	23a2      	movs	r3, #162	; 0xa2
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	58d3      	ldr	r3, [r2, r3]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	7c12      	ldrb	r2, [r2, #16]
 8007040:	210a      	movs	r1, #10
 8007042:	1879      	adds	r1, r7, r1
 8007044:	0010      	movs	r0, r2
 8007046:	4798      	blx	r3
 8007048:	0003      	movs	r3, r0
 800704a:	60fb      	str	r3, [r7, #12]
      break;
 800704c:	e006      	b.n	800705c <USBD_GetDescriptor+0x150>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	0011      	movs	r1, r2
 8007054:	0018      	movs	r0, r3
 8007056:	f000 fa4e 	bl	80074f6 <USBD_CtlError>
      return;
 800705a:	e061      	b.n	8007120 <USBD_GetDescriptor+0x214>
#endif
    }
    break;
 800705c:	e038      	b.n	80070d0 <USBD_GetDescriptor+0x1c4>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	7c1b      	ldrb	r3, [r3, #16]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10b      	bne.n	800707e <USBD_GetDescriptor+0x172>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	23a3      	movs	r3, #163	; 0xa3
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	58d3      	ldr	r3, [r2, r3]
 800706e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007070:	220a      	movs	r2, #10
 8007072:	18ba      	adds	r2, r7, r2
 8007074:	0010      	movs	r0, r2
 8007076:	4798      	blx	r3
 8007078:	0003      	movs	r3, r0
 800707a:	60fb      	str	r3, [r7, #12]
      break;
 800707c:	e028      	b.n	80070d0 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	0011      	movs	r1, r2
 8007084:	0018      	movs	r0, r3
 8007086:	f000 fa36 	bl	80074f6 <USBD_CtlError>
      return;
 800708a:	e049      	b.n	8007120 <USBD_GetDescriptor+0x214>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	7c1b      	ldrb	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10f      	bne.n	80070b4 <USBD_GetDescriptor+0x1a8>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	23a3      	movs	r3, #163	; 0xa3
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	58d3      	ldr	r3, [r2, r3]
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	220a      	movs	r2, #10
 80070a0:	18ba      	adds	r2, r7, r2
 80070a2:	0010      	movs	r0, r2
 80070a4:	4798      	blx	r3
 80070a6:	0003      	movs	r3, r0
 80070a8:	60fb      	str	r3, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	2207      	movs	r2, #7
 80070b0:	701a      	strb	r2, [r3, #0]
      break;
 80070b2:	e00d      	b.n	80070d0 <USBD_GetDescriptor+0x1c4>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	0011      	movs	r1, r2
 80070ba:	0018      	movs	r0, r3
 80070bc:	f000 fa1b 	bl	80074f6 <USBD_CtlError>
      return;
 80070c0:	e02e      	b.n	8007120 <USBD_GetDescriptor+0x214>
    }

  default:
     USBD_CtlError(pdev , req);
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	0011      	movs	r1, r2
 80070c8:	0018      	movs	r0, r3
 80070ca:	f000 fa14 	bl	80074f6 <USBD_CtlError>
    return;
 80070ce:	e027      	b.n	8007120 <USBD_GetDescriptor+0x214>
  }

  if((len != 0U) && (req->wLength != 0U))
 80070d0:	230a      	movs	r3, #10
 80070d2:	18fb      	adds	r3, r7, r3
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01a      	beq.n	8007110 <USBD_GetDescriptor+0x204>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	88db      	ldrh	r3, [r3, #6]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d016      	beq.n	8007110 <USBD_GetDescriptor+0x204>
  {

    len = MIN(len, req->wLength);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	88da      	ldrh	r2, [r3, #6]
 80070e6:	230a      	movs	r3, #10
 80070e8:	18fb      	adds	r3, r7, r3
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	1c18      	adds	r0, r3, #0
 80070ee:	1c11      	adds	r1, r2, #0
 80070f0:	b28a      	uxth	r2, r1
 80070f2:	b283      	uxth	r3, r0
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d900      	bls.n	80070fa <USBD_GetDescriptor+0x1ee>
 80070f8:	1c01      	adds	r1, r0, #0
 80070fa:	b28a      	uxth	r2, r1
 80070fc:	210a      	movs	r1, #10
 80070fe:	187b      	adds	r3, r7, r1
 8007100:	801a      	strh	r2, [r3, #0]

    USBD_CtlSendData (pdev, pbuf, len);
 8007102:	187b      	adds	r3, r7, r1
 8007104:	881a      	ldrh	r2, [r3, #0]
 8007106:	68f9      	ldr	r1, [r7, #12]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	0018      	movs	r0, r3
 800710c:	f000 fa72 	bl	80075f4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	88db      	ldrh	r3, [r3, #6]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d103      	bne.n	8007120 <USBD_GetDescriptor+0x214>
  {
   USBD_CtlSendStatus(pdev);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	0018      	movs	r0, r3
 800711c:	f000 fad4 	bl	80076c8 <USBD_CtlSendStatus>
  }
}
 8007120:	46bd      	mov	sp, r7
 8007122:	b004      	add	sp, #16
 8007124:	bd80      	pop	{r7, pc}
 8007126:	46c0      	nop			; (mov r8, r8)
 8007128:	08008260 	.word	0x08008260
 800712c:	08008280 	.word	0x08008280

08007130 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007130:	b590      	push	{r4, r7, lr}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	889b      	ldrh	r3, [r3, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d13d      	bne.n	80071be <USBD_SetAddress+0x8e>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	88db      	ldrh	r3, [r3, #6]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d139      	bne.n	80071be <USBD_SetAddress+0x8e>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	885b      	ldrh	r3, [r3, #2]
 800714e:	2b7f      	cmp	r3, #127	; 0x7f
 8007150:	d835      	bhi.n	80071be <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	885b      	ldrh	r3, [r3, #2]
 8007156:	b2da      	uxtb	r2, r3
 8007158:	230f      	movs	r3, #15
 800715a:	18fb      	adds	r3, r7, r3
 800715c:	217f      	movs	r1, #127	; 0x7f
 800715e:	400a      	ands	r2, r1
 8007160:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	239d      	movs	r3, #157	; 0x9d
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	5cd3      	ldrb	r3, [r2, r3]
 800716a:	2b03      	cmp	r3, #3
 800716c:	d106      	bne.n	800717c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev , req);
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	0011      	movs	r1, r2
 8007174:	0018      	movs	r0, r3
 8007176:	f000 f9be 	bl	80074f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717a:	e026      	b.n	80071ca <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	240f      	movs	r4, #15
 8007180:	193a      	adds	r2, r7, r4
 8007182:	4914      	ldr	r1, [pc, #80]	; (80071d4 <USBD_SetAddress+0xa4>)
 8007184:	7812      	ldrb	r2, [r2, #0]
 8007186:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007188:	193b      	adds	r3, r7, r4
 800718a:	781a      	ldrb	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	0011      	movs	r1, r2
 8007190:	0018      	movs	r0, r3
 8007192:	f000 febb 	bl	8007f0c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	0018      	movs	r0, r3
 800719a:	f000 fa95 	bl	80076c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800719e:	193b      	adds	r3, r7, r4
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d005      	beq.n	80071b2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	239d      	movs	r3, #157	; 0x9d
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	2102      	movs	r1, #2
 80071ae:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b0:	e00b      	b.n	80071ca <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	239d      	movs	r3, #157	; 0x9d
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	2101      	movs	r1, #1
 80071ba:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071bc:	e005      	b.n	80071ca <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	0011      	movs	r1, r2
 80071c4:	0018      	movs	r0, r3
 80071c6:	f000 f996 	bl	80074f6 <USBD_CtlError>
  }
}
 80071ca:	46c0      	nop			; (mov r8, r8)
 80071cc:	46bd      	mov	sp, r7
 80071ce:	b005      	add	sp, #20
 80071d0:	bd90      	pop	{r4, r7, pc}
 80071d2:	46c0      	nop			; (mov r8, r8)
 80071d4:	00000276 	.word	0x00000276

080071d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	885b      	ldrh	r3, [r3, #2]
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	4b4c      	ldr	r3, [pc, #304]	; (800731c <USBD_SetConfig+0x144>)
 80071ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071ec:	4b4b      	ldr	r3, [pc, #300]	; (800731c <USBD_SetConfig+0x144>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d906      	bls.n	8007202 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	0011      	movs	r1, r2
 80071fa:	0018      	movs	r0, r3
 80071fc:	f000 f97b 	bl	80074f6 <USBD_CtlError>
 8007200:	e088      	b.n	8007314 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	239d      	movs	r3, #157	; 0x9d
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	5cd3      	ldrb	r3, [r2, r3]
 800720a:	2b02      	cmp	r3, #2
 800720c:	d002      	beq.n	8007214 <USBD_SetConfig+0x3c>
 800720e:	2b03      	cmp	r3, #3
 8007210:	d029      	beq.n	8007266 <USBD_SetConfig+0x8e>
 8007212:	e071      	b.n	80072f8 <USBD_SetConfig+0x120>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8007214:	4b41      	ldr	r3, [pc, #260]	; (800731c <USBD_SetConfig+0x144>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01f      	beq.n	800725c <USBD_SetConfig+0x84>
      {
        pdev->dev_config = cfgidx;
 800721c:	4b3f      	ldr	r3, [pc, #252]	; (800731c <USBD_SetConfig+0x144>)
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	001a      	movs	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	239d      	movs	r3, #157	; 0x9d
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	2103      	movs	r1, #3
 800722e:	54d1      	strb	r1, [r2, r3]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007230:	4b3a      	ldr	r3, [pc, #232]	; (800731c <USBD_SetConfig+0x144>)
 8007232:	781a      	ldrb	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	0011      	movs	r1, r2
 8007238:	0018      	movs	r0, r3
 800723a:	f7ff f967 	bl	800650c <USBD_SetClassConfig>
 800723e:	0003      	movs	r3, r0
 8007240:	2b02      	cmp	r3, #2
 8007242:	d106      	bne.n	8007252 <USBD_SetConfig+0x7a>
        {
          USBD_CtlError(pdev, req);
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	0011      	movs	r1, r2
 800724a:	0018      	movs	r0, r3
 800724c:	f000 f953 	bl	80074f6 <USBD_CtlError>
          return;
 8007250:	e060      	b.n	8007314 <USBD_SetConfig+0x13c>
        }
        USBD_CtlSendStatus(pdev);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	0018      	movs	r0, r3
 8007256:	f000 fa37 	bl	80076c8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800725a:	e05b      	b.n	8007314 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	0018      	movs	r0, r3
 8007260:	f000 fa32 	bl	80076c8 <USBD_CtlSendStatus>
      break;
 8007264:	e056      	b.n	8007314 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007266:	4b2d      	ldr	r3, [pc, #180]	; (800731c <USBD_SetConfig+0x144>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d115      	bne.n	800729a <USBD_SetConfig+0xc2>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	239d      	movs	r3, #157	; 0x9d
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	2102      	movs	r1, #2
 8007276:	54d1      	strb	r1, [r2, r3]
        pdev->dev_config = cfgidx;
 8007278:	4b28      	ldr	r3, [pc, #160]	; (800731c <USBD_SetConfig+0x144>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	001a      	movs	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8007282:	4b26      	ldr	r3, [pc, #152]	; (800731c <USBD_SetConfig+0x144>)
 8007284:	781a      	ldrb	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	0011      	movs	r1, r2
 800728a:	0018      	movs	r0, r3
 800728c:	f7ff f966 	bl	800655c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	0018      	movs	r0, r3
 8007294:	f000 fa18 	bl	80076c8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007298:	e03c      	b.n	8007314 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800729a:	4b20      	ldr	r3, [pc, #128]	; (800731c <USBD_SetConfig+0x144>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	001a      	movs	r2, r3
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d022      	beq.n	80072ee <USBD_SetConfig+0x116>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	b2da      	uxtb	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	0011      	movs	r1, r2
 80072b2:	0018      	movs	r0, r3
 80072b4:	f7ff f952 	bl	800655c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072b8:	4b18      	ldr	r3, [pc, #96]	; (800731c <USBD_SetConfig+0x144>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	001a      	movs	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072c2:	4b16      	ldr	r3, [pc, #88]	; (800731c <USBD_SetConfig+0x144>)
 80072c4:	781a      	ldrb	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	0011      	movs	r1, r2
 80072ca:	0018      	movs	r0, r3
 80072cc:	f7ff f91e 	bl	800650c <USBD_SetClassConfig>
 80072d0:	0003      	movs	r3, r0
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d106      	bne.n	80072e4 <USBD_SetConfig+0x10c>
          USBD_CtlError(pdev, req);
 80072d6:	683a      	ldr	r2, [r7, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	0011      	movs	r1, r2
 80072dc:	0018      	movs	r0, r3
 80072de:	f000 f90a 	bl	80074f6 <USBD_CtlError>
          return;
 80072e2:	e017      	b.n	8007314 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	0018      	movs	r0, r3
 80072e8:	f000 f9ee 	bl	80076c8 <USBD_CtlSendStatus>
      break;
 80072ec:	e012      	b.n	8007314 <USBD_SetConfig+0x13c>
        USBD_CtlSendStatus(pdev);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	0018      	movs	r0, r3
 80072f2:	f000 f9e9 	bl	80076c8 <USBD_CtlSendStatus>
      break;
 80072f6:	e00d      	b.n	8007314 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	0011      	movs	r1, r2
 80072fe:	0018      	movs	r0, r3
 8007300:	f000 f8f9 	bl	80074f6 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <USBD_SetConfig+0x144>)
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	0011      	movs	r1, r2
 800730c:	0018      	movs	r0, r3
 800730e:	f7ff f925 	bl	800655c <USBD_ClrClassConfig>
      break;
 8007312:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007314:	46bd      	mov	sp, r7
 8007316:	b002      	add	sp, #8
 8007318:	bd80      	pop	{r7, pc}
 800731a:	46c0      	nop			; (mov r8, r8)
 800731c:	20000190 	.word	0x20000190

08007320 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	88db      	ldrh	r3, [r3, #6]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d006      	beq.n	8007340 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev , req);
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	0011      	movs	r1, r2
 8007338:	0018      	movs	r0, r3
 800733a:	f000 f8dc 	bl	80074f6 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800733e:	e025      	b.n	800738c <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	239d      	movs	r3, #157	; 0x9d
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	5cd3      	ldrb	r3, [r2, r3]
 8007348:	2b01      	cmp	r3, #1
 800734a:	db18      	blt.n	800737e <USBD_GetConfig+0x5e>
 800734c:	2b02      	cmp	r3, #2
 800734e:	dd02      	ble.n	8007356 <USBD_GetConfig+0x36>
 8007350:	2b03      	cmp	r3, #3
 8007352:	d00c      	beq.n	800736e <USBD_GetConfig+0x4e>
 8007354:	e013      	b.n	800737e <USBD_GetConfig+0x5e>
      pdev->dev_default_config = 0U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3308      	adds	r3, #8
 8007360:	0019      	movs	r1, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	0018      	movs	r0, r3
 8007368:	f000 f944 	bl	80075f4 <USBD_CtlSendData>
      break;
 800736c:	e00e      	b.n	800738c <USBD_GetConfig+0x6c>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	1d19      	adds	r1, r3, #4
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	0018      	movs	r0, r3
 8007378:	f000 f93c 	bl	80075f4 <USBD_CtlSendData>
      break;
 800737c:	e006      	b.n	800738c <USBD_GetConfig+0x6c>
      USBD_CtlError(pdev , req);
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	0011      	movs	r1, r2
 8007384:	0018      	movs	r0, r3
 8007386:	f000 f8b6 	bl	80074f6 <USBD_CtlError>
      break;
 800738a:	46c0      	nop			; (mov r8, r8)
}
 800738c:	46c0      	nop			; (mov r8, r8)
 800738e:	46bd      	mov	sp, r7
 8007390:	b002      	add	sp, #8
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	239d      	movs	r3, #157	; 0x9d
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	5cd3      	ldrb	r3, [r2, r3]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d822      	bhi.n	80073f2 <USBD_GetStatus+0x5e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	88db      	ldrh	r3, [r3, #6]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d006      	beq.n	80073c2 <USBD_GetStatus+0x2e>
    {
      USBD_CtlError(pdev, req);
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	0011      	movs	r1, r2
 80073ba:	0018      	movs	r0, r3
 80073bc:	f000 f89b 	bl	80074f6 <USBD_CtlError>
      break;
 80073c0:	e01e      	b.n	8007400 <USBD_GetStatus+0x6c>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	239f      	movs	r3, #159	; 0x9f
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	58d3      	ldr	r3, [r2, r3]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <USBD_GetStatus+0x4c>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	2202      	movs	r2, #2
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	330c      	adds	r3, #12
 80073e4:	0019      	movs	r1, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2202      	movs	r2, #2
 80073ea:	0018      	movs	r0, r3
 80073ec:	f000 f902 	bl	80075f4 <USBD_CtlSendData>
    break;
 80073f0:	e006      	b.n	8007400 <USBD_GetStatus+0x6c>

  default :
    USBD_CtlError(pdev , req);
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	0011      	movs	r1, r2
 80073f8:	0018      	movs	r0, r3
 80073fa:	f000 f87c 	bl	80074f6 <USBD_CtlError>
    break;
 80073fe:	46c0      	nop			; (mov r8, r8)
  }
}
 8007400:	46c0      	nop			; (mov r8, r8)
 8007402:	46bd      	mov	sp, r7
 8007404:	b002      	add	sp, #8
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b082      	sub	sp, #8
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	885b      	ldrh	r3, [r3, #2]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d108      	bne.n	800742c <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	239f      	movs	r3, #159	; 0x9f
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	2101      	movs	r1, #1
 8007422:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	0018      	movs	r0, r3
 8007428:	f000 f94e 	bl	80076c8 <USBD_CtlSendStatus>
  }

}
 800742c:	46c0      	nop			; (mov r8, r8)
 800742e:	46bd      	mov	sp, r7
 8007430:	b002      	add	sp, #8
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	239d      	movs	r3, #157	; 0x9d
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	5cd3      	ldrb	r3, [r2, r3]
 8007446:	3b01      	subs	r3, #1
 8007448:	2b02      	cmp	r3, #2
 800744a:	d80d      	bhi.n	8007468 <USBD_ClrFeature+0x34>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	885b      	ldrh	r3, [r3, #2]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d110      	bne.n	8007476 <USBD_ClrFeature+0x42>
    {
      pdev->dev_remote_wakeup = 0U;
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	239f      	movs	r3, #159	; 0x9f
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	2100      	movs	r1, #0
 800745c:	50d1      	str	r1, [r2, r3]
      USBD_CtlSendStatus(pdev);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	0018      	movs	r0, r3
 8007462:	f000 f931 	bl	80076c8 <USBD_CtlSendStatus>
    }
    break;
 8007466:	e006      	b.n	8007476 <USBD_ClrFeature+0x42>

  default :
     USBD_CtlError(pdev , req);
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	0011      	movs	r1, r2
 800746e:	0018      	movs	r0, r3
 8007470:	f000 f841 	bl	80074f6 <USBD_CtlError>
    break;
 8007474:	e000      	b.n	8007478 <USBD_ClrFeature+0x44>
    break;
 8007476:	46c0      	nop			; (mov r8, r8)
  }
}
 8007478:	46c0      	nop			; (mov r8, r8)
 800747a:	46bd      	mov	sp, r7
 800747c:	b002      	add	sp, #8
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781a      	ldrb	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	785a      	ldrb	r2, [r3, #1]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	3302      	adds	r3, #2
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	3303      	adds	r3, #3
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	18d3      	adds	r3, r2, r3
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	3304      	adds	r3, #4
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	b29a      	uxth	r2, r3
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	3305      	adds	r3, #5
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	021b      	lsls	r3, r3, #8
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	18d3      	adds	r3, r2, r3
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	3306      	adds	r3, #6
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	b29a      	uxth	r2, r3
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	3307      	adds	r3, #7
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	021b      	lsls	r3, r3, #8
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	18d3      	adds	r3, r2, r3
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	80da      	strh	r2, [r3, #6]

}
 80074ee:	46c0      	nop			; (mov r8, r8)
 80074f0:	46bd      	mov	sp, r7
 80074f2:	b002      	add	sp, #8
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b082      	sub	sp, #8
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
 80074fe:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2180      	movs	r1, #128	; 0x80
 8007504:	0018      	movs	r0, r3
 8007506:	f000 fc7e 	bl	8007e06 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2100      	movs	r1, #0
 800750e:	0018      	movs	r0, r3
 8007510:	f000 fc79 	bl	8007e06 <USBD_LL_StallEP>
}
 8007514:	46c0      	nop			; (mov r8, r8)
 8007516:	46bd      	mov	sp, r7
 8007518:	b002      	add	sp, #8
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800751c:	b590      	push	{r4, r7, lr}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007528:	2317      	movs	r3, #23
 800752a:	18fb      	adds	r3, r7, r3
 800752c:	2200      	movs	r2, #0
 800752e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d03d      	beq.n	80075b2 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	0018      	movs	r0, r3
 800753a:	f000 f83e 	bl	80075ba <USBD_GetLen>
 800753e:	0003      	movs	r3, r0
 8007540:	3301      	adds	r3, #1
 8007542:	b29b      	uxth	r3, r3
 8007544:	18db      	adds	r3, r3, r3
 8007546:	b29a      	uxth	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800754c:	2017      	movs	r0, #23
 800754e:	183b      	adds	r3, r7, r0
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	183a      	adds	r2, r7, r0
 8007554:	1c59      	adds	r1, r3, #1
 8007556:	7011      	strb	r1, [r2, #0]
 8007558:	001a      	movs	r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	189b      	adds	r3, r3, r2
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	7812      	ldrb	r2, [r2, #0]
 8007562:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007564:	183b      	adds	r3, r7, r0
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	183a      	adds	r2, r7, r0
 800756a:	1c59      	adds	r1, r3, #1
 800756c:	7011      	strb	r1, [r2, #0]
 800756e:	001a      	movs	r2, r3
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	189b      	adds	r3, r3, r2
 8007574:	2203      	movs	r2, #3
 8007576:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007578:	e017      	b.n	80075aa <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	60fa      	str	r2, [r7, #12]
 8007580:	2417      	movs	r4, #23
 8007582:	193a      	adds	r2, r7, r4
 8007584:	7812      	ldrb	r2, [r2, #0]
 8007586:	1939      	adds	r1, r7, r4
 8007588:	1c50      	adds	r0, r2, #1
 800758a:	7008      	strb	r0, [r1, #0]
 800758c:	0011      	movs	r1, r2
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	1852      	adds	r2, r2, r1
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007596:	193b      	adds	r3, r7, r4
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	193a      	adds	r2, r7, r4
 800759c:	1c59      	adds	r1, r3, #1
 800759e:	7011      	strb	r1, [r2, #0]
 80075a0:	001a      	movs	r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	189b      	adds	r3, r3, r2
 80075a6:	2200      	movs	r2, #0
 80075a8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1e3      	bne.n	800757a <USBD_GetString+0x5e>
    }
  }
}
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b007      	add	sp, #28
 80075b8:	bd90      	pop	{r4, r7, pc}

080075ba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80075c2:	230f      	movs	r3, #15
 80075c4:	18fb      	adds	r3, r7, r3
 80075c6:	2200      	movs	r2, #0
 80075c8:	701a      	strb	r2, [r3, #0]

    while (*buf != '\0')
 80075ca:	e008      	b.n	80075de <USBD_GetLen+0x24>
    {
        len++;
 80075cc:	210f      	movs	r1, #15
 80075ce:	187b      	adds	r3, r7, r1
 80075d0:	781a      	ldrb	r2, [r3, #0]
 80075d2:	187b      	adds	r3, r7, r1
 80075d4:	3201      	adds	r2, #1
 80075d6:	701a      	strb	r2, [r3, #0]
        buf++;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3301      	adds	r3, #1
 80075dc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1f2      	bne.n	80075cc <USBD_GetLen+0x12>
    }

    return len;
 80075e6:	230f      	movs	r3, #15
 80075e8:	18fb      	adds	r3, r7, r3
 80075ea:	781b      	ldrb	r3, [r3, #0]
}
 80075ec:	0018      	movs	r0, r3
 80075ee:	46bd      	mov	sp, r7
 80075f0:	b004      	add	sp, #16
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	1dbb      	adds	r3, r7, #6
 8007600:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	239b      	movs	r3, #155	; 0x9b
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	2102      	movs	r1, #2
 800760a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800760c:	1dbb      	adds	r3, r7, #6
 800760e:	881a      	ldrh	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007614:	1dbb      	adds	r3, r7, #6
 8007616:	881a      	ldrh	r2, [r3, #0]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800761c:	1dbb      	adds	r3, r7, #6
 800761e:	881b      	ldrh	r3, [r3, #0]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	2100      	movs	r1, #0
 8007626:	f000 fc9d 	bl	8007f64 <USBD_LL_Transmit>

  return USBD_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	0018      	movs	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	b004      	add	sp, #16
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	1dbb      	adds	r3, r7, #6
 8007640:	801a      	strh	r2, [r3, #0]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007642:	1dbb      	adds	r3, r7, #6
 8007644:	881b      	ldrh	r3, [r3, #0]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	2100      	movs	r1, #0
 800764c:	f000 fc8a 	bl	8007f64 <USBD_LL_Transmit>

  return USBD_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	0018      	movs	r0, r3
 8007654:	46bd      	mov	sp, r7
 8007656:	b004      	add	sp, #16
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	60f8      	str	r0, [r7, #12]
 8007662:	60b9      	str	r1, [r7, #8]
 8007664:	1dbb      	adds	r3, r7, #6
 8007666:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	239b      	movs	r3, #155	; 0x9b
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	2103      	movs	r1, #3
 8007670:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8007672:	1dbb      	adds	r3, r7, #6
 8007674:	8819      	ldrh	r1, [r3, #0]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	23a4      	movs	r3, #164	; 0xa4
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800767e:	1dbb      	adds	r3, r7, #6
 8007680:	8819      	ldrh	r1, [r3, #0]
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	23a6      	movs	r3, #166	; 0xa6
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800768a:	1dbb      	adds	r3, r7, #6
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	2100      	movs	r1, #0
 8007694:	f000 fc9e 	bl	8007fd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	0018      	movs	r0, r3
 800769c:	46bd      	mov	sp, r7
 800769e:	b004      	add	sp, #16
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	1dbb      	adds	r3, r7, #6
 80076ae:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076b0:	1dbb      	adds	r3, r7, #6
 80076b2:	881b      	ldrh	r3, [r3, #0]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	2100      	movs	r1, #0
 80076ba:	f000 fc8b 	bl	8007fd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	0018      	movs	r0, r3
 80076c2:	46bd      	mov	sp, r7
 80076c4:	b004      	add	sp, #16
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	239b      	movs	r3, #155	; 0x9b
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	2104      	movs	r1, #4
 80076d8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	2300      	movs	r3, #0
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	f000 fc3f 	bl	8007f64 <USBD_LL_Transmit>

  return USBD_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	0018      	movs	r0, r3
 80076ea:	46bd      	mov	sp, r7
 80076ec:	b002      	add	sp, #8
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	239b      	movs	r3, #155	; 0x9b
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	2105      	movs	r1, #5
 8007700:	50d1      	str	r1, [r2, r3]

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	2300      	movs	r3, #0
 8007706:	2200      	movs	r2, #0
 8007708:	2100      	movs	r1, #0
 800770a:	f000 fc63 	bl	8007fd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	0018      	movs	r0, r3
 8007712:	46bd      	mov	sp, r7
 8007714:	b002      	add	sp, #8
 8007716:	bd80      	pop	{r7, pc}

08007718 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800771c:	4914      	ldr	r1, [pc, #80]	; (8007770 <MX_USB_DEVICE_Init+0x58>)
 800771e:	4b15      	ldr	r3, [pc, #84]	; (8007774 <MX_USB_DEVICE_Init+0x5c>)
 8007720:	2200      	movs	r2, #0
 8007722:	0018      	movs	r0, r3
 8007724:	f7fe fe8a 	bl	800643c <USBD_Init>
 8007728:	1e03      	subs	r3, r0, #0
 800772a:	d001      	beq.n	8007730 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800772c:	f7f9 fa00 	bl	8000b30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007730:	4a11      	ldr	r2, [pc, #68]	; (8007778 <MX_USB_DEVICE_Init+0x60>)
 8007732:	4b10      	ldr	r3, [pc, #64]	; (8007774 <MX_USB_DEVICE_Init+0x5c>)
 8007734:	0011      	movs	r1, r2
 8007736:	0018      	movs	r0, r3
 8007738:	f7fe feb1 	bl	800649e <USBD_RegisterClass>
 800773c:	1e03      	subs	r3, r0, #0
 800773e:	d001      	beq.n	8007744 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007740:	f7f9 f9f6 	bl	8000b30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007744:	4a0d      	ldr	r2, [pc, #52]	; (800777c <MX_USB_DEVICE_Init+0x64>)
 8007746:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <MX_USB_DEVICE_Init+0x5c>)
 8007748:	0011      	movs	r1, r2
 800774a:	0018      	movs	r0, r3
 800774c:	f7fe fdfc 	bl	8006348 <USBD_CDC_RegisterInterface>
 8007750:	1e03      	subs	r3, r0, #0
 8007752:	d001      	beq.n	8007758 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007754:	f7f9 f9ec 	bl	8000b30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <MX_USB_DEVICE_Init+0x5c>)
 800775a:	0018      	movs	r0, r3
 800775c:	f7fe fec0 	bl	80064e0 <USBD_Start>
 8007760:	1e03      	subs	r3, r0, #0
 8007762:	d001      	beq.n	8007768 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8007764:	f7f9 f9e4 	bl	8000b30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007768:	46c0      	nop			; (mov r8, r8)
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	20000124 	.word	0x20000124
 8007774:	200004d4 	.word	0x200004d4
 8007778:	20000010 	.word	0x20000010
 800777c:	20000114 	.word	0x20000114

08007780 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007784:	4907      	ldr	r1, [pc, #28]	; (80077a4 <CDC_Init_FS+0x24>)
 8007786:	4b08      	ldr	r3, [pc, #32]	; (80077a8 <CDC_Init_FS+0x28>)
 8007788:	2200      	movs	r2, #0
 800778a:	0018      	movs	r0, r3
 800778c:	f7fe fdf8 	bl	8006380 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007790:	4a06      	ldr	r2, [pc, #24]	; (80077ac <CDC_Init_FS+0x2c>)
 8007792:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <CDC_Init_FS+0x28>)
 8007794:	0011      	movs	r1, r2
 8007796:	0018      	movs	r0, r3
 8007798:	f7fe fe0e 	bl	80063b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800779c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800779e:	0018      	movs	r0, r3
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000b58 	.word	0x20000b58
 80077a8:	200004d4 	.word	0x200004d4
 80077ac:	20000770 	.word	0x20000770

080077b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077b6:	0018      	movs	r0, r3
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6039      	str	r1, [r7, #0]
 80077c4:	0011      	movs	r1, r2
 80077c6:	1dfb      	adds	r3, r7, #7
 80077c8:	1c02      	adds	r2, r0, #0
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	1d3b      	adds	r3, r7, #4
 80077ce:	1c0a      	adds	r2, r1, #0
 80077d0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80077d2:	1dfb      	adds	r3, r7, #7
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b23      	cmp	r3, #35	; 0x23
 80077d8:	d804      	bhi.n	80077e4 <CDC_Control_FS+0x28>
 80077da:	009a      	lsls	r2, r3, #2
 80077dc:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <CDC_Control_FS+0x34>)
 80077de:	18d3      	adds	r3, r2, r3
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077e4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 80077e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077e8:	0018      	movs	r0, r3
 80077ea:	46bd      	mov	sp, r7
 80077ec:	b002      	add	sp, #8
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	08008298 	.word	0x08008298

080077f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	4b06      	ldr	r3, [pc, #24]	; (800781c <CDC_Receive_FS+0x28>)
 8007802:	0011      	movs	r1, r2
 8007804:	0018      	movs	r0, r3
 8007806:	f7fe fdd7 	bl	80063b8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800780a:	4b04      	ldr	r3, [pc, #16]	; (800781c <CDC_Receive_FS+0x28>)
 800780c:	0018      	movs	r0, r3
 800780e:	f7fe fde7 	bl	80063e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007812:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007814:	0018      	movs	r0, r3
 8007816:	46bd      	mov	sp, r7
 8007818:	b002      	add	sp, #8
 800781a:	bd80      	pop	{r7, pc}
 800781c:	200004d4 	.word	0x200004d4

08007820 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	0002      	movs	r2, r0
 8007828:	6039      	str	r1, [r7, #0]
 800782a:	1dfb      	adds	r3, r7, #7
 800782c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2212      	movs	r2, #18
 8007832:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007834:	4b02      	ldr	r3, [pc, #8]	; (8007840 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007836:	0018      	movs	r0, r3
 8007838:	46bd      	mov	sp, r7
 800783a:	b002      	add	sp, #8
 800783c:	bd80      	pop	{r7, pc}
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	20000140 	.word	0x20000140

08007844 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	0002      	movs	r2, r0
 800784c:	6039      	str	r1, [r7, #0]
 800784e:	1dfb      	adds	r3, r7, #7
 8007850:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2204      	movs	r2, #4
 8007856:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007858:	4b02      	ldr	r3, [pc, #8]	; (8007864 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800785a:	0018      	movs	r0, r3
 800785c:	46bd      	mov	sp, r7
 800785e:	b002      	add	sp, #8
 8007860:	bd80      	pop	{r7, pc}
 8007862:	46c0      	nop			; (mov r8, r8)
 8007864:	20000154 	.word	0x20000154

08007868 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	0002      	movs	r2, r0
 8007870:	6039      	str	r1, [r7, #0]
 8007872:	1dfb      	adds	r3, r7, #7
 8007874:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007876:	1dfb      	adds	r3, r7, #7
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d106      	bne.n	800788c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	4908      	ldr	r1, [pc, #32]	; (80078a4 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <USBD_FS_ProductStrDescriptor+0x40>)
 8007884:	0018      	movs	r0, r3
 8007886:	f7ff fe49 	bl	800751c <USBD_GetString>
 800788a:	e005      	b.n	8007898 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	4905      	ldr	r1, [pc, #20]	; (80078a4 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007890:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <USBD_FS_ProductStrDescriptor+0x40>)
 8007892:	0018      	movs	r0, r3
 8007894:	f7ff fe42 	bl	800751c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007898:	4b02      	ldr	r3, [pc, #8]	; (80078a4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800789a:	0018      	movs	r0, r3
 800789c:	46bd      	mov	sp, r7
 800789e:	b002      	add	sp, #8
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	46c0      	nop			; (mov r8, r8)
 80078a4:	20000f40 	.word	0x20000f40
 80078a8:	08008184 	.word	0x08008184

080078ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	0002      	movs	r2, r0
 80078b4:	6039      	str	r1, [r7, #0]
 80078b6:	1dfb      	adds	r3, r7, #7
 80078b8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	4904      	ldr	r1, [pc, #16]	; (80078d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80078c0:	0018      	movs	r0, r3
 80078c2:	f7ff fe2b 	bl	800751c <USBD_GetString>
  return USBD_StrDesc;
 80078c6:	4b02      	ldr	r3, [pc, #8]	; (80078d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80078c8:	0018      	movs	r0, r3
 80078ca:	46bd      	mov	sp, r7
 80078cc:	b002      	add	sp, #8
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20000f40 	.word	0x20000f40
 80078d4:	0800819c 	.word	0x0800819c

080078d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	0002      	movs	r2, r0
 80078e0:	6039      	str	r1, [r7, #0]
 80078e2:	1dfb      	adds	r3, r7, #7
 80078e4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	221a      	movs	r2, #26
 80078ea:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80078ec:	f000 f84c 	bl	8007988 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80078f0:	4b02      	ldr	r3, [pc, #8]	; (80078fc <USBD_FS_SerialStrDescriptor+0x24>)
}
 80078f2:	0018      	movs	r0, r3
 80078f4:	46bd      	mov	sp, r7
 80078f6:	b002      	add	sp, #8
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	46c0      	nop			; (mov r8, r8)
 80078fc:	20000158 	.word	0x20000158

08007900 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	0002      	movs	r2, r0
 8007908:	6039      	str	r1, [r7, #0]
 800790a:	1dfb      	adds	r3, r7, #7
 800790c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800790e:	1dfb      	adds	r3, r7, #7
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	4908      	ldr	r1, [pc, #32]	; (800793c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800791a:	4b09      	ldr	r3, [pc, #36]	; (8007940 <USBD_FS_ConfigStrDescriptor+0x40>)
 800791c:	0018      	movs	r0, r3
 800791e:	f7ff fdfd 	bl	800751c <USBD_GetString>
 8007922:	e005      	b.n	8007930 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	4905      	ldr	r1, [pc, #20]	; (800793c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007928:	4b05      	ldr	r3, [pc, #20]	; (8007940 <USBD_FS_ConfigStrDescriptor+0x40>)
 800792a:	0018      	movs	r0, r3
 800792c:	f7ff fdf6 	bl	800751c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007930:	4b02      	ldr	r3, [pc, #8]	; (800793c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007932:	0018      	movs	r0, r3
 8007934:	46bd      	mov	sp, r7
 8007936:	b002      	add	sp, #8
 8007938:	bd80      	pop	{r7, pc}
 800793a:	46c0      	nop			; (mov r8, r8)
 800793c:	20000f40 	.word	0x20000f40
 8007940:	080081b0 	.word	0x080081b0

08007944 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b082      	sub	sp, #8
 8007948:	af00      	add	r7, sp, #0
 800794a:	0002      	movs	r2, r0
 800794c:	6039      	str	r1, [r7, #0]
 800794e:	1dfb      	adds	r3, r7, #7
 8007950:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007952:	1dfb      	adds	r3, r7, #7
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	4908      	ldr	r1, [pc, #32]	; (8007980 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800795e:	4b09      	ldr	r3, [pc, #36]	; (8007984 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007960:	0018      	movs	r0, r3
 8007962:	f7ff fddb 	bl	800751c <USBD_GetString>
 8007966:	e005      	b.n	8007974 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	4905      	ldr	r1, [pc, #20]	; (8007980 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800796e:	0018      	movs	r0, r3
 8007970:	f7ff fdd4 	bl	800751c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007974:	4b02      	ldr	r3, [pc, #8]	; (8007980 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007976:	0018      	movs	r0, r3
 8007978:	46bd      	mov	sp, r7
 800797a:	b002      	add	sp, #8
 800797c:	bd80      	pop	{r7, pc}
 800797e:	46c0      	nop			; (mov r8, r8)
 8007980:	20000f40 	.word	0x20000f40
 8007984:	080081bc 	.word	0x080081bc

08007988 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800798e:	4b10      	ldr	r3, [pc, #64]	; (80079d0 <Get_SerialNum+0x48>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007994:	4b0f      	ldr	r3, [pc, #60]	; (80079d4 <Get_SerialNum+0x4c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800799a:	4b0f      	ldr	r3, [pc, #60]	; (80079d8 <Get_SerialNum+0x50>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	18d3      	adds	r3, r2, r3
 80079a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00b      	beq.n	80079c6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079ae:	490b      	ldr	r1, [pc, #44]	; (80079dc <Get_SerialNum+0x54>)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2208      	movs	r2, #8
 80079b4:	0018      	movs	r0, r3
 80079b6:	f000 f815 	bl	80079e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079ba:	4909      	ldr	r1, [pc, #36]	; (80079e0 <Get_SerialNum+0x58>)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	2204      	movs	r2, #4
 80079c0:	0018      	movs	r0, r3
 80079c2:	f000 f80f 	bl	80079e4 <IntToUnicode>
  }
}
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	46bd      	mov	sp, r7
 80079ca:	b004      	add	sp, #16
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	1ff80050 	.word	0x1ff80050
 80079d4:	1ff80054 	.word	0x1ff80054
 80079d8:	1ff80058 	.word	0x1ff80058
 80079dc:	2000015a 	.word	0x2000015a
 80079e0:	2000016a 	.word	0x2000016a

080079e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	1dfb      	adds	r3, r7, #7
 80079f0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80079f2:	2117      	movs	r1, #23
 80079f4:	187b      	adds	r3, r7, r1
 80079f6:	2200      	movs	r2, #0
 80079f8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80079fa:	187b      	adds	r3, r7, r1
 80079fc:	2200      	movs	r2, #0
 80079fe:	701a      	strb	r2, [r3, #0]
 8007a00:	e02f      	b.n	8007a62 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	0f1b      	lsrs	r3, r3, #28
 8007a06:	2b09      	cmp	r3, #9
 8007a08:	d80d      	bhi.n	8007a26 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	0f1b      	lsrs	r3, r3, #28
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	2317      	movs	r3, #23
 8007a12:	18fb      	adds	r3, r7, r3
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	005b      	lsls	r3, r3, #1
 8007a18:	0019      	movs	r1, r3
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	185b      	adds	r3, r3, r1
 8007a1e:	3230      	adds	r2, #48	; 0x30
 8007a20:	b2d2      	uxtb	r2, r2
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	e00c      	b.n	8007a40 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	0f1b      	lsrs	r3, r3, #28
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	2317      	movs	r3, #23
 8007a2e:	18fb      	adds	r3, r7, r3
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	0019      	movs	r1, r3
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	185b      	adds	r3, r3, r1
 8007a3a:	3237      	adds	r2, #55	; 0x37
 8007a3c:	b2d2      	uxtb	r2, r2
 8007a3e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	011b      	lsls	r3, r3, #4
 8007a44:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a46:	2117      	movs	r1, #23
 8007a48:	187b      	adds	r3, r7, r1
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	3301      	adds	r3, #1
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	18d3      	adds	r3, r2, r3
 8007a54:	2200      	movs	r2, #0
 8007a56:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a58:	187b      	adds	r3, r7, r1
 8007a5a:	781a      	ldrb	r2, [r3, #0]
 8007a5c:	187b      	adds	r3, r7, r1
 8007a5e:	3201      	adds	r2, #1
 8007a60:	701a      	strb	r2, [r3, #0]
 8007a62:	2317      	movs	r3, #23
 8007a64:	18fa      	adds	r2, r7, r3
 8007a66:	1dfb      	adds	r3, r7, #7
 8007a68:	7812      	ldrb	r2, [r2, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d3c8      	bcc.n	8007a02 <IntToUnicode+0x1e>
  }
}
 8007a70:	46c0      	nop			; (mov r8, r8)
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b006      	add	sp, #24
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a0a      	ldr	r2, [pc, #40]	; (8007ab0 <HAL_PCD_MspInit+0x38>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d10e      	bne.n	8007aa8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <HAL_PCD_MspInit+0x3c>)
 8007a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a8e:	4b09      	ldr	r3, [pc, #36]	; (8007ab4 <HAL_PCD_MspInit+0x3c>)
 8007a90:	2180      	movs	r1, #128	; 0x80
 8007a92:	0409      	lsls	r1, r1, #16
 8007a94:	430a      	orrs	r2, r1
 8007a96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007a98:	2200      	movs	r2, #0
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	201f      	movs	r0, #31
 8007a9e:	f7f9 fb87 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007aa2:	201f      	movs	r0, #31
 8007aa4:	f7f9 fb99 	bl	80011da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007aa8:	46c0      	nop			; (mov r8, r8)
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b002      	add	sp, #8
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40005c00 	.word	0x40005c00
 8007ab4:	40021000 	.word	0x40021000

08007ab8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	239c      	movs	r3, #156	; 0x9c
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	58d2      	ldr	r2, [r2, r3]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	218c      	movs	r1, #140	; 0x8c
 8007acc:	0089      	lsls	r1, r1, #2
 8007ace:	468c      	mov	ip, r1
 8007ad0:	4463      	add	r3, ip
 8007ad2:	0019      	movs	r1, r3
 8007ad4:	0010      	movs	r0, r2
 8007ad6:	f7fe fd57 	bl	8006588 <USBD_LL_SetupStage>
}
 8007ada:	46c0      	nop			; (mov r8, r8)
 8007adc:	46bd      	mov	sp, r7
 8007ade:	b002      	add	sp, #8
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	000a      	movs	r2, r1
 8007aec:	1cfb      	adds	r3, r7, #3
 8007aee:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	239c      	movs	r3, #156	; 0x9c
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	58d0      	ldr	r0, [r2, r3]
 8007af8:	1cfb      	adds	r3, r7, #3
 8007afa:	781a      	ldrb	r2, [r3, #0]
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	239e      	movs	r3, #158	; 0x9e
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	0152      	lsls	r2, r2, #5
 8007b04:	188a      	adds	r2, r1, r2
 8007b06:	18d3      	adds	r3, r2, r3
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	1cfb      	adds	r3, r7, #3
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	0019      	movs	r1, r3
 8007b10:	f7fe fd96 	bl	8006640 <USBD_LL_DataOutStage>
}
 8007b14:	46c0      	nop			; (mov r8, r8)
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b002      	add	sp, #8
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	000a      	movs	r2, r1
 8007b26:	1cfb      	adds	r3, r7, #3
 8007b28:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	239c      	movs	r3, #156	; 0x9c
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	58d0      	ldr	r0, [r2, r3]
 8007b32:	1cfb      	adds	r3, r7, #3
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	015b      	lsls	r3, r3, #5
 8007b3a:	18d3      	adds	r3, r2, r3
 8007b3c:	333c      	adds	r3, #60	; 0x3c
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	1cfb      	adds	r3, r7, #3
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	0019      	movs	r1, r3
 8007b46:	f7fe fdfd 	bl	8006744 <USBD_LL_DataInStage>
}
 8007b4a:	46c0      	nop			; (mov r8, r8)
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	b002      	add	sp, #8
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	239c      	movs	r3, #156	; 0x9c
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	58d3      	ldr	r3, [r2, r3]
 8007b62:	0018      	movs	r0, r3
 8007b64:	f7fe ff2e 	bl	80069c4 <USBD_LL_SOF>
}
 8007b68:	46c0      	nop			; (mov r8, r8)
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	b002      	add	sp, #8
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b78:	230f      	movs	r3, #15
 8007b7a:	18fb      	adds	r3, r7, r3
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d001      	beq.n	8007b8c <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007b88:	f7f8 ffd2 	bl	8000b30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	239c      	movs	r3, #156	; 0x9c
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	58d2      	ldr	r2, [r2, r3]
 8007b94:	230f      	movs	r3, #15
 8007b96:	18fb      	adds	r3, r7, r3
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	0019      	movs	r1, r3
 8007b9c:	0010      	movs	r0, r2
 8007b9e:	f7fe fed6 	bl	800694e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	239c      	movs	r3, #156	; 0x9c
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	58d3      	ldr	r3, [r2, r3]
 8007baa:	0018      	movs	r0, r3
 8007bac:	f7fe fe87 	bl	80068be <USBD_LL_Reset>
}
 8007bb0:	46c0      	nop			; (mov r8, r8)
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	b004      	add	sp, #16
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	239c      	movs	r3, #156	; 0x9c
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	58d3      	ldr	r3, [r2, r3]
 8007bc8:	0018      	movs	r0, r3
 8007bca:	f7fe fed1 	bl	8006970 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <HAL_PCD_SuspendCallback+0x34>)
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	4b04      	ldr	r3, [pc, #16]	; (8007bec <HAL_PCD_SuspendCallback+0x34>)
 8007bdc:	2106      	movs	r1, #6
 8007bde:	430a      	orrs	r2, r1
 8007be0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	46bd      	mov	sp, r7
 8007be6:	b002      	add	sp, #8
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	e000ed00 	.word	0xe000ed00

08007bf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d007      	beq.n	8007c10 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c00:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_PCD_ResumeCallback+0x38>)
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	4b08      	ldr	r3, [pc, #32]	; (8007c28 <HAL_PCD_ResumeCallback+0x38>)
 8007c06:	2106      	movs	r1, #6
 8007c08:	438a      	bics	r2, r1
 8007c0a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007c0c:	f000 fa44 	bl	8008098 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	239c      	movs	r3, #156	; 0x9c
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	58d3      	ldr	r3, [r2, r3]
 8007c18:	0018      	movs	r0, r3
 8007c1a:	f7fe fec1 	bl	80069a0 <USBD_LL_Resume>
}
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	46bd      	mov	sp, r7
 8007c22:	b002      	add	sp, #8
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	46c0      	nop			; (mov r8, r8)
 8007c28:	e000ed00 	.word	0xe000ed00

08007c2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007c34:	4a2d      	ldr	r2, [pc, #180]	; (8007cec <USBD_LL_Init+0xc0>)
 8007c36:	239c      	movs	r3, #156	; 0x9c
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	23a6      	movs	r3, #166	; 0xa6
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4929      	ldr	r1, [pc, #164]	; (8007cec <USBD_LL_Init+0xc0>)
 8007c46:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007c48:	4b28      	ldr	r3, [pc, #160]	; (8007cec <USBD_LL_Init+0xc0>)
 8007c4a:	4a29      	ldr	r2, [pc, #164]	; (8007cf0 <USBD_LL_Init+0xc4>)
 8007c4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007c4e:	4b27      	ldr	r3, [pc, #156]	; (8007cec <USBD_LL_Init+0xc0>)
 8007c50:	2208      	movs	r2, #8
 8007c52:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007c54:	4b25      	ldr	r3, [pc, #148]	; (8007cec <USBD_LL_Init+0xc0>)
 8007c56:	2202      	movs	r2, #2
 8007c58:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c5a:	4b24      	ldr	r3, [pc, #144]	; (8007cec <USBD_LL_Init+0xc0>)
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007c60:	4b22      	ldr	r3, [pc, #136]	; (8007cec <USBD_LL_Init+0xc0>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007c66:	4b21      	ldr	r3, [pc, #132]	; (8007cec <USBD_LL_Init+0xc0>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c6c:	4b1f      	ldr	r3, [pc, #124]	; (8007cec <USBD_LL_Init+0xc0>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c72:	4b1e      	ldr	r3, [pc, #120]	; (8007cec <USBD_LL_Init+0xc0>)
 8007c74:	0018      	movs	r0, r3
 8007c76:	f7f9 fc8f 	bl	8001598 <HAL_PCD_Init>
 8007c7a:	1e03      	subs	r3, r0, #0
 8007c7c:	d001      	beq.n	8007c82 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007c7e:	f7f8 ff57 	bl	8000b30 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	23a6      	movs	r3, #166	; 0xa6
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	58d0      	ldr	r0, [r2, r3]
 8007c8a:	2318      	movs	r3, #24
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2100      	movs	r1, #0
 8007c90:	f7fa fc28 	bl	80024e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	23a6      	movs	r3, #166	; 0xa6
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	58d0      	ldr	r0, [r2, r3]
 8007c9c:	2358      	movs	r3, #88	; 0x58
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2180      	movs	r1, #128	; 0x80
 8007ca2:	f7fa fc1f 	bl	80024e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	23a6      	movs	r3, #166	; 0xa6
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	58d0      	ldr	r0, [r2, r3]
 8007cae:	23c0      	movs	r3, #192	; 0xc0
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2181      	movs	r1, #129	; 0x81
 8007cb4:	f7fa fc16 	bl	80024e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	23a6      	movs	r3, #166	; 0xa6
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	58d0      	ldr	r0, [r2, r3]
 8007cc0:	2388      	movs	r3, #136	; 0x88
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	f7fa fc0c 	bl	80024e4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	23a6      	movs	r3, #166	; 0xa6
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	58d0      	ldr	r0, [r2, r3]
 8007cd4:	2380      	movs	r3, #128	; 0x80
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2182      	movs	r1, #130	; 0x82
 8007cdc:	f7fa fc02 	bl	80024e4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	0018      	movs	r0, r3
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	b002      	add	sp, #8
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	46c0      	nop			; (mov r8, r8)
 8007cec:	20001140 	.word	0x20001140
 8007cf0:	40005c00 	.word	0x40005c00

08007cf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cfc:	210f      	movs	r1, #15
 8007cfe:	187b      	adds	r3, r7, r1
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d04:	260e      	movs	r6, #14
 8007d06:	19bb      	adds	r3, r7, r6
 8007d08:	2200      	movs	r2, #0
 8007d0a:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	23a6      	movs	r3, #166	; 0xa6
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	58d3      	ldr	r3, [r2, r3]
 8007d14:	000d      	movs	r5, r1
 8007d16:	187c      	adds	r4, r7, r1
 8007d18:	0018      	movs	r0, r3
 8007d1a:	f7f9 fd31 	bl	8001780 <HAL_PCD_Start>
 8007d1e:	0003      	movs	r3, r0
 8007d20:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d22:	19bc      	adds	r4, r7, r6
 8007d24:	0029      	movs	r1, r5
 8007d26:	187b      	adds	r3, r7, r1
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f000 f9bb 	bl	80080a6 <USBD_Get_USB_Status>
 8007d30:	0003      	movs	r3, r0
 8007d32:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 8007d34:	19bb      	adds	r3, r7, r6
 8007d36:	781b      	ldrb	r3, [r3, #0]
}
 8007d38:	0018      	movs	r0, r3
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	b005      	add	sp, #20
 8007d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007d40 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	000c      	movs	r4, r1
 8007d4a:	0010      	movs	r0, r2
 8007d4c:	0019      	movs	r1, r3
 8007d4e:	1cfb      	adds	r3, r7, #3
 8007d50:	1c22      	adds	r2, r4, #0
 8007d52:	701a      	strb	r2, [r3, #0]
 8007d54:	1cbb      	adds	r3, r7, #2
 8007d56:	1c02      	adds	r2, r0, #0
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	003b      	movs	r3, r7
 8007d5c:	1c0a      	adds	r2, r1, #0
 8007d5e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d60:	260f      	movs	r6, #15
 8007d62:	19bb      	adds	r3, r7, r6
 8007d64:	2200      	movs	r2, #0
 8007d66:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d68:	250e      	movs	r5, #14
 8007d6a:	197b      	adds	r3, r7, r5
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	23a6      	movs	r3, #166	; 0xa6
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	58d0      	ldr	r0, [r2, r3]
 8007d78:	19bc      	adds	r4, r7, r6
 8007d7a:	1cbb      	adds	r3, r7, #2
 8007d7c:	781d      	ldrb	r5, [r3, #0]
 8007d7e:	003b      	movs	r3, r7
 8007d80:	881a      	ldrh	r2, [r3, #0]
 8007d82:	1cfb      	adds	r3, r7, #3
 8007d84:	7819      	ldrb	r1, [r3, #0]
 8007d86:	002b      	movs	r3, r5
 8007d88:	f7f9 fed3 	bl	8001b32 <HAL_PCD_EP_Open>
 8007d8c:	0003      	movs	r3, r0
 8007d8e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d90:	250e      	movs	r5, #14
 8007d92:	197c      	adds	r4, r7, r5
 8007d94:	19bb      	adds	r3, r7, r6
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f000 f984 	bl	80080a6 <USBD_Get_USB_Status>
 8007d9e:	0003      	movs	r3, r0
 8007da0:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 8007da2:	197b      	adds	r3, r7, r5
 8007da4:	781b      	ldrb	r3, [r3, #0]
}
 8007da6:	0018      	movs	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	b005      	add	sp, #20
 8007dac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007dae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	000a      	movs	r2, r1
 8007db8:	1cfb      	adds	r3, r7, #3
 8007dba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dbc:	210f      	movs	r1, #15
 8007dbe:	187b      	adds	r3, r7, r1
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc4:	260e      	movs	r6, #14
 8007dc6:	19bb      	adds	r3, r7, r6
 8007dc8:	2200      	movs	r2, #0
 8007dca:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	23a6      	movs	r3, #166	; 0xa6
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	58d2      	ldr	r2, [r2, r3]
 8007dd4:	000d      	movs	r5, r1
 8007dd6:	187c      	adds	r4, r7, r1
 8007dd8:	1cfb      	adds	r3, r7, #3
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	0019      	movs	r1, r3
 8007dde:	0010      	movs	r0, r2
 8007de0:	f7f9 ff19 	bl	8001c16 <HAL_PCD_EP_Close>
 8007de4:	0003      	movs	r3, r0
 8007de6:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de8:	19bc      	adds	r4, r7, r6
 8007dea:	0029      	movs	r1, r5
 8007dec:	187b      	adds	r3, r7, r1
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	0018      	movs	r0, r3
 8007df2:	f000 f958 	bl	80080a6 <USBD_Get_USB_Status>
 8007df6:	0003      	movs	r3, r0
 8007df8:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 8007dfa:	19bb      	adds	r3, r7, r6
 8007dfc:	781b      	ldrb	r3, [r3, #0]
}
 8007dfe:	0018      	movs	r0, r3
 8007e00:	46bd      	mov	sp, r7
 8007e02:	b005      	add	sp, #20
 8007e04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e06 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	000a      	movs	r2, r1
 8007e10:	1cfb      	adds	r3, r7, #3
 8007e12:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e14:	210f      	movs	r1, #15
 8007e16:	187b      	adds	r3, r7, r1
 8007e18:	2200      	movs	r2, #0
 8007e1a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e1c:	260e      	movs	r6, #14
 8007e1e:	19bb      	adds	r3, r7, r6
 8007e20:	2200      	movs	r2, #0
 8007e22:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	23a6      	movs	r3, #166	; 0xa6
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	58d2      	ldr	r2, [r2, r3]
 8007e2c:	000d      	movs	r5, r1
 8007e2e:	187c      	adds	r4, r7, r1
 8007e30:	1cfb      	adds	r3, r7, #3
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	0019      	movs	r1, r3
 8007e36:	0010      	movs	r0, r2
 8007e38:	f7f9 ffce 	bl	8001dd8 <HAL_PCD_EP_SetStall>
 8007e3c:	0003      	movs	r3, r0
 8007e3e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e40:	19bc      	adds	r4, r7, r6
 8007e42:	0029      	movs	r1, r5
 8007e44:	187b      	adds	r3, r7, r1
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	0018      	movs	r0, r3
 8007e4a:	f000 f92c 	bl	80080a6 <USBD_Get_USB_Status>
 8007e4e:	0003      	movs	r3, r0
 8007e50:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8007e52:	19bb      	adds	r3, r7, r6
 8007e54:	781b      	ldrb	r3, [r3, #0]
}
 8007e56:	0018      	movs	r0, r3
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	b005      	add	sp, #20
 8007e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e60:	b085      	sub	sp, #20
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	000a      	movs	r2, r1
 8007e68:	1cfb      	adds	r3, r7, #3
 8007e6a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e6c:	210f      	movs	r1, #15
 8007e6e:	187b      	adds	r3, r7, r1
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e74:	260e      	movs	r6, #14
 8007e76:	19bb      	adds	r3, r7, r6
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	23a6      	movs	r3, #166	; 0xa6
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	58d2      	ldr	r2, [r2, r3]
 8007e84:	000d      	movs	r5, r1
 8007e86:	187c      	adds	r4, r7, r1
 8007e88:	1cfb      	adds	r3, r7, #3
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	0019      	movs	r1, r3
 8007e8e:	0010      	movs	r0, r2
 8007e90:	f7fa f808 	bl	8001ea4 <HAL_PCD_EP_ClrStall>
 8007e94:	0003      	movs	r3, r0
 8007e96:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e98:	19bc      	adds	r4, r7, r6
 8007e9a:	0029      	movs	r1, r5
 8007e9c:	187b      	adds	r3, r7, r1
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	f000 f900 	bl	80080a6 <USBD_Get_USB_Status>
 8007ea6:	0003      	movs	r3, r0
 8007ea8:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 8007eaa:	19bb      	adds	r3, r7, r6
 8007eac:	781b      	ldrb	r3, [r3, #0]
}
 8007eae:	0018      	movs	r0, r3
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	b005      	add	sp, #20
 8007eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007eb6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b084      	sub	sp, #16
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	000a      	movs	r2, r1
 8007ec0:	1cfb      	adds	r3, r7, #3
 8007ec2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	23a6      	movs	r3, #166	; 0xa6
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	58d3      	ldr	r3, [r2, r3]
 8007ecc:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007ece:	1cfb      	adds	r3, r7, #3
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	b25b      	sxtb	r3, r3
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	da0a      	bge.n	8007eee <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007ed8:	1cfb      	adds	r3, r7, #3
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	227f      	movs	r2, #127	; 0x7f
 8007ede:	4013      	ands	r3, r2
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	212a      	movs	r1, #42	; 0x2a
 8007ee4:	015b      	lsls	r3, r3, #5
 8007ee6:	18d3      	adds	r3, r2, r3
 8007ee8:	185b      	adds	r3, r3, r1
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	e00a      	b.n	8007f04 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007eee:	1cfb      	adds	r3, r7, #3
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	227f      	movs	r2, #127	; 0x7f
 8007ef4:	401a      	ands	r2, r3
 8007ef6:	68f9      	ldr	r1, [r7, #12]
 8007ef8:	2395      	movs	r3, #149	; 0x95
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	0152      	lsls	r2, r2, #5
 8007efe:	188a      	adds	r2, r1, r2
 8007f00:	18d3      	adds	r3, r2, r3
 8007f02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f04:	0018      	movs	r0, r3
 8007f06:	46bd      	mov	sp, r7
 8007f08:	b004      	add	sp, #16
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	000a      	movs	r2, r1
 8007f16:	1cfb      	adds	r3, r7, #3
 8007f18:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f1a:	210f      	movs	r1, #15
 8007f1c:	187b      	adds	r3, r7, r1
 8007f1e:	2200      	movs	r2, #0
 8007f20:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f22:	260e      	movs	r6, #14
 8007f24:	19bb      	adds	r3, r7, r6
 8007f26:	2200      	movs	r2, #0
 8007f28:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	23a6      	movs	r3, #166	; 0xa6
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	58d2      	ldr	r2, [r2, r3]
 8007f32:	000d      	movs	r5, r1
 8007f34:	187c      	adds	r4, r7, r1
 8007f36:	1cfb      	adds	r3, r7, #3
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	0019      	movs	r1, r3
 8007f3c:	0010      	movs	r0, r2
 8007f3e:	f7f9 fdcd 	bl	8001adc <HAL_PCD_SetAddress>
 8007f42:	0003      	movs	r3, r0
 8007f44:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f46:	19bc      	adds	r4, r7, r6
 8007f48:	0029      	movs	r1, r5
 8007f4a:	187b      	adds	r3, r7, r1
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f000 f8a9 	bl	80080a6 <USBD_Get_USB_Status>
 8007f54:	0003      	movs	r3, r0
 8007f56:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8007f58:	19bb      	adds	r3, r7, r6
 8007f5a:	781b      	ldrb	r3, [r3, #0]
}
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	b005      	add	sp, #20
 8007f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f64 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	0008      	movs	r0, r1
 8007f6e:	607a      	str	r2, [r7, #4]
 8007f70:	0019      	movs	r1, r3
 8007f72:	230b      	movs	r3, #11
 8007f74:	18fb      	adds	r3, r7, r3
 8007f76:	1c02      	adds	r2, r0, #0
 8007f78:	701a      	strb	r2, [r3, #0]
 8007f7a:	2408      	movs	r4, #8
 8007f7c:	193b      	adds	r3, r7, r4
 8007f7e:	1c0a      	adds	r2, r1, #0
 8007f80:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f82:	2117      	movs	r1, #23
 8007f84:	187b      	adds	r3, r7, r1
 8007f86:	2200      	movs	r2, #0
 8007f88:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8a:	2516      	movs	r5, #22
 8007f8c:	197b      	adds	r3, r7, r5
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	23a6      	movs	r3, #166	; 0xa6
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	58d0      	ldr	r0, [r2, r3]
 8007f9a:	193b      	adds	r3, r7, r4
 8007f9c:	881d      	ldrh	r5, [r3, #0]
 8007f9e:	000e      	movs	r6, r1
 8007fa0:	187c      	adds	r4, r7, r1
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	230b      	movs	r3, #11
 8007fa6:	18fb      	adds	r3, r7, r3
 8007fa8:	7819      	ldrb	r1, [r3, #0]
 8007faa:	002b      	movs	r3, r5
 8007fac:	f7f9 fed4 	bl	8001d58 <HAL_PCD_EP_Transmit>
 8007fb0:	0003      	movs	r3, r0
 8007fb2:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb4:	2516      	movs	r5, #22
 8007fb6:	197c      	adds	r4, r7, r5
 8007fb8:	0031      	movs	r1, r6
 8007fba:	187b      	adds	r3, r7, r1
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f000 f871 	bl	80080a6 <USBD_Get_USB_Status>
 8007fc4:	0003      	movs	r3, r0
 8007fc6:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 8007fc8:	197b      	adds	r3, r7, r5
 8007fca:	781b      	ldrb	r3, [r3, #0]
}
 8007fcc:	0018      	movs	r0, r3
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	b007      	add	sp, #28
 8007fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	0008      	movs	r0, r1
 8007fde:	607a      	str	r2, [r7, #4]
 8007fe0:	0019      	movs	r1, r3
 8007fe2:	230b      	movs	r3, #11
 8007fe4:	18fb      	adds	r3, r7, r3
 8007fe6:	1c02      	adds	r2, r0, #0
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	2408      	movs	r4, #8
 8007fec:	193b      	adds	r3, r7, r4
 8007fee:	1c0a      	adds	r2, r1, #0
 8007ff0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff2:	2117      	movs	r1, #23
 8007ff4:	187b      	adds	r3, r7, r1
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ffa:	2516      	movs	r5, #22
 8007ffc:	197b      	adds	r3, r7, r5
 8007ffe:	2200      	movs	r2, #0
 8008000:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	23a6      	movs	r3, #166	; 0xa6
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	58d0      	ldr	r0, [r2, r3]
 800800a:	193b      	adds	r3, r7, r4
 800800c:	881d      	ldrh	r5, [r3, #0]
 800800e:	000e      	movs	r6, r1
 8008010:	187c      	adds	r4, r7, r1
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	230b      	movs	r3, #11
 8008016:	18fb      	adds	r3, r7, r3
 8008018:	7819      	ldrb	r1, [r3, #0]
 800801a:	002b      	movs	r3, r5
 800801c:	f7f9 fe46 	bl	8001cac <HAL_PCD_EP_Receive>
 8008020:	0003      	movs	r3, r0
 8008022:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008024:	2516      	movs	r5, #22
 8008026:	197c      	adds	r4, r7, r5
 8008028:	0031      	movs	r1, r6
 800802a:	187b      	adds	r3, r7, r1
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	0018      	movs	r0, r3
 8008030:	f000 f839 	bl	80080a6 <USBD_Get_USB_Status>
 8008034:	0003      	movs	r3, r0
 8008036:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8008038:	197b      	adds	r3, r7, r5
 800803a:	781b      	ldrb	r3, [r3, #0]
}
 800803c:	0018      	movs	r0, r3
 800803e:	46bd      	mov	sp, r7
 8008040:	b007      	add	sp, #28
 8008042:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008044 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	000a      	movs	r2, r1
 800804e:	1cfb      	adds	r3, r7, #3
 8008050:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	23a6      	movs	r3, #166	; 0xa6
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	58d2      	ldr	r2, [r2, r3]
 800805a:	1cfb      	adds	r3, r7, #3
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	0019      	movs	r1, r3
 8008060:	0010      	movs	r0, r2
 8008062:	f7f9 fe64 	bl	8001d2e <HAL_PCD_EP_GetRxCount>
 8008066:	0003      	movs	r3, r0
}
 8008068:	0018      	movs	r0, r3
 800806a:	46bd      	mov	sp, r7
 800806c:	b002      	add	sp, #8
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008078:	4b02      	ldr	r3, [pc, #8]	; (8008084 <USBD_static_malloc+0x14>)
}
 800807a:	0018      	movs	r0, r3
 800807c:	46bd      	mov	sp, r7
 800807e:	b002      	add	sp, #8
 8008080:	bd80      	pop	{r7, pc}
 8008082:	46c0      	nop			; (mov r8, r8)
 8008084:	20000194 	.word	0x20000194

08008088 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]

}
 8008090:	46c0      	nop			; (mov r8, r8)
 8008092:	46bd      	mov	sp, r7
 8008094:	b002      	add	sp, #8
 8008096:	bd80      	pop	{r7, pc}

08008098 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800809c:	f7f8 fab2 	bl	8000604 <SystemClock_Config>
}
 80080a0:	46c0      	nop			; (mov r8, r8)
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	0002      	movs	r2, r0
 80080ae:	1dfb      	adds	r3, r7, #7
 80080b0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080b2:	230f      	movs	r3, #15
 80080b4:	18fb      	adds	r3, r7, r3
 80080b6:	2200      	movs	r2, #0
 80080b8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80080ba:	1dfb      	adds	r3, r7, #7
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d00d      	beq.n	80080de <USBD_Get_USB_Status+0x38>
 80080c2:	dc02      	bgt.n	80080ca <USBD_Get_USB_Status+0x24>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <USBD_Get_USB_Status+0x2e>
 80080c8:	e018      	b.n	80080fc <USBD_Get_USB_Status+0x56>
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d00c      	beq.n	80080e8 <USBD_Get_USB_Status+0x42>
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d00f      	beq.n	80080f2 <USBD_Get_USB_Status+0x4c>
 80080d2:	e013      	b.n	80080fc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080d4:	230f      	movs	r3, #15
 80080d6:	18fb      	adds	r3, r7, r3
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
    break;
 80080dc:	e013      	b.n	8008106 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080de:	230f      	movs	r3, #15
 80080e0:	18fb      	adds	r3, r7, r3
 80080e2:	2202      	movs	r2, #2
 80080e4:	701a      	strb	r2, [r3, #0]
    break;
 80080e6:	e00e      	b.n	8008106 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080e8:	230f      	movs	r3, #15
 80080ea:	18fb      	adds	r3, r7, r3
 80080ec:	2201      	movs	r2, #1
 80080ee:	701a      	strb	r2, [r3, #0]
    break;
 80080f0:	e009      	b.n	8008106 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080f2:	230f      	movs	r3, #15
 80080f4:	18fb      	adds	r3, r7, r3
 80080f6:	2202      	movs	r2, #2
 80080f8:	701a      	strb	r2, [r3, #0]
    break;
 80080fa:	e004      	b.n	8008106 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80080fc:	230f      	movs	r3, #15
 80080fe:	18fb      	adds	r3, r7, r3
 8008100:	2202      	movs	r2, #2
 8008102:	701a      	strb	r2, [r3, #0]
    break;
 8008104:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8008106:	230f      	movs	r3, #15
 8008108:	18fb      	adds	r3, r7, r3
 800810a:	781b      	ldrb	r3, [r3, #0]
}
 800810c:	0018      	movs	r0, r3
 800810e:	46bd      	mov	sp, r7
 8008110:	b004      	add	sp, #16
 8008112:	bd80      	pop	{r7, pc}

08008114 <__libc_init_array>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	2600      	movs	r6, #0
 8008118:	4d0c      	ldr	r5, [pc, #48]	; (800814c <__libc_init_array+0x38>)
 800811a:	4c0d      	ldr	r4, [pc, #52]	; (8008150 <__libc_init_array+0x3c>)
 800811c:	1b64      	subs	r4, r4, r5
 800811e:	10a4      	asrs	r4, r4, #2
 8008120:	42a6      	cmp	r6, r4
 8008122:	d109      	bne.n	8008138 <__libc_init_array+0x24>
 8008124:	2600      	movs	r6, #0
 8008126:	f000 f821 	bl	800816c <_init>
 800812a:	4d0a      	ldr	r5, [pc, #40]	; (8008154 <__libc_init_array+0x40>)
 800812c:	4c0a      	ldr	r4, [pc, #40]	; (8008158 <__libc_init_array+0x44>)
 800812e:	1b64      	subs	r4, r4, r5
 8008130:	10a4      	asrs	r4, r4, #2
 8008132:	42a6      	cmp	r6, r4
 8008134:	d105      	bne.n	8008142 <__libc_init_array+0x2e>
 8008136:	bd70      	pop	{r4, r5, r6, pc}
 8008138:	00b3      	lsls	r3, r6, #2
 800813a:	58eb      	ldr	r3, [r5, r3]
 800813c:	4798      	blx	r3
 800813e:	3601      	adds	r6, #1
 8008140:	e7ee      	b.n	8008120 <__libc_init_array+0xc>
 8008142:	00b3      	lsls	r3, r6, #2
 8008144:	58eb      	ldr	r3, [r5, r3]
 8008146:	4798      	blx	r3
 8008148:	3601      	adds	r6, #1
 800814a:	e7f2      	b.n	8008132 <__libc_init_array+0x1e>
 800814c:	08008330 	.word	0x08008330
 8008150:	08008330 	.word	0x08008330
 8008154:	08008330 	.word	0x08008330
 8008158:	08008334 	.word	0x08008334

0800815c <memset>:
 800815c:	0003      	movs	r3, r0
 800815e:	1812      	adds	r2, r2, r0
 8008160:	4293      	cmp	r3, r2
 8008162:	d100      	bne.n	8008166 <memset+0xa>
 8008164:	4770      	bx	lr
 8008166:	7019      	strb	r1, [r3, #0]
 8008168:	3301      	adds	r3, #1
 800816a:	e7f9      	b.n	8008160 <memset+0x4>

0800816c <_init>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	46c0      	nop			; (mov r8, r8)
 8008170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008172:	bc08      	pop	{r3}
 8008174:	469e      	mov	lr, r3
 8008176:	4770      	bx	lr

08008178 <_fini>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817e:	bc08      	pop	{r3}
 8008180:	469e      	mov	lr, r3
 8008182:	4770      	bx	lr
